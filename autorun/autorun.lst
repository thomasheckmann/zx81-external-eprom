# file opened: autorun.asm
    1 0000              ; ===========================================================
    2 0000              ; An Assembly Listing of the Operating System of the ZX81 ROM
    3 0000              ; MODIFIED TO COMPILE WITH: sjasmplus autorun.asm --raw=autorun.bin --lst=autorun.lst
    4 0000              ; ===========================================================
    5 0000              ; -------------------------
    6 0000              ; Last updated: 13-DEC-2004
    7 0000              ; -------------------------
    8 0000              ;
    9 0000              ; Work in progress.
   10 0000              ; This file will cross-assemble an original version of the "Improved"
   11 0000              ; ZX81 ROM.  The file can be modified to change the behaviour of the ROM
   12 0000              ; when used in emulators although there is no spare space available.
   13 0000              ;
   14 0000              ; The documentation is incomplete and if you can find a copy
   15 0000              ; of "The Complete Spectrum ROM Disassembly" then many routines
   16 0000              ; such as POINTERS and most of the mathematical routines are
   17 0000              ; similar and often identical.
   18 0000              ;
   19 0000              ; I've used the labels from the above book in this file and also
   20 0000              ; some from the more elusive Complete ZX81 ROM Disassembly
   21 0000              ; by the same publishers, Melbourne House.
   22 0000
   23 0000                      ORG 0x0000;
   24 0000
   25 0000              ;*****************************************
   26 0000              ;** Part 1. RESTART ROUTINES AND TABLES **
   27 0000              ;*****************************************
   28 0000
   29 0000              ; -----------
   30 0000              ; THE 'START'
   31 0000              ; -----------
   32 0000              ; All Z80 chips start at location zero.
   33 0000              ; At start-up the Interrupt Mode is 0, ZX computers use Interrupt Mode 1.
   34 0000              ; Interrupts are disabled .
   35 0000
   36 0000              ;; START
   37 0000              L0000:
   38 0000 D3 FD        RESET:  OUT $FD,A               ;TURN OFF NMI
   39 0002 21 FF 7F             LD HL,$7FFF             ;RAMTOP = 7FFF
   40 0005 97                   SUB A                   ;RESET/NEW FLAG (CF)
   41 0006 18 1D                JR RST1                 ;JP 03CA VIA RST1
   42 0008
   43 0008              ;THREE FREE BYTES AT 0025
   44 0008              ;ARE USED FOR A LONG JUMP
   45 0008
   46 0008              ; -------------------
   47 0008              ; THE 'ERROR' RESTART
   48 0008              ; -------------------
   49 0008              ; The error restart deals immediately with an error. ZX computers execute the
   50 0008              ; same code in runtime as when checking syntax. If the error occurred while
   51 0008              ; running a program then a brief report is produced. If the error occurred
   52 0008              ; while entering a BASIC line or in input etc., then the error marker indicates
   53 0008              ; the exact point at which the error lies.
   54 0008
   55 0008              ;; ERROR-1
   56 0008 2A 16 40     L0008:  LD      HL,($4016)      ; fetch character address from CH_ADD.
   57 000B 22 18 40             LD      ($4018),HL      ; and set the error pointer X_PTR.
   58 000E 18 46                JR      L0056           ; forward to continue at ERROR-2.
   59 0010
   60 0010              ; -------------------------------
   61 0010              ; THE 'PRINT A CHARACTER' RESTART
   62 0010              ; -------------------------------
   63 0010              ; This restart prints the character in the accumulator using the alternate
   64 0010              ; register set so there is no requirement to save the main registers.
   65 0010              ; There is sufficient room available to separate a space (zero) from other
   66 0010              ; characters as leading spaces need not be considered with a space.
   67 0010
   68 0010              ;; PRINT-A
   69 0010 A7           L0010:  AND     A               ; test for zero - space.
   70 0011 C2 F1 07             JP      NZ,L07F1        ; jump forward if not to PRINT-CH.
   71 0014
   72 0014 C3 F5 07             JP      L07F5           ; jump forward to PRINT-SP.
   73 0017
   74 0017              ; ---
   75 0017
   76 0017 FF                   DEFB    $FF             ; unused location.
   77 0018
   78 0018              ; ---------------------------------
   79 0018              ; THE 'COLLECT A CHARACTER' RESTART
   80 0018              ; ---------------------------------
   81 0018              ; The character addressed by the system variable CH_ADD is fetched and if it
   82 0018              ; is a non-space, non-cursor character it is returned else CH_ADD is
   83 0018              ; incremented and the new addressed character tested until it is not a space.
   84 0018
   85 0018              ;; GET-CHAR
   86 0018 2A 16 40     L0018:  LD      HL,($4016)      ; set HL to character address CH_ADD.
   87 001B 7E                   LD      A,(HL)          ; fetch addressed character to A.
   88 001C
   89 001C              ;; TEST-SP
   90 001C A7           L001C:  AND     A               ; test for space.
   91 001D C0                   RET     NZ              ; return if not a space
   92 001E
   93 001E 00                   NOP                     ; else trickle through
   94 001F 00                   NOP                     ; to the next routine.
   95 0020
   96 0020              ; ------------------------------------
   97 0020              ; THE 'COLLECT NEXT CHARACTER' RESTART
   98 0020              ; ------------------------------------
   99 0020              ; The character address in incremented and the new addressed character is
  100 0020              ; returned if not a space, or cursor, else the process is repeated.
  101 0020
  102 0020              ;; NEXT-CHAR
  103 0020 CD 49 00     L0020:  CALL    L0049           ; routine CH-ADD+1 gets next immediate
  104 0023                                              ; character.
  105 0023 18 F7                JR      L001C           ; back to TEST-SP.
  106 0025
  107 0025              ; ---
  108 0025              ; ORG $25
  109 0025 C3 CA 03     RST1:   JP      RST2            ; NOW JUMP TO RST2
  110 0028
  111 0028              ; ---------------------------------------
  112 0028              ; THE 'FLOATING POINT CALCULATOR' RESTART
  113 0028              ; ---------------------------------------
  114 0028              ; this restart jumps to the recursive floating-point calculator.
  115 0028              ; the ZX81's internal, FORTH-like, stack-based language.
  116 0028              ;
  117 0028              ; In the five remaining bytes there is, appropriately, enough room for the
  118 0028              ; end-calc literal - the instruction which exits the calculator.
  119 0028
  120 0028              ;; FP-CALC
  121 0028 C3 9D 19     L0028:  JP      L199D           ; jump immediately to the CALCULATE routine.
  122 002B
  123 002B              ; ---
  124 002B
  125 002B              ;; end-calc
  126 002B F1           L002B:  POP     AF              ; drop the calculator return address RE-ENTRY
  127 002C D9                   EXX                     ; switch to the other set.
  128 002D
  129 002D E3                   EX      (SP),HL         ; transfer H'L' to machine stack for the
  130 002E                                              ; return address.
  131 002E                                              ; when exiting recursion then the previous
  132 002E                                              ; pointer is transferred to H'L'.
  133 002E
  134 002E D9                   EXX                     ; back to main set.
  135 002F C9                   RET                     ; return.
  136 0030
  137 0030
  138 0030              ; -----------------------------
  139 0030              ; THE 'MAKE BC SPACES'  RESTART
  140 0030              ; -----------------------------
  141 0030              ; This restart is used eight times to create, in workspace, the number of
  142 0030              ; spaces passed in the BC register.
  143 0030
  144 0030              ;; BC-SPACES
  145 0030 C5           L0030:  PUSH    BC              ; push number of spaces on stack.
  146 0031 2A 14 40             LD      HL,($4014)      ; fetch edit line location from E_LINE.
  147 0034 E5                   PUSH    HL              ; save this value on stack.
  148 0035 C3 88 14             JP      L1488           ; jump forward to continue at RESERVE.
  149 0038
  150 0038              ; -----------------------
  151 0038              ; THE 'INTERRUPT' RESTART
  152 0038              ; -----------------------
  153 0038              ;   The Mode 1 Interrupt routine is concerned solely with generating the central
  154 0038              ;   television picture.
  155 0038              ;   On the ZX81 interrupts are enabled only during the interrupt routine,
  156 0038              ;   although the interrupt
  157 0038              ;   This Interrupt Service Routine automatically disables interrupts at the
  158 0038              ;   outset and the last interrupt in a cascade exits before the interrupts are
  159 0038              ;   enabled.
  160 0038              ;   There is no DI instruction in the ZX81 ROM.
  161 0038              ;   An maskable interrupt is triggered when bit 6 of the Z80's Refresh register
  162 0038              ;   changes from set to reset.
  163 0038              ;   The Z80 will always be executing a HALT (NEWLINE) when the interrupt occurs.
  164 0038              ;   A HALT instruction repeatedly executes NOPS but the seven lower bits
  165 0038              ;   of the Refresh register are incremented each time as they are when any
  166 0038              ;   simple instruction is executed. (The lower 7 bits are incremented twice for
  167 0038              ;   a prefixed instruction)
  168 0038              ;   This is controlled by the Sinclair Computer Logic Chip - manufactured from
  169 0038              ;   a Ferranti Uncommitted Logic Array.
  170 0038              ;
  171 0038              ;   When a Mode 1 Interrupt occurs the Program Counter, which is the address in
  172 0038              ;   the upper echo display following the NEWLINE/HALT instruction, goes on the
  173 0038              ;   machine stack.  193 interrupts are required to generate the last part of
  174 0038              ;   the 56th border line and then the 192 lines of the central TV picture and,
  175 0038              ;   although each interrupt interrupts the previous one, there are no stack
  176 0038              ;   problems as the 'return address' is discarded each time.
  177 0038              ;
  178 0038              ;   The scan line counter in C counts down from 8 to 1 within the generation of
  179 0038              ;   each text line. For the first interrupt in a cascade the initial value of
  180 0038              ;   C is set to 1 for the last border line.
  181 0038              ;   Timing is of the utmost importance as the RH border, horizontal retrace
  182 0038              ;   and LH border are mostly generated in the 58 clock cycles this routine
  183 0038              ;   takes .
  184 0038
  185 0038              ;; INTERRUPT
  186 0038 0D           L0038:  DEC     C               ; (4)  decrement C - the scan line counter.
  187 0039 C2 45 00             JP      NZ,L0045        ; (10/10) JUMP forward if not zero to SCAN-LINE
  188 003C
  189 003C E1                   POP     HL              ; (10) point to start of next row in display
  190 003D                                              ;      file.
  191 003D
  192 003D 05                   DEC     B               ; (4)  decrement the row counter. (4)
  193 003E C8                   RET     Z               ; (11/5) return when picture complete to L028B
  194 003F                                              ;      with interrupts disabled.
  195 003F
  196 003F CB D9                SET     3,C             ; (8)  Load the scan line counter with eight.
  197 0041                                              ;      Note. LD C,$08 is 7 clock cycles which
  198 0041                                              ;      is way too fast.
  199 0041
  200 0041              ; ->
  201 0041
  202 0041              ;; WAIT-INT
  203 0041 ED 4F        L0041:  LD      R,A             ; (9) Load R with initial rising value $DD.
  204 0043
  205 0043 FB                   EI                      ; (4) Enable Interrupts.  [ R is now $DE ].
  206 0044
  207 0044 E9                   JP      (HL)            ; (4) jump to the echo display file in upper
  208 0045                                              ;     memory and execute characters $00 - $3F
  209 0045                                              ;     as NOP instructions.  The video hardware
  210 0045                                              ;     is able to read these characters and,
  211 0045                                              ;     with the I register is able to convert
  212 0045                                              ;     the character bitmaps in this ROM into a
  213 0045                                              ;     line of bytes. Eventually the NEWLINE/HALT
  214 0045                                              ;     will be encountered before R reaches $FF.
  215 0045                                              ;     It is however the transition from $FF to
  216 0045                                              ;     $80 that triggers the next interrupt.
  217 0045                                              ;     [ The Refresh register is now $DF ]
  218 0045
  219 0045              ; ---
  220 0045
  221 0045              ;; SCAN-LINE
  222 0045 D1           L0045:  POP     DE              ; (10) discard the address after NEWLINE as the
  223 0046                                              ;      same text line has to be done again
  224 0046                                              ;      eight times.
  225 0046
  226 0046 C8                   RET     Z               ; (5)  Harmless Nonsensical Timing.
  227 0047                                              ;      (condition never met)
  228 0047
  229 0047 18 F8                JR      L0041           ; (12) back to WAIT-INT
  230 0049
  231 0049              ;   Note. that a computer with less than 4K or RAM will have a collapsed
  232 0049              ;   display file and the above mechanism deals with both types of display.
  233 0049              ;
  234 0049              ;   With a full display, the 32 characters in the line are treated as NOPS
  235 0049              ;   and the Refresh register rises from $E0 to $FF and, at the next instruction
  236 0049              ;   - HALT, the interrupt occurs.
  237 0049              ;   With a collapsed display and an initial NEWLINE/HALT, it is the NOPs
  238 0049              ;   generated by the HALT that cause the Refresh value to rise from $E0 to $FF,
  239 0049              ;   triggering an Interrupt on the next transition.
  240 0049              ;   This works happily for all display lines between these extremes and the
  241 0049              ;   generation of the 32 character, 1 pixel high, line will always take 128
  242 0049              ;   clock cycles.
  243 0049
  244 0049              ; ---------------------------------
  245 0049              ; THE 'INCREMENT CH-ADD' SUBROUTINE
  246 0049              ; ---------------------------------
  247 0049              ; This is the subroutine that increments the character address system variable
  248 0049              ; and returns if it is not the cursor character. The ZX81 has an actual
  249 0049              ; character at the cursor position rather than a pointer system variable
  250 0049              ; as is the case with prior and subsequent ZX computers.
  251 0049
  252 0049              ;; CH-ADD+1
  253 0049 2A 16 40     L0049:  LD      HL,($4016)      ; fetch character address to CH_ADD.
  254 004C
  255 004C              ;; TEMP-PTR1
  256 004C 23           L004C:  INC     HL              ; address next immediate location.
  257 004D
  258 004D              ;; TEMP-PTR2
  259 004D 22 16 40     L004D:  LD      ($4016),HL      ; update system variable CH_ADD.
  260 0050
  261 0050 7E                   LD      A,(HL)          ; fetch the character.
  262 0051 FE 7F                CP      $7F             ; compare to cursor character.
  263 0053 C0                   RET     NZ              ; return if not the cursor.
  264 0054
  265 0054 18 F6                JR      L004C           ; back for next character to TEMP-PTR1.
  266 0056
  267 0056              ; --------------------
  268 0056              ; THE 'ERROR-2' BRANCH
  269 0056              ; --------------------
  270 0056              ; This is a continuation of the error restart.
  271 0056              ; If the error occurred in runtime then the error stack pointer will probably
  272 0056              ; lead to an error report being printed unless it occurred during input.
  273 0056              ; If the error occurred when checking syntax then the error stack pointer
  274 0056              ; will be an editing routine and the position of the error will be shown
  275 0056              ; when the lower screen is reprinted.
  276 0056
  277 0056              ;; ERROR-2
  278 0056 E1           L0056:  POP     HL              ; pop the return address which points to the
  279 0057                                              ; DEFB, error code, after the RST 08.
  280 0057 6E                   LD      L,(HL)          ; load L with the error code. HL is not needed
  281 0058                                              ; anymore.
  282 0058
  283 0058              ;; ERROR-3
  284 0058 FD 75 00     L0058:  LD      (IY+$00),L      ; place error code in system variable ERR_NR
  285 005B ED 7B 02 40          LD      SP,($4002)      ; set the stack pointer from ERR_SP
  286 005F CD 07 02             CALL    L0207           ; routine SLOW/FAST selects slow mode.
  287 0062 C3 BC 14             JP      L14BC           ; exit to address on stack via routine SET-MIN.
  288 0065
  289 0065              ; ---
  290 0065
  291 0065 FF                   DEFB    $FF             ; unused.
  292 0066
  293 0066              ; ------------------------------------
  294 0066              ; THE 'NON MASKABLE INTERRUPT' ROUTINE
  295 0066              ; ------------------------------------
  296 0066              ;   Jim Westwood's technical dodge using Non-Maskable Interrupts solved the
  297 0066              ;   flicker problem of the ZX80 and gave the ZX81 a multi-tasking SLOW mode
  298 0066              ;   with a steady display.  Note that the AF' register is reserved for this
  299 0066              ;   function and its interaction with the display routines.  When counting
  300 0066              ;   TV lines, the NMI makes no use of the main registers.
  301 0066              ;   The circuitry for the NMI generator is contained within the SCL (Sinclair
  302 0066              ;   Computer Logic) chip.
  303 0066              ;   ( It takes 32 clock cycles while incrementing towards zero ).
  304 0066
  305 0066              ;; NMI
  306 0066 08           L0066:  EX      AF,AF'          ; (4) switch in the NMI's copy of the
  307 0067                                              ;     accumulator.
  308 0067 3C                   INC     A               ; (4) increment.
  309 0068 FA 6D 00             JP      M,L006D         ; (10/10) jump, if minus, to NMI-RET as this is
  310 006B                                              ;     part of a test to see if the NMI
  311 006B                                              ;     generation is working or an intermediate
  312 006B                                              ;     value for the ascending negated blank
  313 006B                                              ;     line counter.
  314 006B
  315 006B 28 02                JR      Z,L006F         ; (12) forward to NMI-CONT
  316 006D                                              ;      when line count has incremented to zero.
  317 006D
  318 006D              ; Note. the synchronizing NMI when A increments from zero to one takes this
  319 006D              ; 7 clock cycle route making 39 clock cycles in all.
  320 006D
  321 006D              ;; NMI-RET
  322 006D 08           L006D:  EX      AF,AF'          ; (4)  switch out the incremented line counter
  323 006E                                              ;      or test result $80
  324 006E C9                   RET                     ; (10) return to User application for a while.
  325 006F
  326 006F              ; ---
  327 006F
  328 006F              ;   This branch is taken when the 55 (or 31) lines have been drawn.
  329 006F
  330 006F              ;; NMI-CONT
  331 006F 08           L006F:  EX      AF,AF'          ; (4) restore the main accumulator.
  332 0070
  333 0070 F5                   PUSH    AF              ; (11) *             Save Main Registers
  334 0071 C5                   PUSH    BC              ; (11) **
  335 0072 D5                   PUSH    DE              ; (11) ***
  336 0073 E5                   PUSH    HL              ; (11) ****
  337 0074
  338 0074              ;   the next set-up procedure is only really applicable when the top set of
  339 0074              ;   blank lines have been generated.
  340 0074
  341 0074 2A 0C 40             LD      HL,($400C)      ; (16) fetch start of Display File from D_FILE
  342 0077                                              ;      points to the HALT at beginning.
  343 0077 CB FC                SET     7,H             ; (8) point to upper 32K 'echo display file'
  344 0079
  345 0079 76                   HALT                    ; (1) HALT synchronizes with NMI.
  346 007A                                              ; Used with special hardware connected to the
  347 007A                                              ; Z80 HALT and WAIT lines to take 1 clock cycle.
  348 007A
  349 007A              ; ----------------------------------------------------------------------------
  350 007A              ;   the NMI has been generated - start counting. The cathode ray is at the RH
  351 007A              ;   side of the TV.
  352 007A              ;   First the NMI servicing, similar to CALL            =  17 clock cycles.
  353 007A              ;   Then the time taken by the NMI for zero-to-one path =  39 cycles
  354 007A              ;   The HALT above                                      =  01 cycles.
  355 007A              ;   The two instructions below                          =  19 cycles.
  356 007A              ;   The code at L0281 up to and including the CALL      =  43 cycles.
  357 007A              ;   The Called routine at L02B5                         =  24 cycles.
  358 007A              ;   --------------------------------------                ---
  359 007A              ;   Total Z80 instructions                              = 143 cycles.
  360 007A              ;
  361 007A              ;   Meanwhile in TV world,
  362 007A              ;   Horizontal retrace                                  =  15 cycles.
  363 007A              ;   Left blanking border 8 character positions          =  32 cycles
  364 007A              ;   Generation of 75% scanline from the first NEWLINE   =  96 cycles
  365 007A              ;   ---------------------------------------               ---
  366 007A              ;                                                         143 cycles
  367 007A              ;
  368 007A              ;   Since at the time the first JP (HL) is encountered to execute the echo
  369 007A              ;   display another 8 character positions have to be put out, then the
  370 007A              ;   Refresh register need to hold $F8. Working back and counteracting
  371 007A              ;   the fact that every instruction increments the Refresh register then
  372 007A              ;   the value that is loaded into R needs to be $F5.      :-)
  373 007A              ;
  374 007A              ;
  375 007A D3 FD                OUT     ($FD),A         ; (11) Stop the NMI generator.
  376 007C
  377 007C DD E9                JP      (IX)            ; (8) forward to L0281 (after top) or L028F
  378 007E
  379 007E              ; ****************
  380 007E              ; ** KEY TABLES **
  381 007E              ; ****************
  382 007E
  383 007E              ; -------------------------------
  384 007E              ; THE 'UNSHIFTED' CHARACTER CODES
  385 007E              ; -------------------------------
  386 007E
  387 007E              ;; K-UNSHIFT
  388 007E 3F           L007E:  DEFB    $3F             ; Z
  389 007F 3D                   DEFB    $3D             ; X
  390 0080 28                   DEFB    $28             ; C
  391 0081 3B                   DEFB    $3B             ; V
  392 0082 26                   DEFB    $26             ; A
  393 0083 38                   DEFB    $38             ; S
  394 0084 29                   DEFB    $29             ; D
  395 0085 2B                   DEFB    $2B             ; F
  396 0086 2C                   DEFB    $2C             ; G
  397 0087 36                   DEFB    $36             ; Q
  398 0088 3C                   DEFB    $3C             ; W
  399 0089 2A                   DEFB    $2A             ; E
  400 008A 37                   DEFB    $37             ; R
  401 008B 39                   DEFB    $39             ; T
  402 008C 1D                   DEFB    $1D             ; 1
  403 008D 1E                   DEFB    $1E             ; 2
  404 008E 1F                   DEFB    $1F             ; 3
  405 008F 20                   DEFB    $20             ; 4
  406 0090 21                   DEFB    $21             ; 5
  407 0091 1C                   DEFB    $1C             ; 0
  408 0092 25                   DEFB    $25             ; 9
  409 0093 24                   DEFB    $24             ; 8
  410 0094 23                   DEFB    $23             ; 7
  411 0095 22                   DEFB    $22             ; 6
  412 0096 35                   DEFB    $35             ; P
  413 0097 34                   DEFB    $34             ; O
  414 0098 2E                   DEFB    $2E             ; I
  415 0099 3A                   DEFB    $3A             ; U
  416 009A 3E                   DEFB    $3E             ; Y
  417 009B 76                   DEFB    $76             ; NEWLINE
  418 009C 31                   DEFB    $31             ; L
  419 009D 30                   DEFB    $30             ; K
  420 009E 2F                   DEFB    $2F             ; J
  421 009F 2D                   DEFB    $2D             ; H
  422 00A0 00                   DEFB    $00             ; SPACE
  423 00A1 1B                   DEFB    $1B             ; .
  424 00A2 32                   DEFB    $32             ; M
  425 00A3 33                   DEFB    $33             ; N
  426 00A4 27                   DEFB    $27             ; B
  427 00A5
  428 00A5              ; -----------------------------
  429 00A5              ; THE 'SHIFTED' CHARACTER CODES
  430 00A5              ; -----------------------------
  431 00A5
  432 00A5
  433 00A5              ;; K-SHIFT
  434 00A5 0E           L00A5:  DEFB    $0E             ; :
  435 00A6 19                   DEFB    $19             ; ;
  436 00A7 0F                   DEFB    $0F             ; ?
  437 00A8 18                   DEFB    $18             ; /
  438 00A9 E3                   DEFB    $E3             ; STOP
  439 00AA E1                   DEFB    $E1             ; LPRINT
  440 00AB E4                   DEFB    $E4             ; SLOW
  441 00AC E5                   DEFB    $E5             ; FAST
  442 00AD E2                   DEFB    $E2             ; LLIST
  443 00AE C0                   DEFB    $C0             ; ""
  444 00AF D9                   DEFB    $D9             ; OR
  445 00B0 E0                   DEFB    $E0             ; STEP
  446 00B1 DB                   DEFB    $DB             ; <=
  447 00B2 DD                   DEFB    $DD             ; <>
  448 00B3 75                   DEFB    $75             ; EDIT
  449 00B4 DA                   DEFB    $DA             ; AND
  450 00B5 DE                   DEFB    $DE             ; THEN
  451 00B6 DF                   DEFB    $DF             ; TO
  452 00B7 72                   DEFB    $72             ; cursor-left
  453 00B8 77                   DEFB    $77             ; RUBOUT
  454 00B9 74                   DEFB    $74             ; GRAPHICS
  455 00BA 73                   DEFB    $73             ; cursor-right
  456 00BB 70                   DEFB    $70             ; cursor-up
  457 00BC 71                   DEFB    $71             ; cursor-down
  458 00BD 0B                   DEFB    $0B             ; "
  459 00BE 11                   DEFB    $11             ; )
  460 00BF 10                   DEFB    $10             ; (
  461 00C0 0D                   DEFB    $0D             ; $
  462 00C1 DC                   DEFB    $DC             ; >=
  463 00C2 79                   DEFB    $79             ; FUNCTION
  464 00C3 14                   DEFB    $14             ; =
  465 00C4 15                   DEFB    $15             ; +
  466 00C5 16                   DEFB    $16             ; -
  467 00C6 D8                   DEFB    $D8             ; **
  468 00C7 0C                   DEFB    $0C             ; ukp
  469 00C8 1A                   DEFB    $1A             ; ,
  470 00C9 12                   DEFB    $12             ; >
  471 00CA 13                   DEFB    $13             ; <
  472 00CB 17                   DEFB    $17             ; *
  473 00CC
  474 00CC              ; ------------------------------
  475 00CC              ; THE 'FUNCTION' CHARACTER CODES
  476 00CC              ; ------------------------------
  477 00CC
  478 00CC
  479 00CC              ;; K-FUNCT
  480 00CC CD           L00CC:  DEFB    $CD             ; LN
  481 00CD CE                   DEFB    $CE             ; EXP
  482 00CE C1                   DEFB    $C1             ; AT
  483 00CF 78                   DEFB    $78             ; KL
  484 00D0 CA                   DEFB    $CA             ; ASN
  485 00D1 CB                   DEFB    $CB             ; ACS
  486 00D2 CC                   DEFB    $CC             ; ATN
  487 00D3 D1                   DEFB    $D1             ; SGN
  488 00D4 D2                   DEFB    $D2             ; ABS
  489 00D5 C7                   DEFB    $C7             ; SIN
  490 00D6 C8                   DEFB    $C8             ; COS
  491 00D7 C9                   DEFB    $C9             ; TAN
  492 00D8 CF                   DEFB    $CF             ; INT
  493 00D9 40                   DEFB    $40             ; RND
  494 00DA 78                   DEFB    $78             ; KL
  495 00DB 78                   DEFB    $78             ; KL
  496 00DC 78                   DEFB    $78             ; KL
  497 00DD 78                   DEFB    $78             ; KL
  498 00DE 78                   DEFB    $78             ; KL
  499 00DF 78                   DEFB    $78             ; KL
  500 00E0 78                   DEFB    $78             ; KL
  501 00E1 78                   DEFB    $78             ; KL
  502 00E2 78                   DEFB    $78             ; KL
  503 00E3 78                   DEFB    $78             ; KL
  504 00E4 C2                   DEFB    $C2             ; TAB
  505 00E5 D3                   DEFB    $D3             ; PEEK
  506 00E6 C4                   DEFB    $C4             ; CODE
  507 00E7 D6                   DEFB    $D6             ; CHR$
  508 00E8 D5                   DEFB    $D5             ; STR$
  509 00E9 78                   DEFB    $78             ; KL
  510 00EA D4                   DEFB    $D4             ; USR
  511 00EB C6                   DEFB    $C6             ; LEN
  512 00EC C5                   DEFB    $C5             ; VAL
  513 00ED D0                   DEFB    $D0             ; SQR
  514 00EE 78                   DEFB    $78             ; KL
  515 00EF 78                   DEFB    $78             ; KL
  516 00F0 42                   DEFB    $42             ; PI
  517 00F1 D7                   DEFB    $D7             ; NOT
  518 00F2 41                   DEFB    $41             ; INKEY$
  519 00F3
  520 00F3              ; -----------------------------
  521 00F3              ; THE 'GRAPHIC' CHARACTER CODES
  522 00F3              ; -----------------------------
  523 00F3
  524 00F3
  525 00F3              ;; K-GRAPH
  526 00F3 08           L00F3:  DEFB    $08             ; graphic
  527 00F4 0A                   DEFB    $0A             ; graphic
  528 00F5 09                   DEFB    $09             ; graphic
  529 00F6 8A                   DEFB    $8A             ; graphic
  530 00F7 89                   DEFB    $89             ; graphic
  531 00F8 81                   DEFB    $81             ; graphic
  532 00F9 82                   DEFB    $82             ; graphic
  533 00FA 07                   DEFB    $07             ; graphic
  534 00FB 84                   DEFB    $84             ; graphic
  535 00FC 06                   DEFB    $06             ; graphic
  536 00FD 01                   DEFB    $01             ; graphic
  537 00FE 02                   DEFB    $02             ; graphic
  538 00FF 87                   DEFB    $87             ; graphic
  539 0100 04                   DEFB    $04             ; graphic
  540 0101 05                   DEFB    $05             ; graphic
  541 0102 77                   DEFB    $77             ; RUBOUT
  542 0103 78                   DEFB    $78             ; KL
  543 0104 85                   DEFB    $85             ; graphic
  544 0105 03                   DEFB    $03             ; graphic
  545 0106 83                   DEFB    $83             ; graphic
  546 0107 8B                   DEFB    $8B             ; graphic
  547 0108 91                   DEFB    $91             ; inverse )
  548 0109 90                   DEFB    $90             ; inverse (
  549 010A 8D                   DEFB    $8D             ; inverse $
  550 010B 86                   DEFB    $86             ; graphic
  551 010C 78                   DEFB    $78             ; KL
  552 010D 92                   DEFB    $92             ; inverse >
  553 010E 95                   DEFB    $95             ; inverse +
  554 010F 96                   DEFB    $96             ; inverse -
  555 0110 88                   DEFB    $88             ; graphic
  556 0111
  557 0111              ; ------------------
  558 0111              ; THE 'TOKEN' TABLES
  559 0111              ; ------------------
  560 0111
  561 0111
  562 0111              ;; TOKENS
  563 0111 8F           L0111:  DEFB    $0F+$80                         ; '?'+$80
  564 0112 0B 8B                DEFB    $0B,$0B+$80                     ; ""
  565 0114 26 B9                DEFB    $26,$39+$80                     ; AT
  566 0116 39 26 A7             DEFB    $39,$26,$27+$80                 ; TAB
  567 0119 8F                   DEFB    $0F+$80                         ; '?'+$80
  568 011A 28 34 29 AA          DEFB    $28,$34,$29,$2A+$80             ; CODE
  569 011E 3B 26 B1             DEFB    $3B,$26,$31+$80                 ; VAL
  570 0121 31 2A B3             DEFB    $31,$2A,$33+$80                 ; LEN
  571 0124 38 2E B3             DEFB    $38,$2E,$33+$80                 ; SIN
  572 0127 28 34 B8             DEFB    $28,$34,$38+$80                 ; COS
  573 012A 39 26 B3             DEFB    $39,$26,$33+$80                 ; TAN
  574 012D 26 38 B3             DEFB    $26,$38,$33+$80                 ; ASN
  575 0130 26 28 B8             DEFB    $26,$28,$38+$80                 ; ACS
  576 0133 26 39 B3             DEFB    $26,$39,$33+$80                 ; ATN
  577 0136 31 B3                DEFB    $31,$33+$80                     ; LN
  578 0138 2A 3D B5             DEFB    $2A,$3D,$35+$80                 ; EXP
  579 013B 2E 33 B9             DEFB    $2E,$33,$39+$80                 ; INT
  580 013E 38 36 B7             DEFB    $38,$36,$37+$80                 ; SQR
  581 0141 38 2C B3             DEFB    $38,$2C,$33+$80                 ; SGN
  582 0144 26 27 B8             DEFB    $26,$27,$38+$80                 ; ABS
  583 0147 35 2A 2A B0          DEFB    $35,$2A,$2A,$30+$80             ; PEEK
  584 014B 3A 38 B7             DEFB    $3A,$38,$37+$80                 ; USR
  585 014E 38 39 37 8D          DEFB    $38,$39,$37,$0D+$80             ; STR$
  586 0152 28 2D 37 8D          DEFB    $28,$2D,$37,$0D+$80             ; CHR$
  587 0156 33 34 B9             DEFB    $33,$34,$39+$80                 ; NOT
  588 0159 17 97                DEFB    $17,$17+$80                     ; **
  589 015B 34 B7                DEFB    $34,$37+$80                     ; OR
  590 015D 26 33 A9             DEFB    $26,$33,$29+$80                 ; AND
  591 0160 13 94                DEFB    $13,$14+$80                     ; <=
  592 0162 12 94                DEFB    $12,$14+$80                     ; >=
  593 0164 13 92                DEFB    $13,$12+$80                     ; <>
  594 0166 39 2D 2A B3          DEFB    $39,$2D,$2A,$33+$80             ; THEN
  595 016A 39 B4                DEFB    $39,$34+$80                     ; TO
  596 016C 38 39 2A B5          DEFB    $38,$39,$2A,$35+$80             ; STEP
  597 0170 31 35 37 2E          DEFB    $31,$35,$37,$2E,$33,$39+$80     ; LPRINT
  597 0174 33 B9
  598 0176 31 31 2E 38          DEFB    $31,$31,$2E,$38,$39+$80         ; LLIST
  598 017A B9
  599 017B 38 39 34 B5          DEFB    $38,$39,$34,$35+$80             ; STOP
  600 017F 38 31 34 BC          DEFB    $38,$31,$34,$3C+$80             ; SLOW
  601 0183 2B 26 38 B9          DEFB    $2B,$26,$38,$39+$80             ; FAST
  602 0187 33 2A BC             DEFB    $33,$2A,$3C+$80                 ; NEW
  603 018A 38 28 37 34          DEFB    $38,$28,$37,$34,$31,$31+$80     ; SCROLL
  603 018E 31 B1
  604 0190 28 34 33 B9          DEFB    $28,$34,$33,$39+$80             ; CONT
  605 0194 29 2E B2             DEFB    $29,$2E,$32+$80                 ; DIM
  606 0197 37 2A B2             DEFB    $37,$2A,$32+$80                 ; REM
  607 019A 2B 34 B7             DEFB    $2B,$34,$37+$80                 ; FOR
  608 019D 2C 34 39 B4          DEFB    $2C,$34,$39,$34+$80             ; GOTO
  609 01A1 2C 34 38 3A          DEFB    $2C,$34,$38,$3A,$27+$80         ; GOSUB
  609 01A5 A7
  610 01A6 2E 33 35 3A          DEFB    $2E,$33,$35,$3A,$39+$80         ; INPUT
  610 01AA B9
  611 01AB 31 34 26 A9          DEFB    $31,$34,$26,$29+$80             ; LOAD
  612 01AF 31 2E 38 B9          DEFB    $31,$2E,$38,$39+$80             ; LIST
  613 01B3 31 2A B9             DEFB    $31,$2A,$39+$80                 ; LET
  614 01B6 35 26 3A 38          DEFB    $35,$26,$3A,$38,$2A+$80         ; PAUSE
  614 01BA AA
  615 01BB 33 2A 3D B9          DEFB    $33,$2A,$3D,$39+$80             ; NEXT
  616 01BF 35 34 30 AA          DEFB    $35,$34,$30,$2A+$80             ; POKE
  617 01C3 35 37 2E 33          DEFB    $35,$37,$2E,$33,$39+$80         ; PRINT
  617 01C7 B9
  618 01C8 35 31 34 B9          DEFB    $35,$31,$34,$39+$80             ; PLOT
  619 01CC 37 3A B3             DEFB    $37,$3A,$33+$80                 ; RUN
  620 01CF 38 26 3B AA          DEFB    $38,$26,$3B,$2A+$80             ; SAVE
  621 01D3 37 26 33 A9          DEFB    $37,$26,$33,$29+$80             ; RAND
  622 01D7 2E AB                DEFB    $2E,$2B+$80                     ; IF
  623 01D9 28 31 B8             DEFB    $28,$31,$38+$80                 ; CLS
  624 01DC 3A 33 35 31          DEFB    $3A,$33,$35,$31,$34,$39+$80     ; UNPLOT
  624 01E0 34 B9
  625 01E2 28 31 2A 26          DEFB    $28,$31,$2A,$26,$37+$80         ; CLEAR
  625 01E6 B7
  626 01E7 37 2A 39 3A          DEFB    $37,$2A,$39,$3A,$37,$33+$80     ; RETURN
  626 01EB 37 B3
  627 01ED 28 34 35 BE          DEFB    $28,$34,$35,$3E+$80             ; COPY
  628 01F1 37 33 A9             DEFB    $37,$33,$29+$80                 ; RND
  629 01F4 2E 33 30 2A          DEFB    $2E,$33,$30,$2A,$3E,$0D+$80     ; INKEY$
  629 01F8 3E 8D
  630 01FA 35 AE                DEFB    $35,$2E+$80                     ; PI
  631 01FC
  632 01FC
  633 01FC              ; ------------------------------
  634 01FC              ; THE 'LOAD-SAVE UPDATE' ROUTINE
  635 01FC              ; ------------------------------
  636 01FC              ;
  637 01FC              ;
  638 01FC
  639 01FC              ;; LOAD/SAVE
  640 01FC 23           L01FC:  INC     HL              ;
  641 01FD EB                   EX      DE,HL           ;
  642 01FE 2A 14 40             LD      HL,($4014)      ; system variable edit line E_LINE.
  643 0201 37                   SCF                     ; set carry flag
  644 0202 ED 52                SBC     HL,DE           ;
  645 0204 EB                   EX      DE,HL           ;
  646 0205 D0                   RET     NC              ; return if more bytes to load/save.
  647 0206
  648 0206 E1                   POP     HL              ; else drop return address
  649 0207
  650 0207              ; ----------------------
  651 0207              ; THE 'DISPLAY' ROUTINES
  652 0207              ; ----------------------
  653 0207              ;
  654 0207              ;
  655 0207
  656 0207              ;; SLOW/FAST
  657 0207 21 3B 40     L0207:  LD      HL,$403B        ; Address the system variable CDFLAG.
  658 020A 7E                   LD      A,(HL)          ; Load value to the accumulator.
  659 020B 17                   RLA                     ; rotate bit 6 to position 7.
  660 020C AE                   XOR     (HL)            ; exclusive or with original bit 7.
  661 020D 17                   RLA                     ; rotate result out to carry.
  662 020E D0                   RET     NC              ; return if both bits were the same.
  663 020F
  664 020F              ;   Now test if this really is a ZX81 or a ZX80 running the upgraded ROM.
  665 020F              ;   The standard ZX80 did not have an NMI generator.
  666 020F
  667 020F 3E 7F                LD      A,$7F           ; Load accumulator with %011111111
  668 0211 08                   EX      AF,AF'          ; save in AF'
  669 0212
  670 0212 06 11                LD      B,$11           ; A counter within which an NMI should occur
  671 0214                                              ; if this is a ZX81.
  672 0214 D3 FE                OUT     ($FE),A         ; start the NMI generator.
  673 0216
  674 0216              ;  Note that if this is a ZX81 then the NMI will increment AF'.
  675 0216
  676 0216              ;; LOOP-11
  677 0216 10 FE        L0216:  DJNZ    L0216           ; self loop to give the NMI a chance to kick in.
  678 0218                                              ; = 16*13 clock cycles + 8 = 216 clock cycles.
  679 0218
  680 0218 D3 FD                OUT     ($FD),A         ; Turn off the NMI generator.
  681 021A 08                   EX      AF,AF'          ; bring back the AF' value.
  682 021B 17                   RLA                     ; test bit 7.
  683 021C 30 08                JR      NC,L0226        ; forward, if bit 7 is still reset, to NO-SLOW.
  684 021E
  685 021E              ;   If the AF' was incremented then the NMI generator works and SLOW mode can
  686 021E              ;   be set.
  687 021E
  688 021E CB FE                SET     7,(HL)          ; Indicate SLOW mode - Compute and Display.
  689 0220
  690 0220 F5                   PUSH    AF              ; *             Save Main Registers
  691 0221 C5                   PUSH    BC              ; **
  692 0222 D5                   PUSH    DE              ; ***
  693 0223 E5                   PUSH    HL              ; ****
  694 0224
  695 0224 18 03                JR      L0229           ; skip forward - to DISPLAY-1.
  696 0226
  697 0226              ; ---
  698 0226
  699 0226              ;; NO-SLOW
  700 0226 CB B6        L0226:  RES     6,(HL)          ; reset bit 6 of CDFLAG.
  701 0228 C9                   RET                     ; return.
  702 0229
  703 0229              ; -----------------------
  704 0229              ; THE 'MAIN DISPLAY' LOOP
  705 0229              ; -----------------------
  706 0229              ; This routine is executed once for every frame displayed.
  707 0229
  708 0229              ;; DISPLAY-1
  709 0229 2A 34 40     L0229:  LD      HL,($4034)      ; fetch two-byte system variable FRAMES.
  710 022C 2B                   DEC     HL              ; decrement frames counter.
  711 022D
  712 022D              ;; DISPLAY-P
  713 022D 3E 7F        L022D:  LD      A,$7F           ; prepare a mask
  714 022F A4                   AND     H               ; pick up bits 6-0 of H.
  715 0230 B5                   OR      L               ; and any bits of L.
  716 0231 7C                   LD      A,H             ; reload A with all bits of H for PAUSE test.
  717 0232
  718 0232              ;   Note both branches must take the same time.
  719 0232
  720 0232 20 03                JR      NZ,L0237        ; (12/7) forward if bits 14-0 are not zero
  721 0234                                              ; to ANOTHER
  722 0234
  723 0234 17                   RLA                     ; (4) test bit 15 of FRAMES.
  724 0235 18 02                JR      L0239           ; (12) forward with result to OVER-NC
  725 0237
  726 0237              ; ---
  727 0237
  728 0237              ;; ANOTHER
  729 0237 46           L0237:  LD      B,(HL)          ; (7) Note. Harmless Nonsensical Timing weight.
  730 0238 37                   SCF                     ; (4) Set Carry Flag.
  731 0239
  732 0239              ; Note. the branch to here takes either (12)(7)(4) cyles or (7)(4)(12) cycles.
  733 0239
  734 0239              ;; OVER-NC
  735 0239 67           L0239:  LD      H,A             ; (4)  set H to zero
  736 023A 22 34 40             LD      ($4034),HL      ; (16) update system variable FRAMES
  737 023D D0                   RET     NC              ; (11/5) return if FRAMES is in use by PAUSE
  738 023E                                              ; command.
  739 023E
  740 023E              ;; DISPLAY-2
  741 023E CD BB 02     L023E:  CALL    L02BB           ; routine KEYBOARD gets the key row in H and
  742 0241                                              ; the column in L. Reading the ports also starts
  743 0241                                              ; the TV frame synchronization pulse. (VSYNC)
  744 0241
  745 0241 ED 4B 25 40          LD      BC,($4025)      ; fetch the last key values read from LAST_K
  746 0245 22 25 40             LD      ($4025),HL      ; update LAST_K with new values.
  747 0248
  748 0248 78                   LD      A,B             ; load A with previous column - will be $FF if
  749 0249                                              ; there was no key.
  750 0249 C6 02                ADD     A,$02           ; adding two will set carry if no previous key.
  751 024B
  752 024B ED 42                SBC     HL,BC           ; subtract with the carry the two key values.
  753 024D
  754 024D              ; If the same key value has been returned twice then HL will be zero.
  755 024D
  756 024D 3A 27 40             LD      A,($4027)       ; fetch system variable DEBOUNCE
  757 0250 B4                   OR      H               ; and OR with both bytes of the difference
  758 0251 B5                   OR      L               ; setting the zero flag for the upcoming branch.
  759 0252
  760 0252 58                   LD      E,B             ; transfer the column value to E
  761 0253 06 0B                LD      B,$0B           ; and load B with eleven
  762 0255
  763 0255 21 3B 40             LD      HL,$403B        ; address system variable CDFLAG
  764 0258 CB 86                RES     0,(HL)          ; reset the rightmost bit of CDFLAG
  765 025A 20 08                JR      NZ,L0264        ; skip forward if debounce/diff >0 to NO-KEY
  766 025C
  767 025C CB 7E                BIT     7,(HL)          ; test compute and display bit of CDFLAG
  768 025E CB C6                SET     0,(HL)          ; set the rightmost bit of CDFLAG.
  769 0260 C8                   RET     Z               ; return if bit 7 indicated fast mode.
  770 0261
  771 0261 05                   DEC     B               ; (4) decrement the counter.
  772 0262 00                   NOP                     ; (4) Timing - 4 clock cycles. ??
  773 0263 37                   SCF                     ; (4) Set Carry Flag
  774 0264
  775 0264              ;; NO-KEY
  776 0264 21 27 40     L0264:  LD      HL,$4027        ; sv DEBOUNCE
  777 0267 3F                   CCF                     ; Complement Carry Flag
  778 0268 CB 10                RL      B               ; rotate left B picking up carry
  779 026A                                              ;  C<-76543210<-C
  780 026A
  781 026A              ;; LOOP-B
  782 026A 10 FE        L026A:  DJNZ    L026A           ; self-loop while B>0 to LOOP-B
  783 026C
  784 026C 46                   LD      B,(HL)          ; fetch value of DEBOUNCE to B
  785 026D 7B                   LD      A,E             ; transfer column value
  786 026E FE FE                CP      $FE             ;
  787 0270 9F                   SBC     A,A             ;
  788 0271 06 1F                LD      B,$1F           ;
  789 0273 B6                   OR      (HL)            ;
  790 0274 A0                   AND     B               ;
  791 0275 1F                   RRA                     ;
  792 0276 77                   LD      (HL),A          ;
  793 0277
  794 0277 D3 FF                OUT     ($FF),A         ; end the TV frame synchronization pulse.
  795 0279
  796 0279 2A 0C 40             LD      HL,($400C)      ; (12) set HL to the Display File from D_FILE
  797 027C CB FC                SET     7,H             ; (8) set bit 15 to address the echo display.
  798 027E
  799 027E CD 92 02             CALL    L0292           ; (17) routine DISPLAY-3 displays the top set
  800 0281                                              ; of blank lines.
  801 0281
  802 0281              ; ---------------------
  803 0281              ; THE 'VIDEO-1' ROUTINE
  804 0281              ; ---------------------
  805 0281
  806 0281              ;; R-IX-1
  807 0281 ED 5F        L0281:  LD      A,R             ; (9)  Harmless Nonsensical Timing or something
  808 0283                                              ;      very clever?
  809 0283 01 01 19             LD      BC,$1901        ; (10) 25 lines, 1 scanline in first.
  810 0286 3E F5                LD      A,$F5           ; (7)  This value will be loaded into R and
  811 0288                                              ; ensures that the cycle starts at the right
  812 0288                                              ; part of the display  - after 32nd character
  813 0288                                              ; position.
  814 0288
  815 0288 CD B5 02             CALL    L02B5           ; (17) routine DISPLAY-5 completes the current
  816 028B                                              ; blank line and then generates the display of
  817 028B                                              ; the live picture using INT interrupts
  818 028B                                              ; The final interrupt returns to the next
  819 028B                                              ; address.
  820 028B
  821 028B 2B           L028B:  DEC     HL              ; point HL to the last NEWLINE/HALT.
  822 028C
  823 028C CD 92 02             CALL    L0292           ; routine DISPLAY-3 displays the bottom set of
  824 028F                                              ; blank lines.
  825 028F
  826 028F              ; ---
  827 028F
  828 028F              ;; R-IX-2
  829 028F C3 29 02     L028F:  JP      L0229           ; JUMP back to DISPLAY-1
  830 0292
  831 0292              ; ---------------------------------
  832 0292              ; THE 'DISPLAY BLANK LINES' ROUTINE
  833 0292              ; ---------------------------------
  834 0292              ;   This subroutine is called twice (see above) to generate first the blank
  835 0292              ;   lines at the top of the television display and then the blank lines at the
  836 0292              ;   bottom of the display.
  837 0292
  838 0292              ;; DISPLAY-3
  839 0292 DD E1        L0292:  POP     IX              ; pop the return address to IX register.
  840 0294                                              ; will be either L0281 or L028F - see above.
  841 0294
  842 0294 FD 4E 28             LD      C,(IY+$28)      ; load C with value of system constant MARGIN.
  843 0297 FD CB 3B 7E          BIT     7,(IY+$3B)      ; test CDFLAG for compute and display.
  844 029B 28 0C                JR      Z,L02A9         ; forward, with FAST mode, to DISPLAY-4
  845 029D
  846 029D 79                   LD      A,C             ; move MARGIN to A  - 31d or 55d.
  847 029E ED 44                NEG                     ; Negate
  848 02A0 3C                   INC     A               ;
  849 02A1 08                   EX      AF,AF'          ; place negative count of blank lines in A'
  850 02A2
  851 02A2 D3 FE                OUT     ($FE),A         ; enable the NMI generator.
  852 02A4
  853 02A4 E1                   POP     HL              ; ****
  854 02A5 D1                   POP     DE              ; ***
  855 02A6 C1                   POP     BC              ; **
  856 02A7 F1                   POP     AF              ; *             Restore Main Registers
  857 02A8
  858 02A8 C9                   RET                     ; return - end of interrupt.  Return is to
  859 02A9                                              ; user's program - BASIC or machine code.
  860 02A9                                              ; which will be interrupted by every NMI.
  861 02A9
  862 02A9              ; ------------------------
  863 02A9              ; THE 'FAST MODE' ROUTINES
  864 02A9              ; ------------------------
  865 02A9
  866 02A9              ;; DISPLAY-4
  867 02A9 3E FC        L02A9:  LD      A,$FC           ; (7)  load A with first R delay value
  868 02AB 06 01                LD      B,$01           ; (7)  one row only.
  869 02AD
  870 02AD CD B5 02             CALL    L02B5           ; (17) routine DISPLAY-5
  871 02B0
  872 02B0 2B                   DEC     HL              ; (6)  point back to the HALT.
  873 02B1 E3                   EX      (SP),HL         ; (19) Harmless Nonsensical Timing if paired.
  874 02B2 E3                   EX      (SP),HL         ; (19) Harmless Nonsensical Timing.
  875 02B3 DD E9                JP      (IX)            ; (8)  to L0281 or L028F
  876 02B5
  877 02B5              ; --------------------------
  878 02B5              ; THE 'DISPLAY-5' SUBROUTINE
  879 02B5              ; --------------------------
  880 02B5              ;   This subroutine is called from SLOW mode and FAST mode to generate the
  881 02B5              ;   central TV picture. With SLOW mode the R register is incremented, with
  882 02B5              ;   each instruction, to $F7 by the time it completes.  With fast mode, the
  883 02B5              ;   final R value will be $FF and an interrupt will occur as soon as the
  884 02B5              ;   Program Counter reaches the HALT.  (24 clock cycles)
  885 02B5
  886 02B5              ;; DISPLAY-5
  887 02B5 ED 4F        L02B5:  LD      R,A             ; (9) Load R from A.    R = slow: $F5 fast: $FC
  888 02B7 3E DD                LD      A,$DD           ; (7) load future R value.        $F6       $FD
  889 02B9
  890 02B9 FB                   EI                      ; (4) Enable Interrupts           $F7       $FE
  891 02BA
  892 02BA E9                   JP      (HL)            ; (4) jump to the echo display.   $F8       $FF
  893 02BB
  894 02BB              ; ----------------------------------
  895 02BB              ; THE 'KEYBOARD SCANNING' SUBROUTINE
  896 02BB              ; ----------------------------------
  897 02BB              ; The keyboard is read during the vertical sync interval while no video is
  898 02BB              ; being displayed.  Reading a port with address bit 0 low i.e. $FE starts the
  899 02BB              ; vertical sync pulse.
  900 02BB
  901 02BB              ;; KEYBOARD
  902 02BB 21 FF FF     L02BB:  LD      HL,$FFFF        ; (16) prepare a buffer to take key.
  903 02BE 01 FE FE             LD      BC,$FEFE        ; (20) set BC to port $FEFE. The B register,
  904 02C1                                              ;      with its single reset bit also acts as
  905 02C1                                              ;      an 8-counter.
  906 02C1 ED 78                IN      A,(C)           ; (11) read the port - all 16 bits are put on
  907 02C3                                              ;      the address bus.  Start VSYNC pulse.
  908 02C3 F6 01                OR      $01             ; (7)  set the rightmost bit so as to ignore
  909 02C5                                              ;      the SHIFT key.
  910 02C5
  911 02C5              ;; EACH-LINE
  912 02C5 F6 E0        L02C5:  OR      $E0             ; [7] OR %11100000
  913 02C7 57                   LD      D,A             ; [4] transfer to D.
  914 02C8 2F                   CPL                     ; [4] complement - only bits 4-0 meaningful now.
  915 02C9 FE 01                CP      $01             ; [7] sets carry if A is zero.
  916 02CB 9F                   SBC     A,A             ; [4] $FF if $00 else zero.
  917 02CC B0                   OR      B               ; [7] $FF or port FE,FD,FB....
  918 02CD A5                   AND     L               ; [4] unless more than one key, L will still be
  919 02CE                                              ;     $FF. if more than one key is pressed then A is
  920 02CE                                              ;     now invalid.
  921 02CE 6F                   LD      L,A             ; [4] transfer to L.
  922 02CF
  923 02CF              ; now consider the column identifier.
  924 02CF
  925 02CF 7C                   LD      A,H             ; [4] will be $FF if no previous keys.
  926 02D0 A2                   AND     D               ; [4] 111xxxxx
  927 02D1 67                   LD      H,A             ; [4] transfer A to H
  928 02D2
  929 02D2              ; since only one key may be pressed, H will, if valid, be one of
  930 02D2              ; 11111110, 11111101, 11111011, 11110111, 11101111
  931 02D2              ; reading from the outer column, say Q, to the inner column, say T.
  932 02D2
  933 02D2 CB 00                RLC     B               ; [8]  rotate the 8-counter/port address.
  934 02D4                                              ;      sets carry if more to do.
  935 02D4 ED 78                IN      A,(C)           ; [10] read another half-row.
  936 02D6                                              ;      all five bits this time.
  937 02D6
  938 02D6 38 ED                JR      C,L02C5         ; [12](7) loop back, until done, to EACH-LINE
  939 02D8
  940 02D8              ;   The last row read is SHIFT,Z,X,C,V  for the second time.
  941 02D8
  942 02D8 1F                   RRA                     ; (4) test the shift key - carry will be reset
  943 02D9                                              ;     if the key is pressed.
  944 02D9 CB 14                RL      H               ; (8) rotate left H picking up the carry giving
  945 02DB                                              ;     column values -
  946 02DB                                              ;        $FD, $FB, $F7, $EF, $DF.
  947 02DB                                              ;     or $FC, $FA, $F6, $EE, $DE if shifted.
  948 02DB
  949 02DB              ;   We now have H identifying the column and L identifying the row in the
  950 02DB              ;   keyboard matrix.
  951 02DB
  952 02DB              ;   This is a good time to test if this is an American or British machine.
  953 02DB              ;   The US machine has an extra diode that causes bit 6 of a byte read from
  954 02DB              ;   a port to be reset.
  955 02DB
  956 02DB 17                   RLA                     ; (4) compensate for the shift test.
  957 02DC 17                   RLA                     ; (4) rotate bit 7 out.
  958 02DD 17                   RLA                     ; (4) test bit 6.
  959 02DE
  960 02DE 9F                   SBC     A,A             ; (4)           $FF or $00 {USA}
  961 02DF E6 18                AND     $18             ; (7)           $18 or $00
  962 02E1 C6 1F                ADD     A,$1F           ; (7)           $37 or $1F
  963 02E3
  964 02E3              ;   result is either 31 (USA) or 55 (UK) blank lines above and below the TV
  965 02E3              ;   picture.
  966 02E3
  967 02E3 32 28 40             LD      ($4028),A       ; (13) update system variable MARGIN
  968 02E6
  969 02E6 C9                   RET                     ; (10) return
  970 02E7
  971 02E7              ; ------------------------------
  972 02E7              ; THE 'SET FAST MODE' SUBROUTINE
  973 02E7              ; ------------------------------
  974 02E7              ;
  975 02E7              ;
  976 02E7
  977 02E7              ;; SET-FAST
  978 02E7 FD CB 3B 7E  L02E7:  BIT     7,(IY+$3B)      ; sv CDFLAG
  979 02EB C8                   RET     Z               ;
  980 02EC
  981 02EC 76                   HALT                    ; Wait for Interrupt
  982 02ED D3 FD                OUT     ($FD),A         ;
  983 02EF FD CB 3B BE          RES     7,(IY+$3B)      ; sv CDFLAG
  984 02F3 C9                   RET                     ; return.
  985 02F4
  986 02F4
  987 02F4              ; --------------
  988 02F4              ; THE 'REPORT-F'
  989 02F4              ; --------------
  990 02F4
  991 02F4              ;; REPORT-F
  992 02F4 CF           L02F4:  RST     08H             ; ERROR-1
  993 02F5 0E                   DEFB    $0E             ; Error Report: No Program Name supplied.
  994 02F6
  995 02F6              ; --------------------------
  996 02F6              ; THE 'SAVE COMMAND' ROUTINE
  997 02F6              ; --------------------------
  998 02F6              ;
  999 02F6              ;
 1000 02F6
 1001 02F6              ;; SAVE
 1002 02F6 CD A8 03     L02F6:  CALL    L03A8           ; routine NAME
 1003 02F9 38 F9                JR      C,L02F4         ; back with null name to REPORT-F above.
 1004 02FB
 1005 02FB EB                   EX      DE,HL           ;
 1006 02FC 11 CB 12             LD      DE,$12CB        ; five seconds timing value
 1007 02FF
 1008 02FF              ;; HEADER
 1009 02FF CD 46 0F     L02FF:  CALL    L0F46           ; routine BREAK-1
 1010 0302 30 2E                JR      NC,L0332        ; to BREAK-2
 1011 0304
 1012 0304              ;; DELAY-1
 1013 0304 10 FE        L0304:  DJNZ    L0304           ; to DELAY-1
 1014 0306
 1015 0306 1B                   DEC     DE              ;
 1016 0307 7A                   LD      A,D             ;
 1017 0308 B3                   OR      E               ;
 1018 0309 20 F4                JR      NZ,L02FF        ; back for delay to HEADER
 1019 030B
 1020 030B              ;; OUT-NAME
 1021 030B CD 1E 03     L030B:  CALL    L031E           ; routine OUT-BYTE
 1022 030E CB 7E                BIT     7,(HL)          ; test for inverted bit.
 1023 0310 23                   INC     HL              ; address next character of name.
 1024 0311 28 F8                JR      Z,L030B         ; back if not inverted to OUT-NAME
 1025 0313
 1026 0313              ; now start saving the system variables onwards.
 1027 0313
 1028 0313 21 09 40             LD      HL,$4009        ; set start of area to VERSN thereby
 1029 0316                                              ; preserving RAMTOP etc.
 1030 0316
 1031 0316              ;; OUT-PROG
 1032 0316 CD 1E 03     L0316:  CALL    L031E           ; routine OUT-BYTE
 1033 0319
 1034 0319 CD FC 01             CALL    L01FC           ; routine LOAD/SAVE                     >>
 1035 031C 18 F8                JR      L0316           ; loop back to OUT-PROG
 1036 031E
 1037 031E              ; -------------------------
 1038 031E              ; THE 'OUT-BYTE' SUBROUTINE
 1039 031E              ; -------------------------
 1040 031E              ; This subroutine outputs a byte a bit at a time to a domestic tape recorder.
 1041 031E
 1042 031E              ;; OUT-BYTE
 1043 031E 5E           L031E:  LD      E,(HL)          ; fetch byte to be saved.
 1044 031F 37                   SCF                     ; set carry flag - as a marker.
 1045 0320
 1046 0320              ;; EACH-BIT
 1047 0320 CB 13        L0320:  RL      E               ;  C < 76543210 < C
 1048 0322 C8                   RET     Z               ; return when the marker bit has passed
 1049 0323                                              ; right through.                        >>
 1050 0323
 1051 0323 9F                   SBC     A,A             ; $FF if set bit or $00 with no carry.
 1052 0324 E6 05                AND     $05             ; $05               $00
 1053 0326 C6 04                ADD     A,$04           ; $09               $04
 1054 0328 4F                   LD      C,A             ; transfer timer to C. a set bit has a longer
 1055 0329                                              ; pulse than a reset bit.
 1056 0329
 1057 0329              ;; PULSES
 1058 0329 D3 FF        L0329:  OUT     ($FF),A         ; pulse to cassette.
 1059 032B 06 23                LD      B,$23           ; set timing constant
 1060 032D
 1061 032D              ;; DELAY-2
 1062 032D 10 FE        L032D:  DJNZ    L032D           ; self-loop to DELAY-2
 1063 032F
 1064 032F CD 46 0F             CALL    L0F46           ; routine BREAK-1 test for BREAK key.
 1065 0332
 1066 0332              ;; BREAK-2
 1067 0332 30 72        L0332:  JR      NC,L03A6        ; forward with break to REPORT-D
 1068 0334
 1069 0334 06 1E                LD      B,$1E           ; set timing value.
 1070 0336
 1071 0336              ;; DELAY-3
 1072 0336 10 FE        L0336:  DJNZ    L0336           ; self-loop to DELAY-3
 1073 0338
 1074 0338 0D                   DEC     C               ; decrement counter
 1075 0339 20 EE                JR      NZ,L0329        ; loop back to PULSES
 1076 033B
 1077 033B              ;; DELAY-4
 1078 033B A7           L033B:  AND     A               ; clear carry for next bit test.
 1079 033C 10 FD                DJNZ    L033B           ; self loop to DELAY-4 (B is zero - 256)
 1080 033E
 1081 033E 18 E0                JR      L0320           ; loop back to EACH-BIT
 1082 0340
 1083 0340              ; --------------------------
 1084 0340              ; THE 'LOAD COMMAND' ROUTINE
 1085 0340              ; --------------------------
 1086 0340              ;
 1087 0340              ;
 1088 0340
 1089 0340              ;; LOAD
 1090 0340 CD A8 03     L0340:  CALL    L03A8           ; routine NAME
 1091 0343
 1092 0343              ; DE points to start of name in RAM.
 1093 0343
 1094 0343 CB 12                RL      D               ; pick up carry
 1095 0345 CB 0A                RRC     D               ; carry now in bit 7.
 1096 0347
 1097 0347              ;; NEXT-PROG
 1098 0347 CD 4C 03     L0347:  CALL    L034C           ; routine IN-BYTE
 1099 034A 18 FB                JR      L0347           ; loop to NEXT-PROG
 1100 034C
 1101 034C              ; ------------------------
 1102 034C              ; THE 'IN-BYTE' SUBROUTINE
 1103 034C              ; ------------------------
 1104 034C
 1105 034C              ;; IN-BYTE
 1106 034C 0E 01        L034C:  LD      C,$01           ; prepare an eight counter 00000001.
 1107 034E
 1108 034E              ;; NEXT-BIT
 1109 034E 06 00        L034E:  LD      B,$00           ; set counter to 256
 1110 0350
 1111 0350              ;; BREAK-3
 1112 0350 3E 7F        L0350:  LD      A,$7F           ; read the keyboard row
 1113 0352 DB FE                IN      A,($FE)         ; with the SPACE key.
 1114 0354
 1115 0354 D3 FF                OUT     ($FF),A         ; output signal to screen.
 1116 0356
 1117 0356 1F                   RRA                     ; test for SPACE pressed.
 1118 0357 30 49                JR      NC,L03A2        ; forward if so to BREAK-4
 1119 0359
 1120 0359 17                   RLA                     ; reverse above rotation
 1121 035A 17                   RLA                     ; test tape bit.
 1122 035B 38 28                JR      C,L0385         ; forward if set to GET-BIT
 1123 035D
 1124 035D 10 F1                DJNZ    L0350           ; loop back to BREAK-3
 1125 035F
 1126 035F F1                   POP     AF              ; drop the return address.
 1127 0360 BA                   CP      D               ; ugh.
 1128 0361
 1129 0361              ;; RESTART
 1130 0361 D2 CA 03     L0361:  JP      NC,RST2        ; jump forward to INITIAL if D is zero
 1131 0364                                              ; to reset the system
 1132 0364                                              ; if the tape signal has timed out for example
 1133 0364                                              ; if the tape is stopped. Not just a simple
 1134 0364                                              ; report as some system variables will have
 1135 0364                                              ; been overwritten.
 1136 0364
 1137 0364 62                   LD      H,D             ; else transfer the start of name
 1138 0365 6B                   LD      L,E             ; to the HL register
 1139 0366
 1140 0366              ;; IN-NAME
 1141 0366 CD 4C 03     L0366:  CALL    L034C           ; routine IN-BYTE is sort of recursion for name
 1142 0369                                              ; part. received byte in C.
 1143 0369 CB 7A                BIT     7,D             ; is name the null string ?
 1144 036B 79                   LD      A,C             ; transfer byte to A.
 1145 036C 20 03                JR      NZ,L0371        ; forward with null string to MATCHING
 1146 036E
 1147 036E BE                   CP      (HL)            ; else compare with string in memory.
 1148 036F 20 D6                JR      NZ,L0347        ; back with mis-match to NEXT-PROG
 1149 0371                                              ; (seemingly out of subroutine but return
 1150 0371                                              ; address has been dropped).
 1151 0371
 1152 0371
 1153 0371              ;; MATCHING
 1154 0371 23           L0371:  INC     HL              ; address next character of name
 1155 0372 17                   RLA                     ; test for inverted bit.
 1156 0373 30 F1                JR      NC,L0366        ; back if not to IN-NAME
 1157 0375
 1158 0375              ; the name has been matched in full.
 1159 0375              ; proceed to load the data but first increment the high byte of E_LINE, which
 1160 0375              ; is one of the system variables to be loaded in. Since the low byte is loaded
 1161 0375              ; before the high byte, it is possible that, at the in-between stage, a false
 1162 0375              ; value could cause the load to end prematurely - see  LOAD/SAVE check.
 1163 0375
 1164 0375 FD 34 15             INC     (IY+$15)        ; increment system variable E_LINE_hi.
 1165 0378 21 09 40             LD      HL,$4009        ; start loading at system variable VERSN.
 1166 037B
 1167 037B              ;; IN-PROG
 1168 037B 50           L037B:  LD      D,B             ; set D to zero as indicator.
 1169 037C CD 4C 03             CALL    L034C           ; routine IN-BYTE loads a byte
 1170 037F 71                   LD      (HL),C          ; insert assembled byte in memory.
 1171 0380 CD FC 01             CALL    L01FC           ; routine LOAD/SAVE                     >>
 1172 0383 18 F6                JR      L037B           ; loop back to IN-PROG
 1173 0385
 1174 0385              ; ---
 1175 0385
 1176 0385              ; this branch assembles a full byte before exiting normally
 1177 0385              ; from the IN-BYTE subroutine.
 1178 0385
 1179 0385              ;; GET-BIT
 1180 0385 D5           L0385:  PUSH    DE              ; save the
 1181 0386 1E 94                LD      E,$94           ; timing value.
 1182 0388
 1183 0388              ;; TRAILER
 1184 0388 06 1A        L0388:  LD      B,$1A           ; counter to twenty six.
 1185 038A
 1186 038A              ;; COUNTER
 1187 038A 1D           L038A:  DEC     E               ; decrement the measuring timer.
 1188 038B DB FE                IN      A,($FE)         ; read the
 1189 038D 17                   RLA                     ;
 1190 038E CB 7B                BIT     7,E             ;
 1191 0390 7B                   LD      A,E             ;
 1192 0391 38 F5                JR      C,L0388         ; loop back with carry to TRAILER
 1193 0393
 1194 0393 10 F5                DJNZ    L038A           ; to COUNTER
 1195 0395
 1196 0395 D1                   POP     DE              ;
 1197 0396 20 04                JR      NZ,L039C        ; to BIT-DONE
 1198 0398
 1199 0398 FE 56                CP      $56             ;
 1200 039A 30 B2                JR      NC,L034E        ; to NEXT-BIT
 1201 039C
 1202 039C              ;; BIT-DONE
 1203 039C 3F           L039C:  CCF                     ; complement carry flag
 1204 039D CB 11                RL      C               ;
 1205 039F 30 AD                JR      NC,L034E        ; to NEXT-BIT
 1206 03A1
 1207 03A1 C9                   RET                     ; return with full byte.
 1208 03A2
 1209 03A2              ; ---
 1210 03A2
 1211 03A2              ; if break is pressed while loading data then perform a reset.
 1212 03A2              ; if break pressed while waiting for program on tape then OK to break.
 1213 03A2
 1214 03A2              ;; BREAK-4
 1215 03A2 7A           L03A2:  LD      A,D             ; transfer indicator to A.
 1216 03A3 A7                   AND     A               ; test for zero.
 1217 03A4 28 BB                JR      Z,L0361         ; back if so to RESTART
 1218 03A6
 1219 03A6
 1220 03A6              ;; REPORT-D
 1221 03A6 CF           L03A6:  RST     08H             ; ERROR-1
 1222 03A7 0C                   DEFB    $0C             ; Error Report: BREAK - CONT repeats
 1223 03A8
 1224 03A8              ; -----------------------------
 1225 03A8              ; THE 'PROGRAM NAME' SUBROUTINE
 1226 03A8              ; -----------------------------
 1227 03A8              ;
 1228 03A8              ;
 1229 03A8
 1230 03A8              ;; NAME
 1231 03A8 CD 55 0F     L03A8:  CALL    L0F55           ; routine SCANNING
 1232 03AB 3A 01 40             LD      A,($4001)       ; sv FLAGS
 1233 03AE 87                   ADD     A,A             ;
 1234 03AF FA 9A 0D             JP      M,L0D9A         ; to REPORT-C
 1235 03B2
 1236 03B2 E1                   POP     HL              ;
 1237 03B3 D0                   RET     NC              ;
 1238 03B4
 1239 03B4 E5                   PUSH    HL              ;
 1240 03B5 CD E7 02             CALL    L02E7           ; routine SET-FAST
 1241 03B8 CD F8 13             CALL    L13F8           ; routine STK-FETCH
 1242 03BB 62                   LD      H,D             ;
 1243 03BC 6B                   LD      L,E             ;
 1244 03BD 0D                   DEC     C               ;
 1245 03BE F8                   RET     M               ;
 1246 03BF
 1247 03BF 09                   ADD     HL,BC           ;
 1248 03C0 CB FE                SET     7,(HL)          ;
 1249 03C2 C9                   RET                     ;
 1250 03C3
 1251 03C3              ; -------------------------
 1252 03C3              ; THE 'NEW' COMMAND ROUTINE
 1253 03C3              ; -------------------------
 1254 03C3              ;
 1255 03C3              ;
 1256 03C3
 1257 03C3              ;; NEW (MODIFIED)
 1258 03C3              L03C3:
 1259 03C3 CD E7 02     NEW:    CALL    $02E7           ;NEW ENTRY POINT
 1260 03C6 2A 04 40             LD      HL,($4004)      ;GET RAMTOP
 1261 03C9 37                   SCF                     ;FLAG AS NEW,NOT RESET
 1262 03CA
 1263 03CA 22 04 40     RST2:   LD      ($4004),HL      ;SAVE RAMTOP
 1264 03CD 2B                   DEC     HL;
 1265 03CE 36 3E                LD      (HL),$3E
 1266 03D0 2B                   DEC     HL
 1267 03D1 F9                   LD      SP, HL          ;NEW STACKPOINTER
 1268 03D2 2B                   DEC     HL
 1269 03D3 2B                   DEC     HL
 1270 03D4 22 02 40             LD      ($4002),HL      ;ERR-SP
 1271 03D7 3E 1E                LD      A,$1E           ;POINTER TO VIDEO
 1272 03D9 ED 47                LD      I,A             ;FONT TABLE (MSB)
 1273 03DB ED 56                IM      1               ;SET INTERRUPT MODE 1
 1274 03DD FD 21 00 40          LD      IY,$4000        ;SYSVAR POINTER
 1275 03E1 21 7D 40             LD      HL,$407D;
 1276 03E4 FD 74 59             LD      (IY+$59),H      ;INIT CDFLAG
 1277 03E7 22 0C 40             LD      ($400C),HL      ;DFILE=407D
 1278 03EA 22 29 40             LD      ($4029),HL      ;NXTLIN=407D
 1279 03ED 06 19                LD      B,$19           ;COLLAPSED DISPLAY
 1280 03EF 36 76        NL:     LD      (HL),$76        ;HAS 25 N/L CHR
 1281 03F1 23                   INC     HL
 1282 03F2 10 FB                DJNZ    NL
 1283 03F4 22 10 40             LD      ($4010),HL      ;VARS=4096
 1284 03F7 F5                   PUSH    AF              ;NEW/RESET FLAG
 1285 03F8 CD 9A 14             CALL    L149A           ;CLEAR POINTERS
 1286 03FB CD 2A 0A             CALL    L0A2A           ; routine CLS
 1287 03FE F1                   POP     AF              ;NEW/RESET FLAG
 1288 03FF 21 76 06             LD      HL,$0676        ;LOAD LINERUN
 1289 0402 E5                   PUSH    HL              ;AS RETURN ADDRESS
 1290 0403 38 0B                JR      C,NEW1          ;JR IF NEW
 1291 0405 3E FE                LD      A,$FE           ;TEST SHIFT KEY
 1292 0407 DB FE                IN      A,$FE
 1293 0409 1F                   RRA
 1294 040A CD 4B 0F             CALL    $0F4B           ;RESET DEBOUNCE
 1295 040D DA 00 20             JP      C,AUTORUN_BOOT  ;JP TO AUTO BOOT CODE
 1296 0410
 1297 0410 CD 9A 14     NEW1:   CALL    L149A           ; routine CLEAR sets $80 end-marker and the
 1298 0413                                              ; dynamic memory pointers E_LINE, STKBOT and
 1299 0413                                              ; STKEND.
 1300 0413
 1301 0413              ;; N/L-ONLY
 1302 0413 CD AD 14     L0413:  CALL    L14AD           ; routine CURSOR-IN inserts the cursor and
 1303 0416                                              ; end-marker in the Edit Line also setting
 1304 0416                                              ; size of lower display to two lines.
 1305 0416
 1306 0416 CD 07 02             CALL    L0207           ; routine SLOW/FAST selects COMPUTE and DISPLAY
 1307 0419
 1308 0419              ; ---------------------------
 1309 0419              ; THE 'BASIC LISTING' SECTION
 1310 0419              ; ---------------------------
 1311 0419              ;
 1312 0419              ;
 1313 0419
 1314 0419              ;; UPPER
 1315 0419 CD 2A 0A     L0419:  CALL    L0A2A           ; routine CLS
 1316 041C 2A 0A 40             LD      HL,($400A)      ; sv E_PPC_lo
 1317 041F ED 5B 23 40          LD      DE,($4023)      ; sv S_TOP_lo
 1318 0423 A7                   AND     A               ;
 1319 0424 ED 52                SBC     HL,DE           ;
 1320 0426 EB                   EX      DE,HL           ;
 1321 0427 30 04                JR      NC,L042D        ; to ADDR-TOP
 1322 0429
 1323 0429 19                   ADD     HL,DE           ;
 1324 042A 22 23 40             LD      ($4023),HL      ; sv S_TOP_lo
 1325 042D
 1326 042D              ;; ADDR-TOP
 1327 042D CD D8 09     L042D:  CALL    L09D8           ; routine LINE-ADDR
 1328 0430 28 01                JR      Z,L0433         ; to LIST-TOP
 1329 0432
 1330 0432 EB                   EX      DE,HL           ;
 1331 0433
 1332 0433              ;; LIST-TOP
 1333 0433 CD 3E 07     L0433:  CALL    L073E           ; routine LIST-PROG
 1334 0436 FD 35 1E             DEC     (IY+$1E)        ; sv BERG
 1335 0439 20 37                JR      NZ,L0472        ; to LOWER
 1336 043B
 1337 043B 2A 0A 40             LD      HL,($400A)      ; sv E_PPC_lo
 1338 043E CD D8 09             CALL    L09D8           ; routine LINE-ADDR
 1339 0441 2A 16 40             LD      HL,($4016)      ; sv CH_ADD_lo
 1340 0444 37                   SCF                     ; Set Carry Flag
 1341 0445 ED 52                SBC     HL,DE           ;
 1342 0447 21 23 40             LD      HL,$4023        ; sv S_TOP_lo
 1343 044A 30 0B                JR      NC,L0457        ; to INC-LINE
 1344 044C
 1345 044C EB                   EX      DE,HL           ;
 1346 044D 7E                   LD      A,(HL)          ;
 1347 044E 23                   INC     HL              ;
 1348 044F ED A0                LDI                     ;
 1349 0451 12                   LD      (DE),A          ;
 1350 0452 18 C5                JR       L0419          ; to UPPER
 1351 0454
 1352 0454              ; ---
 1353 0454
 1354 0454              ;; DOWN-KEY
 1355 0454 21 0A 40     L0454:  LD      HL,$400A        ; sv E_PPC_lo
 1356 0457
 1357 0457              ;; INC-LINE
 1358 0457 5E           L0457:  LD      E,(HL)          ;
 1359 0458 23                   INC     HL              ;
 1360 0459 56                   LD      D,(HL)          ;
 1361 045A E5                   PUSH    HL              ;
 1362 045B EB                   EX      DE,HL           ;
 1363 045C 23                   INC     HL              ;
 1364 045D CD D8 09             CALL    L09D8           ; routine LINE-ADDR
 1365 0460 CD BB 05             CALL    L05BB           ; routine LINE-NO
 1366 0463 E1                   POP     HL              ;
 1367 0464
 1368 0464              ;; KEY-INPUT
 1369 0464 FD CB 2D 6E  L0464:  BIT     5,(IY+$2D)      ; sv FLAGX
 1370 0468 20 08                JR      NZ,L0472        ; forward to LOWER
 1371 046A
 1372 046A 72                   LD      (HL),D          ;
 1373 046B 2B                   DEC     HL              ;
 1374 046C 73                   LD      (HL),E          ;
 1375 046D 18 AA                JR      L0419           ; to UPPER
 1376 046F
 1377 046F              ; ----------------------------
 1378 046F              ; THE 'EDIT LINE COPY' SECTION
 1379 046F              ; ----------------------------
 1380 046F              ; This routine sets the edit line to just the cursor when
 1381 046F              ; 1) There is not enough memory to edit a BASIC line.
 1382 046F              ; 2) The edit key is used during input.
 1383 046F              ; The entry point LOWER
 1384 046F
 1385 046F
 1386 046F              ;; EDIT-INP
 1387 046F CD AD 14     L046F:  CALL    L14AD           ; routine CURSOR-IN sets cursor only edit line.
 1388 0472
 1389 0472              ; ->
 1390 0472
 1391 0472              ;; LOWER
 1392 0472 2A 14 40     L0472:  LD      HL,($4014)      ; fetch edit line start from E_LINE.
 1393 0475
 1394 0475              ;; EACH-CHAR
 1395 0475 7E           L0475:  LD      A,(HL)          ; fetch a character from edit line.
 1396 0476 FE 7E                CP      $7E             ; compare to the number marker.
 1397 0478 20 08                JR      NZ,L0482        ; forward if not to END-LINE
 1398 047A
 1399 047A 01 06 00             LD      BC,$0006        ; else six invisible bytes to be removed.
 1400 047D CD 60 0A             CALL    L0A60           ; routine RECLAIM-2
 1401 0480 18 F3                JR      L0475           ; back to EACH-CHAR
 1402 0482
 1403 0482              ; ---
 1404 0482
 1405 0482              ;; END-LINE
 1406 0482 FE 76        L0482:  CP      $76             ;
 1407 0484 23                   INC     HL              ;
 1408 0485 20 EE                JR      NZ,L0475        ; to EACH-CHAR
 1409 0487
 1410 0487              ;; EDIT-LINE
 1411 0487 CD 37 05     L0487:  CALL    L0537           ; routine CURSOR sets cursor K or L.
 1412 048A
 1413 048A              ;; EDIT-ROOM
 1414 048A CD 1F 0A     L048A:  CALL    L0A1F           ; routine LINE-ENDS
 1415 048D 2A 14 40             LD      HL,($4014)      ; sv E_LINE_lo
 1416 0490 FD 36 00 FF          LD      (IY+$00),$FF    ; sv ERR_NR
 1417 0494 CD 66 07             CALL    L0766           ; routine COPY-LINE
 1418 0497 FD CB 00 7E          BIT     7,(IY+$00)      ; sv ERR_NR
 1419 049B 20 24                JR      NZ,L04C1        ; to DISPLAY-6
 1420 049D
 1421 049D 3A 22 40             LD      A,($4022)       ; sv DF_SZ
 1422 04A0 FE 18                CP      $18             ;
 1423 04A2 30 1D                JR      NC,L04C1        ; to DISPLAY-6
 1424 04A4
 1425 04A4 3C                   INC     A               ;
 1426 04A5 32 22 40             LD      ($4022),A       ; sv DF_SZ
 1427 04A8 47                   LD      B,A             ;
 1428 04A9 0E 01                LD      C,$01           ;
 1429 04AB CD 18 09             CALL    L0918           ; routine LOC-ADDR
 1430 04AE 54                   LD      D,H             ;
 1431 04AF 5D                   LD      E,L             ;
 1432 04B0 7E                   LD      A,(HL)          ;
 1433 04B1
 1434 04B1              ;; FREE-LINE
 1435 04B1 2B           L04B1:  DEC     HL              ;
 1436 04B2 BE                   CP      (HL)            ;
 1437 04B3 20 FC                JR      NZ,L04B1        ; to FREE-LINE
 1438 04B5
 1439 04B5 23                   INC     HL              ;
 1440 04B6 EB                   EX      DE,HL           ;
 1441 04B7 3A 05 40             LD      A,($4005)       ; sv RAMTOP_hi
 1442 04BA FE 4D                CP      $4D             ;
 1443 04BC DC 5D 0A             CALL    C,L0A5D         ; routine RECLAIM-1
 1444 04BF 18 C9                JR      L048A           ; to EDIT-ROOM
 1445 04C1
 1446 04C1              ; --------------------------
 1447 04C1              ; THE 'WAIT FOR KEY' SECTION
 1448 04C1              ; --------------------------
 1449 04C1              ;
 1450 04C1              ;
 1451 04C1
 1452 04C1              ;; DISPLAY-6
 1453 04C1 21 00 00     L04C1:  LD      HL,$0000        ;
 1454 04C4 22 18 40             LD      ($4018),HL      ; sv X_PTR_lo
 1455 04C7
 1456 04C7 21 3B 40             LD      HL,$403B        ; system variable CDFLAG
 1457 04CA CB 7E                BIT     7,(HL)          ;
 1458 04CC
 1459 04CC CC 29 02             CALL    Z,L0229         ; routine DISPLAY-1
 1460 04CF
 1461 04CF              ;; SLOW-DISP
 1462 04CF CB 46        L04CF:  BIT     0,(HL)          ;
 1463 04D1 28 FC                JR      Z,L04CF         ; to SLOW-DISP
 1464 04D3
 1465 04D3 ED 4B 25 40          LD      BC,($4025)      ; sv LAST_K
 1466 04D7 CD 4B 0F             CALL    L0F4B           ; routine DEBOUNCE
 1467 04DA CD BD 07             CALL    L07BD           ; routine DECODE
 1468 04DD
 1469 04DD 30 93                JR      NC,L0472        ; back to LOWER
 1470 04DF
 1471 04DF              ; -------------------------------
 1472 04DF              ; THE 'KEYBOARD DECODING' SECTION
 1473 04DF              ; -------------------------------
 1474 04DF              ;   The decoded key value is in E and HL points to the position in the
 1475 04DF              ;   key table. D contains zero.
 1476 04DF
 1477 04DF              ;; K-DECODE
 1478 04DF 3A 06 40     L04DF:  LD      A,($4006)       ; Fetch value of system variable MODE
 1479 04E2 3D                   DEC     A               ; test the three values together
 1480 04E3
 1481 04E3 FA 08 05             JP      M,L0508         ; forward, if was zero, to FETCH-2
 1482 04E6
 1483 04E6 20 0F                JR      NZ,L04F7        ; forward, if was 2, to FETCH-1
 1484 04E8
 1485 04E8              ;   The original value was one and is now zero.
 1486 04E8
 1487 04E8 32 06 40             LD      ($4006),A       ; update the system variable MODE
 1488 04EB
 1489 04EB 1D                   DEC     E               ; reduce E to range $00 - $7F
 1490 04EC 7B                   LD      A,E             ; place in A
 1491 04ED D6 27                SUB     $27             ; subtract 39 setting carry if range 00 - 38
 1492 04EF 38 01                JR      C,L04F2         ; forward, if so, to FUNC-BASE
 1493 04F1
 1494 04F1 5F                   LD      E,A             ; else set E to reduced value
 1495 04F2
 1496 04F2              ;; FUNC-BASE
 1497 04F2 21 CC 00     L04F2:  LD      HL,L00CC        ; address of K-FUNCT table for function keys.
 1498 04F5 18 0E                JR      L0505           ; forward to TABLE-ADD
 1499 04F7
 1500 04F7              ; ---
 1501 04F7
 1502 04F7              ;; FETCH-1
 1503 04F7 7E           L04F7:  LD      A,(HL)          ;
 1504 04F8 FE 76                CP      $76             ;
 1505 04FA 28 2F                JR      Z,L052B         ; to K/L-KEY
 1506 04FC
 1507 04FC FE 40                CP      $40             ;
 1508 04FE CB FF                SET     7,A             ;
 1509 0500 38 19                JR      C,L051B         ; to ENTER
 1510 0502
 1511 0502 21 C7 00             LD      HL,$00C7        ; (expr reqd)
 1512 0505
 1513 0505              ;; TABLE-ADD
 1514 0505 19           L0505:  ADD     HL,DE           ;
 1515 0506 18 0D                JR      L0515           ; to FETCH-3
 1516 0508
 1517 0508              ; ---
 1518 0508
 1519 0508              ;; FETCH-2
 1520 0508 7E           L0508:  LD      A,(HL)          ;
 1521 0509 FD CB 01 56          BIT     2,(IY+$01)      ; sv FLAGS  - K or L mode ?
 1522 050D 20 07                JR      NZ,L0516        ; to TEST-CURS
 1523 050F
 1524 050F C6 C0                ADD     A,$C0           ;
 1525 0511 FE E6                CP      $E6             ;
 1526 0513 30 01                JR      NC,L0516        ; to TEST-CURS
 1527 0515
 1528 0515              ;; FETCH-3
 1529 0515 7E           L0515:  LD      A,(HL)          ;
 1530 0516
 1531 0516              ;; TEST-CURS
 1532 0516 FE F0        L0516:  CP      $F0             ;
 1533 0518 EA 2D 05             JP      PE,L052D        ; to KEY-SORT
 1534 051B
 1535 051B              ;; ENTER
 1536 051B 5F           L051B:  LD      E,A             ;
 1537 051C CD 37 05             CALL    L0537           ; routine CURSOR
 1538 051F
 1539 051F 7B                   LD      A,E             ;
 1540 0520 CD 26 05             CALL    L0526           ; routine ADD-CHAR
 1541 0523
 1542 0523              ;; BACK-NEXT
 1543 0523 C3 72 04     L0523:  JP      L0472           ; back to LOWER
 1544 0526
 1545 0526              ; ------------------------------
 1546 0526              ; THE 'ADD CHARACTER' SUBROUTINE
 1547 0526              ; ------------------------------
 1548 0526              ;
 1549 0526              ;
 1550 0526
 1551 0526              ;; ADD-CHAR
 1552 0526 CD 9B 09     L0526:  CALL    L099B           ; routine ONE-SPACE
 1553 0529 12                   LD      (DE),A          ;
 1554 052A C9                   RET                     ;
 1555 052B
 1556 052B              ; -------------------------
 1557 052B              ; THE 'CURSOR KEYS' ROUTINE
 1558 052B              ; -------------------------
 1559 052B              ;
 1560 052B              ;
 1561 052B
 1562 052B              ;; K/L-KEY
 1563 052B 3E 78        L052B:  LD      A,$78           ;
 1564 052D
 1565 052D              ;; KEY-SORT
 1566 052D 5F           L052D:  LD      E,A             ;
 1567 052E 21 82 04             LD      HL,$0482        ; base address of ED-KEYS (exp reqd)
 1568 0531 19                   ADD     HL,DE           ;
 1569 0532 19                   ADD     HL,DE           ;
 1570 0533 4E                   LD      C,(HL)          ;
 1571 0534 23                   INC     HL              ;
 1572 0535 46                   LD      B,(HL)          ;
 1573 0536 C5                   PUSH    BC              ;
 1574 0537
 1575 0537              ;; CURSOR
 1576 0537 2A 14 40     L0537:  LD      HL,($4014)      ; sv E_LINE_lo
 1577 053A FD CB 2D 6E          BIT     5,(IY+$2D)      ; sv FLAGX
 1578 053E 20 16                JR      NZ,L0556        ; to L-MODE
 1579 0540
 1580 0540              ;; K-MODE
 1581 0540 FD CB 01 96  L0540:  RES     2,(IY+$01)      ; sv FLAGS  - Signal use K mode
 1582 0544
 1583 0544              ;; TEST-CHAR
 1584 0544 7E           L0544:  LD      A,(HL)          ;
 1585 0545 FE 7F                CP      $7F             ;
 1586 0547 C8                   RET     Z               ; return
 1587 0548
 1588 0548 23                   INC     HL              ;
 1589 0549 CD B4 07             CALL    L07B4           ; routine NUMBER
 1590 054C 28 F6                JR      Z,L0544         ; to TEST-CHAR
 1591 054E
 1592 054E FE 26                CP      $26             ;
 1593 0550 38 F2                JR      C,L0544         ; to TEST-CHAR
 1594 0552
 1595 0552 FE DE                CP      $DE             ;
 1596 0554 28 EA                JR      Z,L0540         ; to K-MODE
 1597 0556
 1598 0556              ;; L-MODE
 1599 0556 FD CB 01 D6  L0556:  SET     2,(IY+$01)      ; sv FLAGS  - Signal use L mode
 1600 055A 18 E8                JR      L0544           ; to TEST-CHAR
 1601 055C
 1602 055C              ; --------------------------
 1603 055C              ; THE 'CLEAR-ONE' SUBROUTINE
 1604 055C              ; --------------------------
 1605 055C              ;
 1606 055C              ;
 1607 055C
 1608 055C              ;; CLEAR-ONE
 1609 055C 01 01 00     L055C:  LD      BC,$0001        ;
 1610 055F C3 60 0A             JP      L0A60           ; to RECLAIM-2
 1611 0562
 1612 0562
 1613 0562
 1614 0562              ; ------------------------
 1615 0562              ; THE 'EDITING KEYS' TABLE
 1616 0562              ; ------------------------
 1617 0562              ;
 1618 0562              ;
 1619 0562
 1620 0562              ;; ED-KEYS
 1621 0562 9F 05        L0562:  DEFW    L059F           ; Address: $059F; Address: UP-KEY
 1622 0564 54 04                DEFW    L0454           ; Address: $0454; Address: DOWN-KEY
 1623 0566 76 05                DEFW    L0576           ; Address: $0576; Address: LEFT-KEY
 1624 0568 7F 05                DEFW    L057F           ; Address: $057F; Address: RIGHT-KEY
 1625 056A AF 05                DEFW    L05AF           ; Address: $05AF; Address: FUNCTION
 1626 056C C4 05                DEFW    L05C4           ; Address: $05C4; Address: EDIT-KEY
 1627 056E 0C 06                DEFW    L060C           ; Address: $060C; Address: N/L-KEY
 1628 0570 8B 05                DEFW    L058B           ; Address: $058B; Address: RUBOUT
 1629 0572 AF 05                DEFW    L05AF           ; Address: $05AF; Address: FUNCTION
 1630 0574 AF 05                DEFW    L05AF           ; Address: $05AF; Address: FUNCTION
 1631 0576
 1632 0576
 1633 0576              ; -------------------------
 1634 0576              ; THE 'CURSOR LEFT' ROUTINE
 1635 0576              ; -------------------------
 1636 0576              ;
 1637 0576              ;
 1638 0576
 1639 0576              ;; LEFT-KEY
 1640 0576 CD 93 05     L0576:  CALL    L0593           ; routine LEFT-EDGE
 1641 0579 7E                   LD      A,(HL)          ;
 1642 057A 36 7F                LD      (HL),$7F        ;
 1643 057C 23                   INC     HL              ;
 1644 057D 18 09                JR      L0588           ; to GET-CODE
 1645 057F
 1646 057F              ; --------------------------
 1647 057F              ; THE 'CURSOR RIGHT' ROUTINE
 1648 057F              ; --------------------------
 1649 057F              ;
 1650 057F              ;
 1651 057F
 1652 057F              ;; RIGHT-KEY
 1653 057F 23           L057F:  INC     HL              ;
 1654 0580 7E                   LD      A,(HL)          ;
 1655 0581 FE 76                CP      $76             ;
 1656 0583 28 18                JR      Z,L059D         ; to ENDED-2
 1657 0585
 1658 0585 36 7F                LD      (HL),$7F        ;
 1659 0587 2B                   DEC     HL              ;
 1660 0588
 1661 0588              ;; GET-CODE
 1662 0588 77           L0588:  LD      (HL),A          ;
 1663 0589
 1664 0589              ;; ENDED-1
 1665 0589 18 98        L0589:  JR      L0523           ; to BACK-NEXT
 1666 058B
 1667 058B              ; --------------------
 1668 058B              ; THE 'RUBOUT' ROUTINE
 1669 058B              ; --------------------
 1670 058B              ;
 1671 058B              ;
 1672 058B
 1673 058B              ;; RUBOUT
 1674 058B CD 93 05     L058B:  CALL    L0593           ; routine LEFT-EDGE
 1675 058E CD 5C 05             CALL    L055C           ; routine CLEAR-ONE
 1676 0591 18 F6                JR      L0589           ; to ENDED-1
 1677 0593
 1678 0593              ; ------------------------
 1679 0593              ; THE 'ED-EDGE' SUBROUTINE
 1680 0593              ; ------------------------
 1681 0593              ;
 1682 0593              ;
 1683 0593
 1684 0593              ;; LEFT-EDGE
 1685 0593 2B           L0593:  DEC     HL              ;
 1686 0594 ED 5B 14 40          LD      DE,($4014)      ; sv E_LINE_lo
 1687 0598 1A                   LD      A,(DE)          ;
 1688 0599 FE 7F                CP      $7F             ;
 1689 059B C0                   RET     NZ              ;
 1690 059C
 1691 059C D1                   POP     DE              ;
 1692 059D
 1693 059D              ;; ENDED-2
 1694 059D 18 EA        L059D:  JR      L0589           ; to ENDED-1
 1695 059F
 1696 059F              ; -----------------------
 1697 059F              ; THE 'CURSOR UP' ROUTINE
 1698 059F              ; -----------------------
 1699 059F              ;
 1700 059F              ;
 1701 059F
 1702 059F              ;; UP-KEY
 1703 059F 2A 0A 40     L059F:  LD      HL,($400A)      ; sv E_PPC_lo
 1704 05A2 CD D8 09             CALL    L09D8           ; routine LINE-ADDR
 1705 05A5 EB                   EX      DE,HL           ;
 1706 05A6 CD BB 05             CALL    L05BB           ; routine LINE-NO
 1707 05A9 21 0B 40             LD      HL,$400B        ; point to system variable E_PPC_hi
 1708 05AC C3 64 04             JP      L0464           ; jump back to KEY-INPUT
 1709 05AF
 1710 05AF              ; --------------------------
 1711 05AF              ; THE 'FUNCTION KEY' ROUTINE
 1712 05AF              ; --------------------------
 1713 05AF              ;
 1714 05AF              ;
 1715 05AF
 1716 05AF              ;; FUNCTION
 1717 05AF 7B           L05AF:  LD      A,E             ;
 1718 05B0 E6 07                AND     $07             ;
 1719 05B2 32 06 40             LD      ($4006),A       ; sv MODE
 1720 05B5 18 E6                JR      L059D           ; back to ENDED-2
 1721 05B7
 1722 05B7              ; ------------------------------------
 1723 05B7              ; THE 'COLLECT LINE NUMBER' SUBROUTINE
 1724 05B7              ; ------------------------------------
 1725 05B7              ;
 1726 05B7              ;
 1727 05B7
 1728 05B7              ;; ZERO-DE
 1729 05B7 EB           L05B7:  EX      DE,HL           ;
 1730 05B8 11 C2 04             LD      DE,L04C1 + 1    ; $04C2 - a location addressing two zeros.
 1731 05BB
 1732 05BB              ; ->
 1733 05BB
 1734 05BB              ;; LINE-NO
 1735 05BB 7E           L05BB:  LD      A,(HL)          ;
 1736 05BC E6 C0                AND     $C0             ;
 1737 05BE 20 F7                JR      NZ,L05B7        ; to ZERO-DE
 1738 05C0
 1739 05C0 56                   LD      D,(HL)          ;
 1740 05C1 23                   INC     HL              ;
 1741 05C2 5E                   LD      E,(HL)          ;
 1742 05C3 C9                   RET                     ;
 1743 05C4
 1744 05C4              ; ----------------------
 1745 05C4              ; THE 'EDIT KEY' ROUTINE
 1746 05C4              ; ----------------------
 1747 05C4              ;
 1748 05C4              ;
 1749 05C4
 1750 05C4              ;; EDIT-KEY
 1751 05C4 CD 1F 0A     L05C4:  CALL    L0A1F           ; routine LINE-ENDS clears lower display.
 1752 05C7
 1753 05C7 21 6F 04             LD      HL,L046F        ; Address: EDIT-INP
 1754 05CA E5                   PUSH    HL              ; ** is pushed as an error looping address.
 1755 05CB
 1756 05CB FD CB 2D 6E          BIT     5,(IY+$2D)      ; test FLAGX
 1757 05CF C0                   RET     NZ              ; indirect jump if in input mode
 1758 05D0                                              ; to L046F, EDIT-INP (begin again).
 1759 05D0
 1760 05D0              ;
 1761 05D0
 1762 05D0 2A 14 40             LD      HL,($4014)      ; fetch E_LINE
 1763 05D3 22 0E 40             LD      ($400E),HL      ; and use to update the screen cursor DF_CC
 1764 05D6
 1765 05D6              ; so now RST $10 will print the line numbers to the edit line instead of screen.
 1766 05D6              ; first make sure that no newline/out of screen can occur while sprinting the
 1767 05D6              ; line numbers to the edit line.
 1768 05D6
 1769 05D6 21 21 18             LD      HL,$1821        ; prepare line 0, column 0.
 1770 05D9 22 39 40             LD      ($4039),HL      ; update S_POSN with these dummy values.
 1771 05DC
 1772 05DC 2A 0A 40             LD      HL,($400A)      ; fetch current line from E_PPC may be a
 1773 05DF                                              ; non-existent line e.g. last line deleted.
 1774 05DF CD D8 09             CALL    L09D8           ; routine LINE-ADDR gets address or that of
 1775 05E2                                              ; the following line.
 1776 05E2 CD BB 05             CALL    L05BB           ; routine LINE-NO gets line number if any in DE
 1777 05E5                                              ; leaving HL pointing at second low byte.
 1778 05E5
 1779 05E5 7A                   LD      A,D             ; test the line number for zero.
 1780 05E6 B3                   OR      E               ;
 1781 05E7 C8                   RET     Z               ; return if no line number - no program to edit.
 1782 05E8
 1783 05E8 2B                   DEC     HL              ; point to high byte.
 1784 05E9 CD A5 0A             CALL    L0AA5           ; routine OUT-NO writes number to edit line.
 1785 05EC
 1786 05EC 23                   INC     HL              ; point to length bytes.
 1787 05ED 4E                   LD      C,(HL)          ; low byte to C.
 1788 05EE 23                   INC     HL              ;
 1789 05EF 46                   LD      B,(HL)          ; high byte to B.
 1790 05F0
 1791 05F0 23                   INC     HL              ; point to first character in line.
 1792 05F1 ED 5B 0E 40          LD      DE,($400E)      ; fetch display file cursor DF_CC
 1793 05F5
 1794 05F5 3E 7F                LD      A,$7F           ; prepare the cursor character.
 1795 05F7 12                   LD      (DE),A          ; and insert in edit line.
 1796 05F8 13                   INC     DE              ; increment intended destination.
 1797 05F9
 1798 05F9 E5                   PUSH    HL              ; * save start of BASIC.
 1799 05FA
 1800 05FA 21 1D 00             LD      HL,$001D        ; set an overhead of 29 bytes.
 1801 05FD 19                   ADD     HL,DE           ; add in the address of cursor.
 1802 05FE 09                   ADD     HL,BC           ; add the length of the line.
 1803 05FF ED 72                SBC     HL,SP           ; subtract the stack pointer.
 1804 0601
 1805 0601 E1                   POP     HL              ; * restore pointer to start of BASIC.
 1806 0602
 1807 0602 D0                   RET     NC              ; return if not enough room to L046F EDIT-INP.
 1808 0603                                              ; the edit key appears not to work.
 1809 0603
 1810 0603 ED B0                LDIR                    ; else copy bytes from program to edit line.
 1811 0605                                              ; Note. hidden floating point forms are also
 1812 0605                                              ; copied to edit line.
 1813 0605
 1814 0605 EB                   EX      DE,HL           ; transfer free location pointer to HL
 1815 0606
 1816 0606 D1                   POP     DE              ; ** remove address EDIT-INP from stack.
 1817 0607
 1818 0607 CD A6 14             CALL    L14A6           ; routine SET-STK-B sets STKEND from HL.
 1819 060A
 1820 060A 18 91                JR      L059D           ; back to ENDED-2 and after 3 more jumps
 1821 060C                                              ; to L0472, LOWER.
 1822 060C                                              ; Note. The LOWER routine removes the hidden
 1823 060C                                              ; floating-point numbers from the edit line.
 1824 060C
 1825 060C              ; -------------------------
 1826 060C              ; THE 'NEWLINE KEY' ROUTINE
 1827 060C              ; -------------------------
 1828 060C              ;
 1829 060C              ;
 1830 060C
 1831 060C              ;; N/L-KEY
 1832 060C CD 1F 0A     L060C:  CALL    L0A1F           ; routine LINE-ENDS
 1833 060F
 1834 060F 21 72 04             LD      HL,L0472        ; prepare address: LOWER
 1835 0612
 1836 0612 FD CB 2D 6E          BIT     5,(IY+$2D)      ; sv FLAGX
 1837 0616 20 11                JR      NZ,L0629        ; to NOW-SCAN
 1838 0618
 1839 0618 2A 14 40             LD      HL,($4014)      ; sv E_LINE_lo
 1840 061B 7E                   LD      A,(HL)          ;
 1841 061C FE FF                CP      $FF             ;
 1842 061E 28 06                JR      Z,L0626         ; to STK-UPPER
 1843 0620
 1844 0620 CD E2 08             CALL    L08E2           ; routine CLEAR-PRB
 1845 0623 CD 2A 0A             CALL    L0A2A           ; routine CLS
 1846 0626
 1847 0626              ;; STK-UPPER
 1848 0626 21 19 04     L0626:  LD      HL,L0419        ; Address: UPPER
 1849 0629
 1850 0629              ;; NOW-SCAN
 1851 0629 E5           L0629:  PUSH    HL              ; push routine address (LOWER or UPPER).
 1852 062A CD BA 0C             CALL    L0CBA           ; routine LINE-SCAN
 1853 062D E1                   POP     HL              ;
 1854 062E CD 37 05             CALL    L0537           ; routine CURSOR
 1855 0631 CD 5C 05             CALL    L055C           ; routine CLEAR-ONE
 1856 0634 CD 73 0A             CALL    L0A73           ; routine E-LINE-NO
 1857 0637 20 15                JR      NZ,L064E        ; to N/L-INP
 1858 0639
 1859 0639 78                   LD      A,B             ;
 1860 063A B1                   OR      C               ;
 1861 063B C2 E0 06             JP      NZ,L06E0        ; to N/L-LINE
 1862 063E
 1863 063E 0B                   DEC     BC              ;
 1864 063F 0B                   DEC     BC              ;
 1865 0640 ED 43 07 40          LD      ($4007),BC      ; sv PPC_lo
 1866 0644 FD 36 22 02          LD      (IY+$22),$02    ; sv DF_SZ
 1867 0648 ED 5B 0C 40          LD      DE,($400C)      ; sv D_FILE_lo
 1868 064C
 1869 064C 18 13                JR      L0661           ; forward to TEST-NULL
 1870 064E
 1871 064E              ; ---
 1872 064E
 1873 064E              ;; N/L-INP
 1874 064E FE 76        L064E:  CP      $76             ;
 1875 0650 28 12                JR      Z,L0664         ; to N/L-NULL
 1876 0652
 1877 0652 ED 4B 30 40          LD      BC,($4030)      ; sv T_ADDR_lo
 1878 0656 CD 18 09             CALL    L0918           ; routine LOC-ADDR
 1879 0659 ED 5B 29 40          LD      DE,($4029)      ; sv NXTLIN_lo
 1880 065D FD 36 22 02          LD      (IY+$22),$02    ; sv DF_SZ
 1881 0661
 1882 0661              ;; TEST-NULL
 1883 0661 DF           L0661:  RST     18H             ; GET-CHAR
 1884 0662 FE 76                CP      $76             ;
 1885 0664
 1886 0664              ;; N/L-NULL
 1887 0664 CA 13 04     L0664:  JP      Z,L0413         ; to N/L-ONLY
 1888 0667
 1889 0667 FD 36 01 80          LD      (IY+$01),$80    ; sv FLAGS
 1890 066B EB                   EX      DE,HL           ;
 1891 066C
 1892 066C              ;; NEXT-LINE
 1893 066C 22 29 40     L066C:  LD      ($4029),HL      ; sv NXTLIN_lo
 1894 066F EB                   EX      DE,HL           ;
 1895 0670 CD 4D 00             CALL    L004D           ; routine TEMP-PTR-2
 1896 0673 CD C1 0C             CALL    L0CC1           ; routine LINE-RUN
 1897 0676 FD CB 01 8E          RES     1,(IY+$01)      ; sv FLAGS  - Signal printer not in use
 1898 067A 3E C0                LD      A,$C0           ;
 1899 067C FD 77 19             LD      (IY+$19),A      ; sv X_PTR_lo
 1900 067F CD A3 14             CALL    L14A3           ; routine X-TEMP
 1901 0682 FD CB 2D AE          RES     5,(IY+$2D)      ; sv FLAGX
 1902 0686 FD CB 00 7E          BIT     7,(IY+$00)      ; sv ERR_NR
 1903 068A 28 22                JR      Z,L06AE         ; to STOP-LINE
 1904 068C
 1905 068C 2A 29 40             LD      HL,($4029)      ; sv NXTLIN_lo
 1906 068F A6                   AND     (HL)            ;
 1907 0690 20 1C                JR       NZ,L06AE       ; to STOP-LINE
 1908 0692
 1909 0692 56                   LD      D,(HL)          ;
 1910 0693 23                   INC     HL              ;
 1911 0694 5E                   LD      E,(HL)          ;
 1912 0695 ED 53 07 40          LD      ($4007),DE      ; sv PPC_lo
 1913 0699 23                   INC     HL              ;
 1914 069A 5E                   LD      E,(HL)          ;
 1915 069B 23                   INC     HL              ;
 1916 069C 56                   LD      D,(HL)          ;
 1917 069D 23                   INC     HL              ;
 1918 069E EB                   EX      DE,HL           ;
 1919 069F 19                   ADD     HL,DE           ;
 1920 06A0 CD 46 0F             CALL    L0F46           ; routine BREAK-1
 1921 06A3 38 C7                JR      C,L066C         ; to NEXT-LINE
 1922 06A5
 1923 06A5 21 00 40             LD      HL,$4000        ; sv ERR_NR
 1924 06A8 CB 7E                BIT     7,(HL)          ;
 1925 06AA 28 02                JR      Z,L06AE         ; to STOP-LINE
 1926 06AC
 1927 06AC 36 0C                LD      (HL),$0C        ;
 1928 06AE
 1929 06AE              ;; STOP-LINE
 1930 06AE FD CB 38 7E  L06AE:  BIT     7,(IY+$38)      ; sv PR_CC
 1931 06B2 CC 71 08             CALL    Z,L0871         ; routine COPY-BUFF
 1932 06B5 01 21 01             LD      BC,$0121        ;
 1933 06B8 CD 18 09             CALL    L0918           ; routine LOC-ADDR
 1934 06BB 3A 00 40             LD      A,($4000)       ; sv ERR_NR
 1935 06BE ED 4B 07 40          LD      BC,($4007)      ; sv PPC_lo
 1936 06C2 3C                   INC     A               ;
 1937 06C3 28 0C                JR      Z,L06D1         ; to REPORT
 1938 06C5
 1939 06C5 FE 09                CP      $09             ;
 1940 06C7 20 01                JR      NZ,L06CA        ; to CONTINUE
 1941 06C9
 1942 06C9 03                   INC     BC              ;
 1943 06CA
 1944 06CA              ;; CONTINUE
 1945 06CA ED 43 2B 40  L06CA:  LD      ($402B),BC      ; sv OLDPPC_lo
 1946 06CE 20 01                JR      NZ,L06D1        ; to REPORT
 1947 06D0
 1948 06D0 0B                   DEC     BC              ;
 1949 06D1
 1950 06D1              ;; REPORT
 1951 06D1 CD EB 07     L06D1:  CALL    L07EB           ; routine OUT-CODE
 1952 06D4 3E 18                LD      A,$18           ;
 1953 06D6
 1954 06D6 D7                   RST     10H             ; PRINT-A
 1955 06D7 CD 98 0A             CALL    L0A98           ; routine OUT-NUM
 1956 06DA CD AD 14             CALL    L14AD           ; routine CURSOR-IN
 1957 06DD C3 C1 04             JP      L04C1           ; to DISPLAY-6
 1958 06E0
 1959 06E0              ; ---
 1960 06E0
 1961 06E0              ;; N/L-LINE
 1962 06E0 ED 43 0A 40  L06E0:  LD      ($400A),BC      ; sv E_PPC_lo
 1963 06E4 2A 16 40             LD      HL,($4016)      ; sv CH_ADD_lo
 1964 06E7 EB                   EX      DE,HL           ;
 1965 06E8 21 13 04             LD      HL,L0413        ; Address: N/L-ONLY
 1966 06EB E5                   PUSH    HL              ;
 1967 06EC 2A 1A 40             LD      HL,($401A)      ; sv STKBOT_lo
 1968 06EF ED 52                SBC     HL,DE           ;
 1969 06F1 E5                   PUSH    HL              ;
 1970 06F2 C5                   PUSH    BC              ;
 1971 06F3 CD E7 02             CALL    L02E7           ; routine SET-FAST
 1972 06F6 CD 2A 0A             CALL    L0A2A           ; routine CLS
 1973 06F9 E1                   POP     HL              ;
 1974 06FA CD D8 09             CALL    L09D8           ; routine LINE-ADDR
 1975 06FD 20 06                JR      NZ,L0705        ; to COPY-OVER
 1976 06FF
 1977 06FF CD F2 09             CALL    L09F2           ; routine NEXT-ONE
 1978 0702 CD 60 0A             CALL    L0A60           ; routine RECLAIM-2
 1979 0705
 1980 0705              ;; COPY-OVER
 1981 0705 C1           L0705:  POP     BC              ;
 1982 0706 79                   LD      A,C             ;
 1983 0707 3D                   DEC     A               ;
 1984 0708 B0                   OR      B               ;
 1985 0709 C8                   RET     Z               ;
 1986 070A
 1987 070A C5                   PUSH    BC              ;
 1988 070B 03                   INC     BC              ;
 1989 070C 03                   INC     BC              ;
 1990 070D 03                   INC     BC              ;
 1991 070E 03                   INC     BC              ;
 1992 070F 2B                   DEC     HL              ;
 1993 0710 CD 9E 09             CALL    L099E           ; routine MAKE-ROOM
 1994 0713 CD 07 02             CALL    L0207           ; routine SLOW/FAST
 1995 0716 C1                   POP     BC              ;
 1996 0717 C5                   PUSH    BC              ;
 1997 0718 13                   INC     DE              ;
 1998 0719 2A 1A 40             LD      HL,($401A)      ; sv STKBOT_lo
 1999 071C 2B                   DEC     HL              ;
 2000 071D ED B8                LDDR                    ; copy bytes
 2001 071F 2A 0A 40             LD      HL,($400A)      ; sv E_PPC_lo
 2002 0722 EB                   EX      DE,HL           ;
 2003 0723 C1                   POP     BC              ;
 2004 0724 70                   LD      (HL),B          ;
 2005 0725 2B                   DEC     HL              ;
 2006 0726 71                   LD      (HL),C          ;
 2007 0727 2B                   DEC     HL              ;
 2008 0728 73                   LD      (HL),E          ;
 2009 0729 2B                   DEC     HL              ;
 2010 072A 72                   LD      (HL),D          ;
 2011 072B
 2012 072B C9                   RET                     ; return.
 2013 072C
 2014 072C              ; ---------------------------------------
 2015 072C              ; THE 'LIST' AND 'LLIST' COMMAND ROUTINES
 2016 072C              ; ---------------------------------------
 2017 072C              ;
 2018 072C              ;
 2019 072C
 2020 072C              ;; LLIST
 2021 072C FD CB 01 CE  L072C:  SET     1,(IY+$01)      ; sv FLAGS  - signal printer in use
 2022 0730
 2023 0730              ;; LIST
 2024 0730 CD A7 0E     L0730:  CALL    L0EA7           ; routine FIND-INT
 2025 0733
 2026 0733 78                   LD      A,B             ; fetch high byte of user-supplied line number.
 2027 0734 E6 3F                AND     $3F             ; and crudely limit to range 1-16383.
 2028 0736
 2029 0736 67                   LD      H,A             ;
 2030 0737 69                   LD      L,C             ;
 2031 0738 22 0A 40             LD      ($400A),HL      ; sv E_PPC_lo
 2032 073B CD D8 09             CALL    L09D8           ; routine LINE-ADDR
 2033 073E
 2034 073E              ;; LIST-PROG
 2035 073E 1E 00        L073E:  LD      E,$00           ;
 2036 0740
 2037 0740              ;; UNTIL-END
 2038 0740 CD 45 07     L0740:  CALL    L0745           ; routine OUT-LINE lists one line of BASIC
 2039 0743                                              ; making an early return when the screen is
 2040 0743                                              ; full or the end of program is reached.    >>
 2041 0743 18 FB                JR      L0740           ; loop back to UNTIL-END
 2042 0745
 2043 0745              ; -----------------------------------
 2044 0745              ; THE 'PRINT A BASIC LINE' SUBROUTINE
 2045 0745              ; -----------------------------------
 2046 0745              ;
 2047 0745              ;
 2048 0745
 2049 0745              ;; OUT-LINE
 2050 0745 ED 4B 0A 40  L0745:  LD      BC,($400A)      ; sv E_PPC_lo
 2051 0749 CD EA 09             CALL    L09EA           ; routine CP-LINES
 2052 074C 16 92                LD      D,$92           ;
 2053 074E 28 05                JR      Z,L0755         ; to TEST-END
 2054 0750
 2055 0750 11 00 00             LD      DE,$0000        ;
 2056 0753 CB 13                RL      E               ;
 2057 0755
 2058 0755              ;; TEST-END
 2059 0755 FD 73 1E     L0755:  LD      (IY+$1E),E      ; sv BERG
 2060 0758 7E                   LD      A,(HL)          ;
 2061 0759 FE 40                CP      $40             ;
 2062 075B C1                   POP     BC              ;
 2063 075C D0                   RET     NC              ;
 2064 075D
 2065 075D C5                   PUSH    BC              ;
 2066 075E CD A5 0A             CALL    L0AA5           ; routine OUT-NO
 2067 0761 23                   INC     HL              ;
 2068 0762 7A                   LD      A,D             ;
 2069 0763
 2070 0763 D7                   RST     10H             ; PRINT-A
 2071 0764 23                   INC     HL              ;
 2072 0765 23                   INC     HL              ;
 2073 0766
 2074 0766              ;; COPY-LINE
 2075 0766 22 16 40     L0766:  LD      ($4016),HL      ; sv CH_ADD_lo
 2076 0769 FD CB 01 C6          SET     0,(IY+$01)      ; sv FLAGS  - Suppress leading space
 2077 076D
 2078 076D              ;; MORE-LINE
 2079 076D ED 4B 18 40  L076D:  LD      BC,($4018)      ; sv X_PTR_lo
 2080 0771 2A 16 40             LD      HL,($4016)      ; sv CH_ADD_lo
 2081 0774 A7                   AND      A              ;
 2082 0775 ED 42                SBC     HL,BC           ;
 2083 0777 20 03                JR      NZ,L077C        ; to TEST-NUM
 2084 0779
 2085 0779 3E B8                LD      A,$B8           ;
 2086 077B
 2087 077B D7                   RST     10H             ; PRINT-A
 2088 077C
 2089 077C              ;; TEST-NUM
 2090 077C 2A 16 40     L077C:  LD      HL,($4016)      ; sv CH_ADD_lo
 2091 077F 7E                   LD      A,(HL)          ;
 2092 0780 23                   INC     HL              ;
 2093 0781 CD B4 07             CALL    L07B4           ; routine NUMBER
 2094 0784 22 16 40             LD      ($4016),HL      ; sv CH_ADD_lo
 2095 0787 28 E4                JR      Z,L076D         ; to MORE-LINE
 2096 0789
 2097 0789 FE 7F                CP      $7F             ;
 2098 078B 28 10                JR      Z,L079D         ; to OUT-CURS
 2099 078D
 2100 078D FE 76                CP      $76             ;
 2101 078F 28 5D                JR      Z,L07EE         ; to OUT-CH
 2102 0791
 2103 0791 CB 77                BIT     6,A             ;
 2104 0793 28 05                JR      Z,L079A         ; to NOT-TOKEN
 2105 0795
 2106 0795 CD 4B 09             CALL    L094B           ; routine TOKENS
 2107 0798 18 D3                JR      L076D           ; to MORE-LINE
 2108 079A
 2109 079A              ; ---
 2110 079A
 2111 079A
 2112 079A              ;; NOT-TOKEN
 2113 079A D7           L079A:  RST     10H             ; PRINT-A
 2114 079B 18 D0                JR      L076D           ; to MORE-LINE
 2115 079D
 2116 079D              ; ---
 2117 079D
 2118 079D              ;; OUT-CURS
 2119 079D 3A 06 40     L079D:  LD      A,($4006)       ; Fetch value of system variable MODE
 2120 07A0 06 AB                LD      B,$AB           ; Prepare an inverse [F] for function cursor.
 2121 07A2
 2122 07A2 A7                   AND     A               ; Test for zero -
 2123 07A3 20 05                JR      NZ,L07AA        ; forward if not to FLAGS-2
 2124 07A5
 2125 07A5 3A 01 40             LD      A,($4001)       ; Fetch system variable FLAGS.
 2126 07A8 06 B0                LD      B,$B0           ; Prepare an inverse [K] for keyword cursor.
 2127 07AA
 2128 07AA              ;; FLAGS-2
 2129 07AA 1F           L07AA:  RRA                     ; 00000?00 -> 000000?0
 2130 07AB 1F                   RRA                     ; 000000?0 -> 0000000?
 2131 07AC E6 01                AND     $01             ; 0000000?    0000000x
 2132 07AE
 2133 07AE 80                   ADD     A,B             ; Possibly [F] -> [G]  or  [K] -> [L]
 2134 07AF
 2135 07AF CD F5 07             CALL    L07F5           ; routine PRINT-SP prints character
 2136 07B2 18 B9                JR      L076D           ; back to MORE-LINE
 2137 07B4
 2138 07B4              ; -----------------------
 2139 07B4              ; THE 'NUMBER' SUBROUTINE
 2140 07B4              ; -----------------------
 2141 07B4              ;
 2142 07B4              ;
 2143 07B4
 2144 07B4              ;; NUMBER
 2145 07B4 FE 7E        L07B4:  CP      $7E             ;
 2146 07B6 C0                   RET     NZ              ;
 2147 07B7
 2148 07B7 23                   INC     HL              ;
 2149 07B8 23                   INC     HL              ;
 2150 07B9 23                   INC     HL              ;
 2151 07BA 23                   INC     HL              ;
 2152 07BB 23                   INC     HL              ;
 2153 07BC C9                   RET                     ;
 2154 07BD
 2155 07BD              ; --------------------------------
 2156 07BD              ; THE 'KEYBOARD DECODE' SUBROUTINE
 2157 07BD              ; --------------------------------
 2158 07BD              ;
 2159 07BD              ;
 2160 07BD
 2161 07BD              ;; DECODE
 2162 07BD 16 00        L07BD:  LD      D,$00           ;
 2163 07BF CB 28                SRA     B               ;
 2164 07C1 9F                   SBC     A,A             ;
 2165 07C2 F6 26                OR      $26             ;
 2166 07C4 2E 05                LD      L,$05           ;
 2167 07C6 95                   SUB     L               ;
 2168 07C7
 2169 07C7              ;; KEY-LINE
 2170 07C7 85           L07C7:  ADD     A,L             ;
 2171 07C8 37                   SCF                     ; Set Carry Flag
 2172 07C9 CB 19                RR      C               ;
 2173 07CB 38 FA                JR      C,L07C7         ; to KEY-LINE
 2174 07CD
 2175 07CD 0C                   INC     C               ;
 2176 07CE C0                   RET      NZ             ;
 2177 07CF
 2178 07CF 48                   LD      C,B             ;
 2179 07D0 2D                   DEC     L               ;
 2180 07D1 2E 01                LD      L,$01           ;
 2181 07D3 20 F2                JR      NZ,L07C7        ; to KEY-LINE
 2182 07D5
 2183 07D5 21 7D 00             LD      HL,$007D        ; (expr reqd)
 2184 07D8 5F                   LD      E,A             ;
 2185 07D9 19                   ADD     HL,DE           ;
 2186 07DA 37                   SCF                     ; Set Carry Flag
 2187 07DB C9                   RET                     ;
 2188 07DC
 2189 07DC              ; -------------------------
 2190 07DC              ; THE 'PRINTING' SUBROUTINE
 2191 07DC              ; -------------------------
 2192 07DC              ;
 2193 07DC              ;
 2194 07DC
 2195 07DC              ;; LEAD-SP
 2196 07DC 7B           L07DC:  LD      A,E             ;
 2197 07DD A7                   AND     A               ;
 2198 07DE F8                   RET     M               ;
 2199 07DF
 2200 07DF 18 10                JR      L07F1           ; to PRINT-CH
 2201 07E1
 2202 07E1              ; ---
 2203 07E1
 2204 07E1              ;; OUT-DIGIT
 2205 07E1 AF           L07E1:  XOR     A               ;
 2206 07E2
 2207 07E2              ;; DIGIT-INC
 2208 07E2 09           L07E2:  ADD     HL,BC           ;
 2209 07E3 3C                   INC     A               ;
 2210 07E4 38 FC                JR      C,L07E2         ; to DIGIT-INC
 2211 07E6
 2212 07E6 ED 42                SBC     HL,BC           ;
 2213 07E8 3D                   DEC     A               ;
 2214 07E9 28 F1                JR      Z,L07DC         ; to LEAD-SP
 2215 07EB
 2216 07EB              ;; OUT-CODE
 2217 07EB 1E 1C        L07EB:  LD      E,$1C           ;
 2218 07ED 83                   ADD     A,E             ;
 2219 07EE
 2220 07EE              ;; OUT-CH
 2221 07EE A7           L07EE:  AND     A               ;
 2222 07EF 28 04                JR      Z,L07F5         ; to PRINT-SP
 2223 07F1
 2224 07F1              ;; PRINT-CH
 2225 07F1 FD CB 01 86  L07F1:  RES     0,(IY+$01)      ; update FLAGS - signal leading space permitted
 2226 07F5
 2227 07F5              ;; PRINT-SP
 2228 07F5 D9           L07F5:  EXX                     ;
 2229 07F6 E5                   PUSH    HL              ;
 2230 07F7 FD CB 01 4E          BIT     1,(IY+$01)      ; test FLAGS - is printer in use ?
 2231 07FB 20 05                JR      NZ,L0802        ; to LPRINT-A
 2232 07FD
 2233 07FD CD 08 08             CALL    L0808           ; routine ENTER-CH
 2234 0800 18 03                JR      L0805           ; to PRINT-EXX
 2235 0802
 2236 0802              ; ---
 2237 0802
 2238 0802              ;; LPRINT-A
 2239 0802 CD 51 08     L0802:  CALL    L0851           ; routine LPRINT-CH
 2240 0805
 2241 0805              ;; PRINT-EXX
 2242 0805 E1           L0805:  POP     HL              ;
 2243 0806 D9                   EXX                     ;
 2244 0807 C9                   RET                     ;
 2245 0808
 2246 0808              ; ---
 2247 0808
 2248 0808              ;; ENTER-CH
 2249 0808 57           L0808:  LD      D,A             ;
 2250 0809 ED 4B 39 40          LD      BC,($4039)      ; sv S_POSN_x
 2251 080D 79                   LD      A,C             ;
 2252 080E FE 21                CP      $21             ;
 2253 0810 28 1A                JR      Z,L082C         ; to TEST-LOW
 2254 0812
 2255 0812              ;; TEST-N/L
 2256 0812 3E 76        L0812:  LD      A,$76           ;
 2257 0814 BA                   CP      D               ;
 2258 0815 28 30                JR      Z,L0847         ; to WRITE-N/L
 2259 0817
 2260 0817 2A 0E 40             LD      HL,($400E)      ; sv DF_CC_lo
 2261 081A BE                   CP      (HL)            ;
 2262 081B 7A                   LD      A,D             ;
 2263 081C 20 20                JR      NZ,L083E        ; to WRITE-CH
 2264 081E
 2265 081E 0D                   DEC     C               ;
 2266 081F 20 19                JR      NZ,L083A        ; to EXPAND-1
 2267 0821
 2268 0821 23                   INC     HL              ;
 2269 0822 22 0E 40             LD       ($400E),HL     ; sv DF_CC_lo
 2270 0825 0E 21                LD      C,$21           ;
 2271 0827 05                   DEC     B               ;
 2272 0828 ED 43 39 40          LD      ($4039),BC      ; sv S_POSN_x
 2273 082C
 2274 082C              ;; TEST-LOW
 2275 082C 78           L082C:  LD      A,B             ;
 2276 082D FD BE 22             CP      (IY+$22)        ; sv DF_SZ
 2277 0830 28 03                JR      Z,L0835         ; to REPORT-5
 2278 0832
 2279 0832 A7                   AND     A               ;
 2280 0833 20 DD                JR      NZ,L0812        ; to TEST-N/L
 2281 0835
 2282 0835              ;; REPORT-5
 2283 0835 2E 04        L0835:  LD      L,$04           ; 'No more room on screen'
 2284 0837 C3 58 00             JP      L0058           ; to ERROR-3
 2285 083A
 2286 083A              ; ---
 2287 083A
 2288 083A              ;; EXPAND-1
 2289 083A CD 9B 09     L083A:  CALL    L099B           ; routine ONE-SPACE
 2290 083D EB                   EX      DE,HL           ;
 2291 083E
 2292 083E              ;; WRITE-CH
 2293 083E 77           L083E:  LD      (HL),A          ;
 2294 083F 23                   INC     HL              ;
 2295 0840 22 0E 40             LD      ($400E),HL      ; sv DF_CC_lo
 2296 0843 FD 35 39             DEC     (IY+$39)        ; sv S_POSN_x
 2297 0846 C9                   RET                     ;
 2298 0847
 2299 0847              ; ---
 2300 0847
 2301 0847              ;; WRITE-N/L
 2302 0847 0E 21        L0847:  LD      C,$21           ;
 2303 0849 05                   DEC     B               ;
 2304 084A FD CB 01 C6          SET     0,(IY+$01)      ; sv FLAGS  - Suppress leading space
 2305 084E C3 18 09             JP      L0918           ; to LOC-ADDR
 2306 0851
 2307 0851              ; --------------------------
 2308 0851              ; THE 'LPRINT-CH' SUBROUTINE
 2309 0851              ; --------------------------
 2310 0851              ; This routine sends a character to the ZX-Printer placing the code for the
 2311 0851              ; character in the Printer Buffer.
 2312 0851              ; Note. PR-CC contains the low byte of the buffer address. The high order byte
 2313 0851              ; is always constant.
 2314 0851
 2315 0851
 2316 0851              ;; LPRINT-CH
 2317 0851 FE 76        L0851:  CP      $76             ; compare to NEWLINE.
 2318 0853 28 1C                JR      Z,L0871         ; forward if so to COPY-BUFF
 2319 0855
 2320 0855 4F                   LD      C,A             ; take a copy of the character in C.
 2321 0856 3A 38 40             LD      A,($4038)       ; fetch print location from PR_CC
 2322 0859 E6 7F                AND     $7F             ; ignore bit 7 to form true position.
 2323 085B FE 5C                CP      $5C             ; compare to 33rd location
 2324 085D
 2325 085D 6F                   LD      L,A             ; form low-order byte.
 2326 085E 26 40                LD      H,$40           ; the high-order byte is fixed.
 2327 0860
 2328 0860 CC 71 08             CALL    Z,L0871         ; routine COPY-BUFF to send full buffer to
 2329 0863                                              ; the printer if first 32 bytes full.
 2330 0863                                              ; (this will reset HL to start.)
 2331 0863
 2332 0863 71                   LD      (HL),C          ; place character at location.
 2333 0864 2C                   INC     L               ; increment - will not cross a 256 boundary.
 2334 0865 FD 75 38             LD      (IY+$38),L      ; update system variable PR_CC
 2335 0868                                              ; automatically resetting bit 7 to show that
 2336 0868                                              ; the buffer is not empty.
 2337 0868 C9                   RET                     ; return.
 2338 0869
 2339 0869              ; --------------------------
 2340 0869              ; THE 'COPY' COMMAND ROUTINE
 2341 0869              ; --------------------------
 2342 0869              ; The full character-mapped screen is copied to the ZX-Printer.
 2343 0869              ; All twenty-four text/graphic lines are printed.
 2344 0869
 2345 0869              ;; COPY
 2346 0869 16 16        L0869:  LD      D,$16           ; prepare to copy twenty four text lines.
 2347 086B 2A 0C 40             LD      HL,($400C)      ; set HL to start of display file from D_FILE.
 2348 086E 23                   INC     HL              ;
 2349 086F 18 05                JR      L0876           ; forward to COPY*D
 2350 0871
 2351 0871              ; ---
 2352 0871
 2353 0871              ; A single character-mapped printer buffer is copied to the ZX-Printer.
 2354 0871
 2355 0871              ;; COPY-BUFF
 2356 0871 16 01        L0871:  LD      D,$01           ; prepare to copy a single text line.
 2357 0873 21 3C 40             LD      HL,$403C        ; set HL to start of printer buffer PRBUFF.
 2358 0876
 2359 0876              ; both paths converge here.
 2360 0876
 2361 0876              ;; COPY*D
 2362 0876 CD E7 02     L0876:  CALL    L02E7           ; routine SET-FAST
 2363 0879
 2364 0879 C5                   PUSH    BC              ; *** preserve BC throughout.
 2365 087A                                              ; a pending character may be present
 2366 087A                                              ; in C from LPRINT-CH
 2367 087A
 2368 087A              ;; COPY-LOOP
 2369 087A E5           L087A:  PUSH    HL              ; save first character of line pointer. (*)
 2370 087B AF                   XOR     A               ; clear accumulator.
 2371 087C 5F                   LD      E,A             ; set pixel line count, range 0-7, to zero.
 2372 087D
 2373 087D              ; this inner loop deals with each horizontal pixel line.
 2374 087D
 2375 087D              ;; COPY-TIME
 2376 087D D3 FB        L087D:  OUT     ($FB),A         ; bit 2 reset starts the printer motor
 2377 087F                                              ; with an inactive stylus - bit 7 reset.
 2378 087F E1                   POP     HL              ; pick up first character of line pointer (*)
 2379 0880                                              ; on inner loop.
 2380 0880
 2381 0880              ;; COPY-BRK
 2382 0880 CD 46 0F     L0880:  CALL    L0F46           ; routine BREAK-1
 2383 0883 38 05                JR      C,L088A         ; forward with no keypress to COPY-CONT
 2384 0885
 2385 0885              ; else A will hold 11111111 0
 2386 0885
 2387 0885 1F                   RRA                     ; 0111 1111
 2388 0886 D3 FB                OUT     ($FB),A         ; stop ZX printer motor, de-activate stylus.
 2389 0888
 2390 0888              ;; REPORT-D2
 2391 0888 CF           L0888:  RST     08H             ; ERROR-1
 2392 0889 0C                   DEFB    $0C             ; Error Report: BREAK - CONT repeats
 2393 088A
 2394 088A              ; ---
 2395 088A
 2396 088A              ;; COPY-CONT
 2397 088A DB FB        L088A:  IN      A,($FB)         ; read from printer port.
 2398 088C 87                   ADD     A,A             ; test bit 6 and 7
 2399 088D FA DE 08             JP      M,L08DE         ; jump forward with no printer to COPY-END
 2400 0890
 2401 0890 30 EE                JR      NC,L0880        ; back if stylus not in position to COPY-BRK
 2402 0892
 2403 0892 E5                   PUSH    HL              ; save first character of line pointer (*)
 2404 0893 D5                   PUSH    DE              ; ** preserve character line and pixel line.
 2405 0894
 2406 0894 7A                   LD      A,D             ; text line count to A?
 2407 0895 FE 02                CP      $02             ; sets carry if last line.
 2408 0897 9F                   SBC     A,A             ; now $FF if last line else zero.
 2409 0898
 2410 0898              ; now cleverly prepare a printer control mask setting bit 2 (later moved to 1)
 2411 0898              ; of D to slow printer for the last two pixel lines ( E = 6 and 7)
 2412 0898
 2413 0898 A3                   AND     E               ; and with pixel line offset 0-7
 2414 0899 07                   RLCA                    ; shift to left.
 2415 089A A3                   AND     E               ; and again.
 2416 089B 57                   LD      D,A             ; store control mask in D.
 2417 089C
 2418 089C              ;; COPY-NEXT
 2419 089C 4E           L089C:  LD      C,(HL)          ; load character from screen or buffer.
 2420 089D 79                   LD      A,C             ; save a copy in C for later inverse test.
 2421 089E 23                   INC     HL              ; update pointer for next time.
 2422 089F FE 76                CP      $76             ; is character a NEWLINE ?
 2423 08A1 28 24                JR      Z,L08C7         ; forward, if so, to COPY-N/L
 2424 08A3
 2425 08A3 E5                   PUSH    HL              ; * else preserve the character pointer.
 2426 08A4
 2427 08A4 CB 27                SLA     A               ; (?) multiply by two
 2428 08A6 87                   ADD     A,A             ; multiply by four
 2429 08A7 87                   ADD     A,A             ; multiply by eight
 2430 08A8
 2431 08A8 26 0F                LD      H,$0F           ; load H with half the address of character set.
 2432 08AA CB 14                RL      H               ; now $1E or $1F (with carry)
 2433 08AC 83                   ADD     A,E             ; add byte offset 0-7
 2434 08AD 6F                   LD      L,A             ; now HL addresses character source byte
 2435 08AE
 2436 08AE CB 11                RL      C               ; test character, setting carry if inverse.
 2437 08B0 9F                   SBC     A,A             ; accumulator now $00 if normal, $FF if inverse.
 2438 08B1
 2439 08B1 AE                   XOR     (HL)            ; combine with bit pattern at end or ROM.
 2440 08B2 4F                   LD      C,A             ; transfer the byte to C.
 2441 08B3 06 08                LD      B,$08           ; count eight bits to output.
 2442 08B5
 2443 08B5              ;; COPY-BITS
 2444 08B5 7A           L08B5:  LD      A,D             ; fetch speed control mask from D.
 2445 08B6 CB 01                RLC     C               ; rotate a bit from output byte to carry.
 2446 08B8 1F                   RRA                     ; pick up in bit 7, speed bit to bit 1
 2447 08B9 67                   LD      H,A             ; store aligned mask in H register.
 2448 08BA
 2449 08BA              ;; COPY-WAIT
 2450 08BA DB FB        L08BA:  IN      A,($FB)         ; read the printer port
 2451 08BC 1F                   RRA                     ; test for alignment signal from encoder.
 2452 08BD 30 FB                JR      NC,L08BA        ; loop if not present to COPY-WAIT
 2453 08BF
 2454 08BF 7C                   LD      A,H             ; control byte to A.
 2455 08C0 D3 FB                OUT     ($FB),A         ; and output to printer port.
 2456 08C2 10 F1                DJNZ    L08B5           ; loop for all eight bits to COPY-BITS
 2457 08C4
 2458 08C4 E1                   POP     HL              ; * restore character pointer.
 2459 08C5 18 D5                JR      L089C           ; back for adjacent character line to COPY-NEXT
 2460 08C7
 2461 08C7              ; ---
 2462 08C7
 2463 08C7              ; A NEWLINE has been encountered either following a text line or as the
 2464 08C7              ; first character of the screen or printer line.
 2465 08C7
 2466 08C7              ;; COPY-N/L
 2467 08C7 DB FB        L08C7:  IN      A,($FB)         ; read printer port.
 2468 08C9 1F                   RRA                     ; wait for encoder signal.
 2469 08CA 30 FB                JR      NC,L08C7        ; loop back if not to COPY-N/L
 2470 08CC
 2471 08CC 7A                   LD      A,D             ; transfer speed mask to A.
 2472 08CD 0F                   RRCA                    ; rotate speed bit to bit 1.
 2473 08CE                                              ; bit 7, stylus control is reset.
 2474 08CE D3 FB                OUT     ($FB),A         ; set the printer speed.
 2475 08D0
 2476 08D0 D1                   POP     DE              ; ** restore character line and pixel line.
 2477 08D1 1C                   INC     E               ; increment pixel line 0-7.
 2478 08D2 CB 5B                BIT     3,E             ; test if value eight reached.
 2479 08D4 28 A7                JR      Z,L087D         ; back if not to COPY-TIME
 2480 08D6
 2481 08D6              ; eight pixel lines, a text line have been completed.
 2482 08D6
 2483 08D6 C1                   POP     BC              ; lose the now redundant first character
 2484 08D7                                              ; pointer
 2485 08D7 15                   DEC     D               ; decrease text line count.
 2486 08D8 20 A0                JR      NZ,L087A        ; back if not zero to COPY-LOOP
 2487 08DA
 2488 08DA 3E 04                LD      A,$04           ; stop the already slowed printer motor.
 2489 08DC D3 FB                OUT     ($FB),A         ; output to printer port.
 2490 08DE
 2491 08DE              ;; COPY-END
 2492 08DE CD 07 02     L08DE:  CALL    L0207           ; routine SLOW/FAST
 2493 08E1 C1                   POP     BC              ; *** restore preserved BC.
 2494 08E2
 2495 08E2              ; -------------------------------------
 2496 08E2              ; THE 'CLEAR PRINTER BUFFER' SUBROUTINE
 2497 08E2              ; -------------------------------------
 2498 08E2              ; This subroutine sets 32 bytes of the printer buffer to zero (space) and
 2499 08E2              ; the 33rd character is set to a NEWLINE.
 2500 08E2              ; This occurs after the printer buffer is sent to the printer but in addition
 2501 08E2              ; after the 24 lines of the screen are sent to the printer.
 2502 08E2              ; Note. This is a logic error as the last operation does not involve the
 2503 08E2              ; buffer at all. Logically one should be able to use
 2504 08E2              ; 10 LPRINT "HELLO ";
 2505 08E2              ; 20 COPY
 2506 08E2              ; 30 LPRINT ; "WORLD"
 2507 08E2              ; and expect to see the entire greeting emerge from the printer.
 2508 08E2              ; Surprisingly this logic error was never discovered and although one can argue
 2509 08E2              ; if the above is a bug, the repetition of this error on the Spectrum was most
 2510 08E2              ; definitely a bug.
 2511 08E2              ; Since the printer buffer is fixed at the end of the system variables, and
 2512 08E2              ; the print position is in the range $3C - $5C, then bit 7 of the system
 2513 08E2              ; variable is set to show the buffer is empty and automatically reset when
 2514 08E2              ; the variable is updated with any print position - neat.
 2515 08E2
 2516 08E2              ;; CLEAR-PRB
 2517 08E2 21 5C 40     L08E2:  LD      HL,$405C        ; address fixed end of PRBUFF
 2518 08E5 36 76                LD      (HL),$76        ; place a newline at last position.
 2519 08E7 06 20                LD      B,$20           ; prepare to blank 32 preceding characters.
 2520 08E9
 2521 08E9              ;; PRB-BYTES
 2522 08E9 2B           L08E9:  DEC     HL              ; decrement address - could be DEC L.
 2523 08EA 36 00                LD      (HL),$00        ; place a zero byte.
 2524 08EC 10 FB                DJNZ    L08E9           ; loop for all thirty-two to PRB-BYTES
 2525 08EE
 2526 08EE 7D                   LD      A,L             ; fetch character print position.
 2527 08EF CB FF                SET     7,A             ; signal the printer buffer is clear.
 2528 08F1 32 38 40             LD      ($4038),A       ; update one-byte system variable PR_CC
 2529 08F4 C9                   RET                     ; return.
 2530 08F5
 2531 08F5              ; -------------------------
 2532 08F5              ; THE 'PRINT AT' SUBROUTINE
 2533 08F5              ; -------------------------
 2534 08F5              ;
 2535 08F5              ;
 2536 08F5
 2537 08F5              ;; PRINT-AT
 2538 08F5 3E 17        L08F5:  LD      A,$17           ;
 2539 08F7 90                   SUB     B               ;
 2540 08F8 38 0B                JR      C,L0905         ; to WRONG-VAL
 2541 08FA
 2542 08FA              ;; TEST-VAL
 2543 08FA FD BE 22     L08FA:  CP      (IY+$22)        ; sv DF_SZ
 2544 08FD DA 35 08             JP      C,L0835         ; to REPORT-5
 2545 0900
 2546 0900 3C                   INC     A               ;
 2547 0901 47                   LD      B,A             ;
 2548 0902 3E 1F                LD      A,$1F           ;
 2549 0904 91                   SUB     C               ;
 2550 0905
 2551 0905              ;; WRONG-VAL
 2552 0905 DA AD 0E     L0905:  JP      C,L0EAD         ; to REPORT-B
 2553 0908
 2554 0908 C6 02                ADD     A,$02           ;
 2555 090A 4F                   LD      C,A             ;
 2556 090B
 2557 090B              ;; SET-FIELD
 2558 090B FD CB 01 4E  L090B:  BIT     1,(IY+$01)      ; sv FLAGS  - Is printer in use
 2559 090F 28 07                JR      Z,L0918         ; to LOC-ADDR
 2560 0911
 2561 0911 3E 5D                LD      A,$5D           ;
 2562 0913 91                   SUB     C               ;
 2563 0914 32 38 40             LD      ($4038),A       ; sv PR_CC
 2564 0917 C9                   RET                     ;
 2565 0918
 2566 0918              ; ----------------------------
 2567 0918              ; THE 'LOCATE ADDRESS' ROUTINE
 2568 0918              ; ----------------------------
 2569 0918              ;
 2570 0918              ;
 2571 0918
 2572 0918              ;; LOC-ADDR
 2573 0918 ED 43 39 40  L0918:  LD      ($4039),BC      ; sv S_POSN_x
 2574 091C 2A 10 40             LD      HL,($4010)      ; sv VARS_lo
 2575 091F 51                   LD      D,C             ;
 2576 0920 3E 22                LD      A,$22           ;
 2577 0922 91                   SUB     C               ;
 2578 0923 4F                   LD      C,A             ;
 2579 0924 3E 76                LD      A,$76           ;
 2580 0926 04                   INC     B               ;
 2581 0927
 2582 0927              ;; LOOK-BACK
 2583 0927 2B           L0927:  DEC     HL              ;
 2584 0928 BE                   CP      (HL)            ;
 2585 0929 20 FC                JR      NZ,L0927        ; to LOOK-BACK
 2586 092B
 2587 092B 10 FA                DJNZ    L0927           ; to LOOK-BACK
 2588 092D
 2589 092D 23                   INC     HL              ;
 2590 092E ED B1                CPIR                    ;
 2591 0930 2B                   DEC     HL              ;
 2592 0931 22 0E 40             LD      ($400E),HL      ; sv DF_CC_lo
 2593 0934 37                   SCF                     ; Set Carry Flag
 2594 0935 E0                   RET     PO              ;
 2595 0936
 2596 0936 15                   DEC     D               ;
 2597 0937 C8                   RET     Z               ;
 2598 0938
 2599 0938 C5                   PUSH    BC              ;
 2600 0939 CD 9E 09             CALL    L099E           ; routine MAKE-ROOM
 2601 093C C1                   POP     BC              ;
 2602 093D 41                   LD      B,C             ;
 2603 093E 62                   LD      H,D             ;
 2604 093F 6B                   LD       L,E            ;
 2605 0940
 2606 0940              ;; EXPAND-2
 2607 0940 36 00        L0940:  LD      (HL),$00        ;
 2608 0942 2B                   DEC     HL              ;
 2609 0943 10 FB                DJNZ    L0940           ; to EXPAND-2
 2610 0945
 2611 0945 EB                   EX      DE,HL           ;
 2612 0946 23                   INC     HL              ;
 2613 0947 22 0E 40             LD      ($400E),HL      ; sv DF_CC_lo
 2614 094A C9                   RET                     ;
 2615 094B
 2616 094B              ; ------------------------------
 2617 094B              ; THE 'EXPAND TOKENS' SUBROUTINE
 2618 094B              ; ------------------------------
 2619 094B              ;
 2620 094B              ;
 2621 094B
 2622 094B              ;; TOKENS
 2623 094B F5           L094B:  PUSH    AF              ;
 2624 094C CD 75 09             CALL    L0975           ; routine TOKEN-ADD
 2625 094F 30 08                JR      NC,L0959        ; to ALL-CHARS
 2626 0951
 2627 0951 FD CB 01 46          BIT     0,(IY+$01)      ; sv FLAGS  - Leading space if set
 2628 0955 20 02                JR      NZ,L0959        ; to ALL-CHARS
 2629 0957
 2630 0957 AF                   XOR     A               ;
 2631 0958
 2632 0958 D7                   RST     10H             ; PRINT-A
 2633 0959
 2634 0959              ;; ALL-CHARS
 2635 0959 0A           L0959:  LD      A,(BC)          ;
 2636 095A E6 3F                AND     $3F             ;
 2637 095C
 2638 095C D7                   RST     10H             ; PRINT-A
 2639 095D 0A                   LD      A,(BC)          ;
 2640 095E 03                   INC     BC              ;
 2641 095F 87                   ADD     A,A             ;
 2642 0960 30 F7                JR      NC,L0959        ; to ALL-CHARS
 2643 0962
 2644 0962 C1                   POP     BC              ;
 2645 0963 CB 78                BIT     7,B             ;
 2646 0965 C8                   RET     Z               ;
 2647 0966
 2648 0966 FE 1A                CP      $1A             ;
 2649 0968 28 03                JR      Z,L096D         ; to TRAIL-SP
 2650 096A
 2651 096A FE 38                CP      $38             ;
 2652 096C D8                   RET     C               ;
 2653 096D
 2654 096D              ;; TRAIL-SP
 2655 096D AF           L096D:  XOR     A               ;
 2656 096E FD CB 01 C6          SET     0,(IY+$01)      ; sv FLAGS  - Suppress leading space
 2657 0972 C3 F5 07             JP      L07F5           ; to PRINT-SP
 2658 0975
 2659 0975              ; ---
 2660 0975
 2661 0975              ;; TOKEN-ADD
 2662 0975 E5           L0975:  PUSH    HL              ;
 2663 0976 21 11 01             LD      HL,L0111        ; Address of TOKENS
 2664 0979 CB 7F                BIT     7,A             ;
 2665 097B 28 02                JR      Z,L097F         ; to TEST-HIGH
 2666 097D
 2667 097D E6 3F                AND     $3F             ;
 2668 097F
 2669 097F              ;; TEST-HIGH
 2670 097F FE 43        L097F:  CP      $43             ;
 2671 0981 30 10                JR      NC,L0993        ; to FOUND
 2672 0983
 2673 0983 47                   LD      B,A             ;
 2674 0984 04                   INC     B               ;
 2675 0985
 2676 0985              ;; WORDS
 2677 0985 CB 7E        L0985:  BIT     7,(HL)          ;
 2678 0987 23                   INC     HL              ;
 2679 0988 28 FB                JR      Z,L0985         ; to WORDS
 2680 098A
 2681 098A 10 F9                DJNZ    L0985           ; to WORDS
 2682 098C
 2683 098C CB 77                BIT     6,A             ;
 2684 098E 20 02                JR      NZ,L0992        ; to COMP-FLAG
 2685 0990
 2686 0990 FE 18                CP      $18             ;
 2687 0992
 2688 0992              ;; COMP-FLAG
 2689 0992 3F           L0992:  CCF                     ; Complement Carry Flag
 2690 0993
 2691 0993              ;; FOUND
 2692 0993 44           L0993:  LD      B,H             ;
 2693 0994 4D                   LD       C,L            ;
 2694 0995 E1                   POP     HL              ;
 2695 0996 D0                   RET     NC              ;
 2696 0997
 2697 0997 0A                   LD      A,(BC)          ;
 2698 0998 C6 E4                ADD     A,$E4           ;
 2699 099A C9                   RET                     ;
 2700 099B
 2701 099B              ; --------------------------
 2702 099B              ; THE 'ONE SPACE' SUBROUTINE
 2703 099B              ; --------------------------
 2704 099B              ;
 2705 099B              ;
 2706 099B
 2707 099B              ;; ONE-SPACE
 2708 099B 01 01 00     L099B:  LD      BC,$0001        ;
 2709 099E
 2710 099E              ; --------------------------
 2711 099E              ; THE 'MAKE ROOM' SUBROUTINE
 2712 099E              ; --------------------------
 2713 099E              ;
 2714 099E              ;
 2715 099E
 2716 099E              ;; MAKE-ROOM
 2717 099E E5           L099E:  PUSH    HL              ;
 2718 099F CD C5 0E             CALL    L0EC5           ; routine TEST-ROOM
 2719 09A2 E1                   POP     HL              ;
 2720 09A3 CD AD 09             CALL    L09AD           ; routine POINTERS
 2721 09A6 2A 1C 40             LD      HL,($401C)      ; sv STKEND_lo
 2722 09A9 EB                   EX      DE,HL           ;
 2723 09AA ED B8                LDDR                    ; Copy Bytes
 2724 09AC C9                   RET                     ;
 2725 09AD
 2726 09AD              ; -------------------------
 2727 09AD              ; THE 'POINTERS' SUBROUTINE
 2728 09AD              ; -------------------------
 2729 09AD              ;
 2730 09AD              ;
 2731 09AD
 2732 09AD              ;; POINTERS
 2733 09AD F5           L09AD:  PUSH    AF              ;
 2734 09AE E5                   PUSH    HL              ;
 2735 09AF 21 0C 40             LD      HL,$400C        ; sv D_FILE_lo
 2736 09B2 3E 09                LD      A,$09           ;
 2737 09B4
 2738 09B4              ;; NEXT-PTR
 2739 09B4 5E           L09B4:  LD      E,(HL)          ;
 2740 09B5 23                   INC     HL              ;
 2741 09B6 56                   LD      D,(HL)          ;
 2742 09B7 E3                   EX      (SP),HL         ;
 2743 09B8 A7                   AND     A               ;
 2744 09B9 ED 52                SBC     HL,DE           ;
 2745 09BB 19                   ADD     HL,DE           ;
 2746 09BC E3                   EX      (SP),HL         ;
 2747 09BD 30 09                JR      NC,L09C8        ; to PTR-DONE
 2748 09BF
 2749 09BF D5                   PUSH    DE              ;
 2750 09C0 EB                   EX      DE,HL           ;
 2751 09C1 09                   ADD     HL,BC           ;
 2752 09C2 EB                   EX      DE,HL           ;
 2753 09C3 72                   LD      (HL),D          ;
 2754 09C4 2B                   DEC     HL              ;
 2755 09C5 73                   LD      (HL),E          ;
 2756 09C6 23                   INC     HL              ;
 2757 09C7 D1                   POP     DE              ;
 2758 09C8
 2759 09C8              ;; PTR-DONE
 2760 09C8 23           L09C8:  INC     HL              ;
 2761 09C9 3D                   DEC     A               ;
 2762 09CA 20 E8                JR      NZ,L09B4        ; to NEXT-PTR
 2763 09CC
 2764 09CC EB                   EX      DE,HL           ;
 2765 09CD D1                   POP     DE              ;
 2766 09CE F1                   POP     AF              ;
 2767 09CF A7                   AND     A               ;
 2768 09D0 ED 52                SBC     HL,DE           ;
 2769 09D2 44                   LD      B,H             ;
 2770 09D3 4D                   LD      C,L             ;
 2771 09D4 03                   INC     BC              ;
 2772 09D5 19                   ADD     HL,DE           ;
 2773 09D6 EB                   EX      DE,HL           ;
 2774 09D7 C9                   RET                     ;
 2775 09D8
 2776 09D8              ; -----------------------------
 2777 09D8              ; THE 'LINE ADDRESS' SUBROUTINE
 2778 09D8              ; -----------------------------
 2779 09D8              ;
 2780 09D8              ;
 2781 09D8
 2782 09D8              ;; LINE-ADDR
 2783 09D8 E5           L09D8:  PUSH    HL              ;
 2784 09D9 21 7D 40             LD      HL,$407D        ;
 2785 09DC 54                   LD      D,H             ;
 2786 09DD 5D                   LD      E,L             ;
 2787 09DE
 2788 09DE              ;; NEXT-TEST
 2789 09DE C1           L09DE:  POP     BC              ;
 2790 09DF CD EA 09             CALL    L09EA           ; routine CP-LINES
 2791 09E2 D0                   RET     NC              ;
 2792 09E3
 2793 09E3 C5                   PUSH    BC              ;
 2794 09E4 CD F2 09             CALL     L09F2          ; routine NEXT-ONE
 2795 09E7 EB                   EX      DE,HL           ;
 2796 09E8 18 F4                JR      L09DE           ; to NEXT-TEST
 2797 09EA
 2798 09EA              ; -------------------------------------
 2799 09EA              ; THE 'COMPARE LINE NUMBERS' SUBROUTINE
 2800 09EA              ; -------------------------------------
 2801 09EA              ;
 2802 09EA              ;
 2803 09EA
 2804 09EA              ;; CP-LINES
 2805 09EA 7E           L09EA:  LD      A,(HL)          ;
 2806 09EB B8                   CP      B               ;
 2807 09EC C0                   RET     NZ              ;
 2808 09ED
 2809 09ED 23                   INC     HL              ;
 2810 09EE 7E                   LD      A,(HL)          ;
 2811 09EF 2B                   DEC     HL              ;
 2812 09F0 B9                   CP      C               ;
 2813 09F1 C9                   RET                     ;
 2814 09F2
 2815 09F2              ; --------------------------------------
 2816 09F2              ; THE 'NEXT LINE OR VARIABLE' SUBROUTINE
 2817 09F2              ; --------------------------------------
 2818 09F2              ;
 2819 09F2              ;
 2820 09F2
 2821 09F2              ;; NEXT-ONE
 2822 09F2 E5           L09F2:  PUSH    HL              ;
 2823 09F3 7E                   LD      A,(HL)          ;
 2824 09F4 FE 40                CP      $40             ;
 2825 09F6 38 17                JR      C,L0A0F         ; to LINES
 2826 09F8
 2827 09F8 CB 6F                BIT     5,A             ;
 2828 09FA 28 14                JR      Z,L0A10         ; forward to NEXT-O-4
 2829 09FC
 2830 09FC 87                   ADD     A,A             ;
 2831 09FD FA 01 0A             JP      M,L0A01         ; to NEXT+FIVE
 2832 0A00
 2833 0A00 3F                   CCF                     ; Complement Carry Flag
 2834 0A01
 2835 0A01              ;; NEXT+FIVE
 2836 0A01 01 05 00     L0A01:  LD      BC,$0005        ;
 2837 0A04 30 02                JR      NC,L0A08        ; to NEXT-LETT
 2838 0A06
 2839 0A06 0E 11                LD      C,$11           ;
 2840 0A08
 2841 0A08              ;; NEXT-LETT
 2842 0A08 17           L0A08:  RLA                     ;
 2843 0A09 23                   INC     HL              ;
 2844 0A0A 7E                   LD      A,(HL)          ;
 2845 0A0B 30 FB                JR      NC,L0A08        ; to NEXT-LETT
 2846 0A0D
 2847 0A0D 18 06                JR      L0A15           ; to NEXT-ADD
 2848 0A0F
 2849 0A0F              ; ---
 2850 0A0F
 2851 0A0F              ;; LINES
 2852 0A0F 23           L0A0F:  INC     HL              ;
 2853 0A10
 2854 0A10              ;; NEXT-O-4
 2855 0A10 23           L0A10:  INC     HL              ;
 2856 0A11 4E                   LD      C,(HL)          ;
 2857 0A12 23                   INC     HL              ;
 2858 0A13 46                   LD      B,(HL)          ;
 2859 0A14 23                   INC     HL              ;
 2860 0A15
 2861 0A15              ;; NEXT-ADD
 2862 0A15 09           L0A15:  ADD     HL,BC           ;
 2863 0A16 D1                   POP     DE              ;
 2864 0A17
 2865 0A17              ; ---------------------------
 2866 0A17              ; THE 'DIFFERENCE' SUBROUTINE
 2867 0A17              ; ---------------------------
 2868 0A17              ;
 2869 0A17              ;
 2870 0A17
 2871 0A17              ;; DIFFER
 2872 0A17 A7           L0A17:  AND     A               ;
 2873 0A18 ED 52                SBC     HL,DE           ;
 2874 0A1A 44                   LD      B,H             ;
 2875 0A1B 4D                   LD      C,L             ;
 2876 0A1C 19                   ADD     HL,DE           ;
 2877 0A1D EB                   EX      DE,HL           ;
 2878 0A1E C9                   RET                     ;
 2879 0A1F
 2880 0A1F              ; --------------------------
 2881 0A1F              ; THE 'LINE-ENDS' SUBROUTINE
 2882 0A1F              ; --------------------------
 2883 0A1F              ;
 2884 0A1F              ;
 2885 0A1F
 2886 0A1F              ;; LINE-ENDS
 2887 0A1F FD 46 22     L0A1F:  LD      B,(IY+$22)      ; sv DF_SZ
 2888 0A22 C5                   PUSH    BC              ;
 2889 0A23 CD 2C 0A             CALL    L0A2C           ; routine B-LINES
 2890 0A26 C1                   POP     BC              ;
 2891 0A27 05                   DEC     B               ;
 2892 0A28 18 02                JR      L0A2C           ; to B-LINES
 2893 0A2A
 2894 0A2A              ; -------------------------
 2895 0A2A              ; THE 'CLS' COMMAND ROUTINE
 2896 0A2A              ; -------------------------
 2897 0A2A              ;
 2898 0A2A              ;
 2899 0A2A
 2900 0A2A              ;; CLS
 2901 0A2A 06 18        L0A2A:  LD      B,$18           ;
 2902 0A2C
 2903 0A2C              ;; B-LINES
 2904 0A2C FD CB 01 8E  L0A2C:  RES     1,(IY+$01)      ; sv FLAGS  - Signal printer not in use
 2905 0A30 0E 21                LD      C,$21           ;
 2906 0A32 C5                   PUSH    BC              ;
 2907 0A33 CD 18 09             CALL    L0918           ; routine LOC-ADDR
 2908 0A36 C1                   POP     BC              ;
 2909 0A37 3A 05 40             LD      A,($4005)       ; sv RAMTOP_hi
 2910 0A3A FE 4D                CP      $4D             ;
 2911 0A3C 38 14                JR      C,L0A52         ; to COLLAPSED
 2912 0A3E
 2913 0A3E FD CB 3A FE          SET     7,(IY+$3A)      ; sv S_POSN_y
 2914 0A42
 2915 0A42              ;; CLEAR-LOC
 2916 0A42 AF           L0A42:  XOR     A               ; prepare a space
 2917 0A43 CD F5 07             CALL    L07F5           ; routine PRINT-SP prints a space
 2918 0A46 2A 39 40             LD      HL,($4039)      ; sv S_POSN_x
 2919 0A49 7D                   LD      A,L             ;
 2920 0A4A B4                   OR      H               ;
 2921 0A4B E6 7E                AND     $7E             ;
 2922 0A4D 20 F3                JR      NZ,L0A42        ; to CLEAR-LOC
 2923 0A4F
 2924 0A4F C3 18 09             JP      L0918           ; to LOC-ADDR
 2925 0A52
 2926 0A52              ; ---
 2927 0A52
 2928 0A52              ;; COLLAPSED
 2929 0A52 54           L0A52:  LD      D,H             ;
 2930 0A53 5D                   LD      E,L             ;
 2931 0A54 2B                   DEC     HL              ;
 2932 0A55 48                   LD      C,B             ;
 2933 0A56 06 00                LD      B,$00           ;
 2934 0A58 ED B0                LDIR                    ; Copy Bytes
 2935 0A5A 2A 10 40             LD      HL,($4010)      ; sv VARS_lo
 2936 0A5D
 2937 0A5D              ; ----------------------------
 2938 0A5D              ; THE 'RECLAIMING' SUBROUTINES
 2939 0A5D              ; ----------------------------
 2940 0A5D              ;
 2941 0A5D              ;
 2942 0A5D
 2943 0A5D              ;; RECLAIM-1
 2944 0A5D CD 17 0A     L0A5D:  CALL    L0A17           ; routine DIFFER
 2945 0A60
 2946 0A60              ;; RECLAIM-2
 2947 0A60 C5           L0A60:  PUSH    BC              ;
 2948 0A61 78                   LD      A,B             ;
 2949 0A62 2F                   CPL                     ;
 2950 0A63 47                   LD      B,A             ;
 2951 0A64 79                   LD      A,C             ;
 2952 0A65 2F                   CPL                     ;
 2953 0A66 4F                   LD      C,A             ;
 2954 0A67 03                   INC     BC              ;
 2955 0A68 CD AD 09             CALL    L09AD           ; routine POINTERS
 2956 0A6B EB                   EX      DE,HL           ;
 2957 0A6C E1                   POP     HL              ;
 2958 0A6D 19                   ADD     HL,DE           ;
 2959 0A6E D5                   PUSH    DE              ;
 2960 0A6F ED B0                LDIR                    ; Copy Bytes
 2961 0A71 E1                   POP     HL              ;
 2962 0A72 C9                   RET                     ;
 2963 0A73
 2964 0A73              ; ------------------------------
 2965 0A73              ; THE 'E-LINE NUMBER' SUBROUTINE
 2966 0A73              ; ------------------------------
 2967 0A73              ;
 2968 0A73              ;
 2969 0A73
 2970 0A73              ;; E-LINE-NO
 2971 0A73 2A 14 40     L0A73:  LD      HL,($4014)      ; sv E_LINE_lo
 2972 0A76 CD 4D 00             CALL    L004D           ; routine TEMP-PTR-2
 2973 0A79
 2974 0A79 DF                   RST     18H             ; GET-CHAR
 2975 0A7A FD CB 2D 6E          BIT     5,(IY+$2D)      ; sv FLAGX
 2976 0A7E C0                   RET     NZ              ;
 2977 0A7F
 2978 0A7F 21 5D 40             LD      HL,$405D        ; sv MEM-0-1st
 2979 0A82 22 1C 40             LD      ($401C),HL      ; sv STKEND_lo
 2980 0A85 CD 48 15             CALL    L1548           ; routine INT-TO-FP
 2981 0A88 CD 8A 15             CALL    L158A           ; routine FP-TO-BC
 2982 0A8B 38 04                JR      C,L0A91         ; to NO-NUMBER
 2983 0A8D
 2984 0A8D 21 F0 D8             LD      HL,$D8F0        ; value '-10000'
 2985 0A90 09                   ADD     HL,BC           ;
 2986 0A91
 2987 0A91              ;; NO-NUMBER
 2988 0A91 DA 9A 0D     L0A91:  JP      C,L0D9A         ; to REPORT-C
 2989 0A94
 2990 0A94 BF                   CP      A               ;
 2991 0A95 C3 BC 14             JP      L14BC           ; routine SET-MIN
 2992 0A98
 2993 0A98              ; -------------------------------------------------
 2994 0A98              ; THE 'REPORT AND LINE NUMBER' PRINTING SUBROUTINES
 2995 0A98              ; -------------------------------------------------
 2996 0A98              ;
 2997 0A98              ;
 2998 0A98
 2999 0A98              ;; OUT-NUM
 3000 0A98 D5           L0A98:  PUSH    DE              ;
 3001 0A99 E5                   PUSH    HL              ;
 3002 0A9A AF                   XOR     A               ;
 3003 0A9B CB 78                BIT     7,B             ;
 3004 0A9D 20 20                JR      NZ,L0ABF        ; to UNITS
 3005 0A9F
 3006 0A9F 60                   LD       H,B            ;
 3007 0AA0 69                   LD      L,C             ;
 3008 0AA1 1E FF                LD      E,$FF           ;
 3009 0AA3 18 08                JR      L0AAD           ; to THOUSAND
 3010 0AA5
 3011 0AA5              ; ---
 3012 0AA5
 3013 0AA5              ;; OUT-NO
 3014 0AA5 D5           L0AA5:  PUSH    DE              ;
 3015 0AA6 56                   LD      D,(HL)          ;
 3016 0AA7 23                   INC     HL              ;
 3017 0AA8 5E                   LD      E,(HL)          ;
 3018 0AA9 E5                   PUSH    HL              ;
 3019 0AAA EB                   EX      DE,HL           ;
 3020 0AAB 1E 00                LD      E,$00           ; set E to leading space.
 3021 0AAD
 3022 0AAD              ;; THOUSAND
 3023 0AAD 01 18 FC     L0AAD:  LD      BC,$FC18        ;
 3024 0AB0 CD E1 07             CALL    L07E1           ; routine OUT-DIGIT
 3025 0AB3 01 9C FF             LD      BC,$FF9C        ;
 3026 0AB6 CD E1 07             CALL    L07E1           ; routine OUT-DIGIT
 3027 0AB9 0E F6                LD      C,$F6           ;
 3028 0ABB CD E1 07             CALL    L07E1           ; routine OUT-DIGIT
 3029 0ABE 7D                   LD      A,L             ;
 3030 0ABF
 3031 0ABF              ;; UNITS
 3032 0ABF CD EB 07     L0ABF:  CALL    L07EB           ; routine OUT-CODE
 3033 0AC2 E1                   POP     HL              ;
 3034 0AC3 D1                   POP     DE              ;
 3035 0AC4 C9                   RET                     ;
 3036 0AC5
 3037 0AC5              ; --------------------------
 3038 0AC5              ; THE 'UNSTACK-Z' SUBROUTINE
 3039 0AC5              ; --------------------------
 3040 0AC5              ; This subroutine is used to return early from a routine when checking syntax.
 3041 0AC5              ; On the ZX81 the same routines that execute commands also check the syntax
 3042 0AC5              ; on line entry. This enables precise placement of the error marker in a line
 3043 0AC5              ; that fails syntax.
 3044 0AC5              ; The sequence CALL SYNTAX-Z ; RET Z can be replaced by a call to this routine
 3045 0AC5              ; although it has not replaced every occurrence of the above two instructions.
 3046 0AC5              ; Even on the ZX-80 this routine was not fully utilized.
 3047 0AC5
 3048 0AC5              ;; UNSTACK-Z
 3049 0AC5 CD A6 0D     L0AC5:  CALL    L0DA6           ; routine SYNTAX-Z resets the ZERO flag if
 3050 0AC8                                              ; checking syntax.
 3051 0AC8 E1                   POP     HL              ; drop the return address.
 3052 0AC9 C8                   RET     Z               ; return to previous calling routine if
 3053 0ACA                                              ; checking syntax.
 3054 0ACA
 3055 0ACA E9                   JP      (HL)            ; else jump to the continuation address in
 3056 0ACB                                              ; the calling routine as RET would have done.
 3057 0ACB
 3058 0ACB              ; ----------------------------
 3059 0ACB              ; THE 'LPRINT' COMMAND ROUTINE
 3060 0ACB              ; ----------------------------
 3061 0ACB              ;
 3062 0ACB              ;
 3063 0ACB
 3064 0ACB              ;; LPRINT
 3065 0ACB FD CB 01 CE  L0ACB:  SET     1,(IY+$01)      ; sv FLAGS  - Signal printer in use
 3066 0ACF
 3067 0ACF              ; ---------------------------
 3068 0ACF              ; THE 'PRINT' COMMAND ROUTINE
 3069 0ACF              ; ---------------------------
 3070 0ACF              ;
 3071 0ACF              ;
 3072 0ACF
 3073 0ACF              ;; PRINT
 3074 0ACF 7E           L0ACF:  LD      A,(HL)          ;
 3075 0AD0 FE 76                CP      $76             ;
 3076 0AD2 CA 84 0B             JP      Z,L0B84         ; to PRINT-END
 3077 0AD5
 3078 0AD5              ;; PRINT-1
 3079 0AD5 D6 1A        L0AD5:  SUB     $1A             ;
 3080 0AD7 CE 00                ADC     A,$00           ;
 3081 0AD9 28 69                JR      Z,L0B44         ; to SPACING
 3082 0ADB
 3083 0ADB FE A7                CP      $A7             ;
 3084 0ADD 20 1B                JR      NZ,L0AFA        ; to NOT-AT
 3085 0ADF
 3086 0ADF
 3087 0ADF E7                   RST     20H             ; NEXT-CHAR
 3088 0AE0 CD 92 0D             CALL    L0D92           ; routine CLASS-6
 3089 0AE3 FE 1A                CP      $1A             ;
 3090 0AE5 C2 9A 0D             JP      NZ,L0D9A        ; to REPORT-C
 3091 0AE8
 3092 0AE8
 3093 0AE8 E7                   RST     20H             ; NEXT-CHAR
 3094 0AE9 CD 92 0D             CALL    L0D92           ; routine CLASS-6
 3095 0AEC CD 4E 0B             CALL    L0B4E           ; routine SYNTAX-ON
 3096 0AEF
 3097 0AEF EF                   RST     28H             ;; FP-CALC
 3098 0AF0 01                   DEFB    $01             ;;exchange
 3099 0AF1 34                   DEFB    $34             ;;end-calc
 3100 0AF2
 3101 0AF2 CD F5 0B             CALL    L0BF5           ; routine STK-TO-BC
 3102 0AF5 CD F5 08             CALL    L08F5           ; routine PRINT-AT
 3103 0AF8 18 3D                JR      L0B37           ; to PRINT-ON
 3104 0AFA
 3105 0AFA              ; ---
 3106 0AFA
 3107 0AFA              ;; NOT-AT
 3108 0AFA FE A8        L0AFA:  CP      $A8             ;
 3109 0AFC 20 33                JR      NZ,L0B31        ; to NOT-TAB
 3110 0AFE
 3111 0AFE
 3112 0AFE E7                   RST     20H             ; NEXT-CHAR
 3113 0AFF CD 92 0D             CALL    L0D92           ; routine CLASS-6
 3114 0B02 CD 4E 0B             CALL    L0B4E           ; routine SYNTAX-ON
 3115 0B05 CD 02 0C             CALL    L0C02           ; routine STK-TO-A
 3116 0B08 C2 AD 0E             JP      NZ,L0EAD        ; to REPORT-B
 3117 0B0B
 3118 0B0B E6 1F                AND     $1F             ;
 3119 0B0D 4F                   LD      C,A             ;
 3120 0B0E FD CB 01 4E          BIT     1,(IY+$01)      ; sv FLAGS  - Is printer in use
 3121 0B12 28 0A                JR      Z,L0B1E         ; to TAB-TEST
 3122 0B14
 3123 0B14 FD 96 38             SUB     (IY+$38)        ; sv PR_CC
 3124 0B17 CB FF                SET     7,A             ;
 3125 0B19 C6 3C                ADD     A,$3C           ;
 3126 0B1B D4 71 08             CALL    NC,L0871        ; routine COPY-BUFF
 3127 0B1E
 3128 0B1E              ;; TAB-TEST
 3129 0B1E FD 86 39     L0B1E:  ADD     A,(IY+$39)      ; sv S_POSN_x
 3130 0B21 FE 21                CP      $21             ;
 3131 0B23 3A 3A 40             LD      A,($403A)       ; sv S_POSN_y
 3132 0B26 DE 01                SBC     A,$01           ;
 3133 0B28 CD FA 08             CALL    L08FA           ; routine TEST-VAL
 3134 0B2B FD CB 01 C6          SET     0,(IY+$01)      ; sv FLAGS  - Suppress leading space
 3135 0B2F 18 06                JR      L0B37           ; to PRINT-ON
 3136 0B31
 3137 0B31              ; ---
 3138 0B31
 3139 0B31              ;; NOT-TAB
 3140 0B31 CD 55 0F     L0B31:  CALL    L0F55           ; routine SCANNING
 3141 0B34 CD 55 0B             CALL    L0B55           ; routine PRINT-STK
 3142 0B37
 3143 0B37              ;; PRINT-ON
 3144 0B37 DF           L0B37:  RST     18H             ; GET-CHAR
 3145 0B38 D6 1A                SUB     $1A             ;
 3146 0B3A CE 00                ADC     A,$00           ;
 3147 0B3C 28 06                JR      Z,L0B44         ; to SPACING
 3148 0B3E
 3149 0B3E CD 1D 0D             CALL    L0D1D           ; routine CHECK-END
 3150 0B41 C3 84 0B             JP      L0B84           ;;; to PRINT-END
 3151 0B44
 3152 0B44              ; ---
 3153 0B44
 3154 0B44              ;; SPACING
 3155 0B44 D4 8B 0B     L0B44:  CALL    NC,L0B8B        ; routine FIELD
 3156 0B47
 3157 0B47 E7                   RST     20H             ; NEXT-CHAR
 3158 0B48 FE 76                CP      $76             ;
 3159 0B4A C8                   RET     Z               ;
 3160 0B4B
 3161 0B4B C3 D5 0A             JP      L0AD5           ;;; to PRINT-1
 3162 0B4E
 3163 0B4E              ; ---
 3164 0B4E
 3165 0B4E              ;; SYNTAX-ON
 3166 0B4E CD A6 0D     L0B4E:  CALL    L0DA6           ; routine SYNTAX-Z
 3167 0B51 C0                   RET     NZ              ;
 3168 0B52
 3169 0B52 E1                   POP     HL              ;
 3170 0B53 18 E2                JR      L0B37           ; to PRINT-ON
 3171 0B55
 3172 0B55              ; ---
 3173 0B55
 3174 0B55              ;; PRINT-STK
 3175 0B55 CD C5 0A     L0B55:  CALL    L0AC5           ; routine UNSTACK-Z
 3176 0B58 FD CB 01 76          BIT     6,(IY+$01)      ; sv FLAGS  - Numeric or string result?
 3177 0B5C CC F8 13             CALL    Z,L13F8         ; routine STK-FETCH
 3178 0B5F 28 0A                JR      Z,L0B6B         ; to PR-STR-4
 3179 0B61
 3180 0B61 C3 DB 15             JP      L15DB           ; jump forward to PRINT-FP
 3181 0B64
 3182 0B64              ; ---
 3183 0B64
 3184 0B64              ;; PR-STR-1
 3185 0B64 3E 0B        L0B64:  LD      A,$0B           ;
 3186 0B66
 3187 0B66              ;; PR-STR-2
 3188 0B66 D7           L0B66:  RST     10H             ; PRINT-A
 3189 0B67
 3190 0B67              ;; PR-STR-3
 3191 0B67 ED 5B 18 40  L0B67:  LD      DE,($4018)      ; sv X_PTR_lo
 3192 0B6B
 3193 0B6B              ;; PR-STR-4
 3194 0B6B 78           L0B6B:  LD      A,B             ;
 3195 0B6C B1                   OR      C               ;
 3196 0B6D 0B                   DEC     BC              ;
 3197 0B6E C8                   RET     Z               ;
 3198 0B6F
 3199 0B6F 1A                   LD      A,(DE)          ;
 3200 0B70 13                   INC     DE              ;
 3201 0B71 ED 53 18 40          LD      ($4018),DE      ; sv X_PTR_lo
 3202 0B75 CB 77                BIT      6,A            ;
 3203 0B77 28 ED                JR      Z,L0B66         ; to PR-STR-2
 3204 0B79
 3205 0B79 FE C0                CP      $C0             ;
 3206 0B7B 28 E7                JR      Z,L0B64         ; to PR-STR-1
 3207 0B7D
 3208 0B7D C5                   PUSH    BC              ;
 3209 0B7E CD 4B 09             CALL    L094B           ; routine TOKENS
 3210 0B81 C1                   POP     BC              ;
 3211 0B82 18 E3                JR      L0B67           ; to PR-STR-3
 3212 0B84
 3213 0B84              ; ---
 3214 0B84
 3215 0B84              ;; PRINT-END
 3216 0B84 CD C5 0A     L0B84:  CALL    L0AC5           ; routine UNSTACK-Z
 3217 0B87 3E 76                LD      A,$76           ;
 3218 0B89
 3219 0B89 D7                   RST     10H             ; PRINT-A
 3220 0B8A C9                   RET                     ;
 3221 0B8B
 3222 0B8B              ; ---
 3223 0B8B
 3224 0B8B              ;; FIELD
 3225 0B8B CD C5 0A     L0B8B:  CALL    L0AC5           ; routine UNSTACK-Z
 3226 0B8E FD CB 01 C6          SET     0,(IY+$01)      ; sv FLAGS  - Suppress leading space
 3227 0B92 AF                   XOR     A               ;
 3228 0B93
 3229 0B93 D7                   RST     10H             ; PRINT-A
 3230 0B94 ED 4B 39 40          LD      BC,($4039)      ; sv S_POSN_x
 3231 0B98 79                   LD      A,C             ;
 3232 0B99 FD CB 01 4E          BIT     1,(IY+$01)      ; sv FLAGS  - Is printer in use
 3233 0B9D 28 05                JR      Z,L0BA4         ; to CENTRE
 3234 0B9F
 3235 0B9F 3E 5D                LD      A,$5D           ;
 3236 0BA1 FD 96 38             SUB     (IY+$38)        ; sv PR_CC
 3237 0BA4
 3238 0BA4              ;; CENTRE
 3239 0BA4 0E 11        L0BA4:  LD      C,$11           ;
 3240 0BA6 B9                   CP      C               ;
 3241 0BA7 30 02                JR      NC,L0BAB        ; to RIGHT
 3242 0BA9
 3243 0BA9 0E 01                LD      C,$01           ;
 3244 0BAB
 3245 0BAB              ;; RIGHT
 3246 0BAB CD 0B 09     L0BAB:  CALL    L090B           ; routine SET-FIELD
 3247 0BAE C9                   RET                     ;
 3248 0BAF
 3249 0BAF              ; --------------------------------------
 3250 0BAF              ; THE 'PLOT AND UNPLOT' COMMAND ROUTINES
 3251 0BAF              ; --------------------------------------
 3252 0BAF              ;
 3253 0BAF              ;
 3254 0BAF
 3255 0BAF              ;; PLOT/UNP
 3256 0BAF CD F5 0B     L0BAF:  CALL    L0BF5           ; routine STK-TO-BC
 3257 0BB2 ED 43 36 40          LD      ($4036),BC      ; sv COORDS_x
 3258 0BB6 3E 2B                LD      A,$2B           ;
 3259 0BB8 90                   SUB     B               ;
 3260 0BB9 DA AD 0E             JP      C,L0EAD         ; to REPORT-B
 3261 0BBC
 3262 0BBC 47                   LD      B,A             ;
 3263 0BBD 3E 01                LD      A,$01           ;
 3264 0BBF CB 28                SRA     B               ;
 3265 0BC1 30 02                JR      NC,L0BC5        ; to COLUMNS
 3266 0BC3
 3267 0BC3 3E 04                LD      A,$04           ;
 3268 0BC5
 3269 0BC5              ;; COLUMNS
 3270 0BC5 CB 29        L0BC5:  SRA     C               ;
 3271 0BC7 30 01                JR      NC,L0BCA        ; to FIND-ADDR
 3272 0BC9
 3273 0BC9 07                   RLCA                    ;
 3274 0BCA
 3275 0BCA              ;; FIND-ADDR
 3276 0BCA F5           L0BCA:  PUSH    AF              ;
 3277 0BCB CD F5 08             CALL    L08F5           ; routine PRINT-AT
 3278 0BCE 7E                   LD      A,(HL)          ;
 3279 0BCF 07                   RLCA                    ;
 3280 0BD0 FE 10                CP      $10             ;
 3281 0BD2 30 06                JR      NC,L0BDA        ; to TABLE-PTR
 3282 0BD4
 3283 0BD4 0F                   RRCA                    ;
 3284 0BD5 30 02                JR      NC,L0BD9        ; to SQ-SAVED
 3285 0BD7
 3286 0BD7 EE 8F                XOR     $8F             ;
 3287 0BD9
 3288 0BD9              ;; SQ-SAVED
 3289 0BD9 47           L0BD9:  LD      B,A             ;
 3290 0BDA
 3291 0BDA              ;; TABLE-PTR
 3292 0BDA 11 9E 0C     L0BDA:  LD      DE,L0C9E        ; Address: P-UNPLOT
 3293 0BDD 3A 30 40             LD      A,($4030)       ; sv T_ADDR_lo
 3294 0BE0 93                   SUB     E               ;
 3295 0BE1 FA E9 0B             JP      M,L0BE9         ; to PLOT
 3296 0BE4
 3297 0BE4 F1                   POP     AF              ;
 3298 0BE5 2F                   CPL                     ;
 3299 0BE6 A0                   AND     B               ;
 3300 0BE7 18 02                JR      L0BEB           ; to UNPLOT
 3301 0BE9
 3302 0BE9              ; ---
 3303 0BE9
 3304 0BE9              ;; PLOT
 3305 0BE9 F1           L0BE9:  POP     AF              ;
 3306 0BEA B0                   OR      B               ;
 3307 0BEB
 3308 0BEB              ;; UNPLOT
 3309 0BEB FE 08        L0BEB:  CP      $08             ;
 3310 0BED 38 02                JR      C,L0BF1         ; to PLOT-END
 3311 0BEF
 3312 0BEF EE 8F                XOR     $8F             ;
 3313 0BF1
 3314 0BF1              ;; PLOT-END
 3315 0BF1 D9           L0BF1:  EXX                     ;
 3316 0BF2
 3317 0BF2 D7                   RST     10H             ; PRINT-A
 3318 0BF3 D9                   EXX                     ;
 3319 0BF4 C9                   RET                     ;
 3320 0BF5
 3321 0BF5              ; ----------------------------
 3322 0BF5              ; THE 'STACK-TO-BC' SUBROUTINE
 3323 0BF5              ; ----------------------------
 3324 0BF5              ;
 3325 0BF5              ;
 3326 0BF5
 3327 0BF5              ;; STK-TO-BC
 3328 0BF5 CD 02 0C     L0BF5:  CALL    L0C02           ; routine STK-TO-A
 3329 0BF8 47                   LD      B,A             ;
 3330 0BF9 C5                   PUSH    BC              ;
 3331 0BFA CD 02 0C             CALL    L0C02           ; routine STK-TO-A
 3332 0BFD 59                   LD      E,C             ;
 3333 0BFE C1                   POP     BC              ;
 3334 0BFF 51                   LD      D,C             ;
 3335 0C00 4F                   LD      C,A             ;
 3336 0C01 C9                   RET                     ;
 3337 0C02
 3338 0C02              ; ---------------------------
 3339 0C02              ; THE 'STACK-TO-A' SUBROUTINE
 3340 0C02              ; ---------------------------
 3341 0C02              ;
 3342 0C02              ;
 3343 0C02
 3344 0C02              ;; STK-TO-A
 3345 0C02 CD CD 15     L0C02:  CALL    L15CD           ; routine FP-TO-A
 3346 0C05 DA AD 0E             JP      C,L0EAD         ; to REPORT-B
 3347 0C08
 3348 0C08 0E 01                LD      C,$01           ;
 3349 0C0A C8                   RET     Z               ;
 3350 0C0B
 3351 0C0B 0E FF                LD      C,$FF           ;
 3352 0C0D C9                   RET                     ;
 3353 0C0E
 3354 0C0E              ; -----------------------
 3355 0C0E              ; THE 'SCROLL' SUBROUTINE
 3356 0C0E              ; -----------------------
 3357 0C0E              ;
 3358 0C0E              ;
 3359 0C0E
 3360 0C0E              ;; SCROLL
 3361 0C0E FD 46 22     L0C0E:  LD      B,(IY+$22)      ; sv DF_SZ
 3362 0C11 0E 21                LD      C,$21           ;
 3363 0C13 CD 18 09             CALL    L0918           ; routine LOC-ADDR
 3364 0C16 CD 9B 09             CALL    L099B           ; routine ONE-SPACE
 3365 0C19 7E                   LD      A,(HL)          ;
 3366 0C1A 12                   LD      (DE),A          ;
 3367 0C1B FD 34 3A             INC     (IY+$3A)        ; sv S_POSN_y
 3368 0C1E 2A 0C 40             LD      HL,($400C)      ; sv D_FILE_lo
 3369 0C21 23                   INC     HL              ;
 3370 0C22 54                   LD      D,H             ;
 3371 0C23 5D                   LD      E,L             ;
 3372 0C24 ED B1                CPIR                    ;
 3373 0C26 C3 5D 0A             JP      L0A5D           ; to RECLAIM-1
 3374 0C29
 3375 0C29              ; -------------------
 3376 0C29              ; THE 'SYNTAX' TABLES
 3377 0C29              ; -------------------
 3378 0C29
 3379 0C29              ; i) The Offset table
 3380 0C29
 3381 0C29              ;; offset-t
 3382 0C29 8B           L0C29:  DEFB    L0CB4 - $       ; 8B offset to; Address: P-LPRINT
 3383 0C2A 8D                   DEFB    L0CB7 - $       ; 8D offset to; Address: P-LLIST
 3384 0C2B 2D                   DEFB    L0C58 - $       ; 2D offset to; Address: P-STOP
 3385 0C2C 7F                   DEFB    L0CAB - $       ; 7F offset to; Address: P-SLOW
 3386 0C2D 81                   DEFB    L0CAE - $       ; 81 offset to; Address: P-FAST
 3387 0C2E 49                   DEFB    L0C77 - $       ; 49 offset to; Address: P-NEW
 3388 0C2F 75                   DEFB    L0CA4 - $       ; 75 offset to; Address: P-SCROLL
 3389 0C30 5F                   DEFB    L0C8F - $       ; 5F offset to; Address: P-CONT
 3390 0C31 40                   DEFB    L0C71 - $       ; 40 offset to; Address: P-DIM
 3391 0C32 42                   DEFB    L0C74 - $       ; 42 offset to; Address: P-REM
 3392 0C33 2B                   DEFB    L0C5E - $       ; 2B offset to; Address: P-FOR
 3393 0C34 17                   DEFB    L0C4B - $       ; 17 offset to; Address: P-GOTO
 3394 0C35 1F                   DEFB    L0C54 - $       ; 1F offset to; Address: P-GOSUB
 3395 0C36 37                   DEFB    L0C6D - $       ; 37 offset to; Address: P-INPUT
 3396 0C37 52                   DEFB    L0C89 - $       ; 52 offset to; Address: P-LOAD
 3397 0C38 45                   DEFB    L0C7D - $       ; 45 offset to; Address: P-LIST
 3398 0C39 0F                   DEFB    L0C48 - $       ; 0F offset to; Address: P-LET
 3399 0C3A 6D                   DEFB    L0CA7 - $       ; 6D offset to; Address: P-PAUSE
 3400 0C3B 2B                   DEFB    L0C66 - $       ; 2B offset to; Address: P-NEXT
 3401 0C3C 44                   DEFB    L0C80 - $       ; 44 offset to; Address: P-POKE
 3402 0C3D 2D                   DEFB    L0C6A - $       ; 2D offset to; Address: P-PRINT
 3403 0C3E 5A                   DEFB    L0C98 - $       ; 5A offset to; Address: P-PLOT
 3404 0C3F 3B                   DEFB    L0C7A - $       ; 3B offset to; Address: P-RUN
 3405 0C40 4C                   DEFB    L0C8C - $       ; 4C offset to; Address: P-SAVE
 3406 0C41 45                   DEFB    L0C86 - $       ; 45 offset to; Address: P-RAND
 3407 0C42 0D                   DEFB    L0C4F - $       ; 0D offset to; Address: P-IF
 3408 0C43 52                   DEFB    L0C95 - $       ; 52 offset to; Address: P-CLS
 3409 0C44 5A                   DEFB    L0C9E - $       ; 5A offset to; Address: P-UNPLOT
 3410 0C45 4D                   DEFB    L0C92 - $       ; 4D offset to; Address: P-CLEAR
 3411 0C46 15                   DEFB    L0C5B - $       ; 15 offset to; Address: P-RETURN
 3412 0C47 6A                   DEFB    L0CB1 - $       ; 6A offset to; Address: P-COPY
 3413 0C48
 3414 0C48              ; ii) The parameter table.
 3415 0C48
 3416 0C48
 3417 0C48              ;; P-LET
 3418 0C48 01           L0C48:  DEFB    $01             ; Class-01 - A variable is required.
 3419 0C49 14                   DEFB    $14             ; Separator:  '='
 3420 0C4A 02                   DEFB    $02             ; Class-02 - An expression, numeric or string,
 3421 0C4B                                              ; must follow.
 3422 0C4B
 3423 0C4B              ;; P-GOTO
 3424 0C4B 06           L0C4B:  DEFB    $06             ; Class-06 - A numeric expression must follow.
 3425 0C4C 00                   DEFB    $00             ; Class-00 - No further operands.
 3426 0C4D 81 0E                DEFW    L0E81           ; Address: $0E81; Address: GOTO
 3427 0C4F
 3428 0C4F              ;; P-IF
 3429 0C4F 06           L0C4F:  DEFB    $06             ; Class-06 - A numeric expression must follow.
 3430 0C50 DE                   DEFB    $DE             ; Separator:  'THEN'
 3431 0C51 05                   DEFB    $05             ; Class-05 - Variable syntax checked entirely
 3432 0C52                                              ; by routine.
 3433 0C52 AB 0D                DEFW    L0DAB           ; Address: $0DAB; Address: IF
 3434 0C54
 3435 0C54              ;; P-GOSUB
 3436 0C54 06           L0C54:  DEFB    $06             ; Class-06 - A numeric expression must follow.
 3437 0C55 00                   DEFB    $00             ; Class-00 - No further operands.
 3438 0C56 B5 0E                DEFW    L0EB5           ; Address: $0EB5; Address: GOSUB
 3439 0C58
 3440 0C58              ;; P-STOP
 3441 0C58 00           L0C58:  DEFB    $00             ; Class-00 - No further operands.
 3442 0C59 DC 0C                DEFW    L0CDC           ; Address: $0CDC; Address: STOP
 3443 0C5B
 3444 0C5B              ;; P-RETURN
 3445 0C5B 00           L0C5B:  DEFB    $00             ; Class-00 - No further operands.
 3446 0C5C D8 0E                DEFW    L0ED8           ; Address: $0ED8; Address: RETURN
 3447 0C5E
 3448 0C5E              ;; P-FOR
 3449 0C5E 04           L0C5E:  DEFB    $04             ; Class-04 - A single character variable must
 3450 0C5F                                              ; follow.
 3451 0C5F 14                   DEFB    $14             ; Separator:  '='
 3452 0C60 06                   DEFB    $06             ; Class-06 - A numeric expression must follow.
 3453 0C61 DF                   DEFB    $DF             ; Separator:  'TO'
 3454 0C62 06                   DEFB    $06             ; Class-06 - A numeric expression must follow.
 3455 0C63 05                   DEFB    $05             ; Class-05 - Variable syntax checked entirely
 3456 0C64                                              ; by routine.
 3457 0C64 B9 0D                DEFW    L0DB9           ; Address: $0DB9; Address: FOR
 3458 0C66
 3459 0C66              ;; P-NEXT
 3460 0C66 04           L0C66:  DEFB    $04             ; Class-04 - A single character variable must
 3461 0C67                                              ; follow.
 3462 0C67 00                   DEFB    $00             ; Class-00 - No further operands.
 3463 0C68 2E 0E                DEFW    L0E2E           ; Address: $0E2E; Address: NEXT
 3464 0C6A
 3465 0C6A              ;; P-PRINT
 3466 0C6A 05           L0C6A:  DEFB    $05             ; Class-05 - Variable syntax checked entirely
 3467 0C6B                                              ; by routine.
 3468 0C6B CF 0A                DEFW    L0ACF           ; Address: $0ACF; Address: PRINT
 3469 0C6D
 3470 0C6D              ;; P-INPUT
 3471 0C6D 01           L0C6D:  DEFB    $01             ; Class-01 - A variable is required.
 3472 0C6E 00                   DEFB    $00             ; Class-00 - No further operands.
 3473 0C6F E9 0E                DEFW    L0EE9           ; Address: $0EE9; Address: INPUT
 3474 0C71
 3475 0C71              ;; P-DIM
 3476 0C71 05           L0C71:  DEFB    $05             ; Class-05 - Variable syntax checked entirely
 3477 0C72                                              ; by routine.
 3478 0C72 09 14                DEFW    L1409           ; Address: $1409; Address: DIM
 3479 0C74
 3480 0C74              ;; P-REM
 3481 0C74 05           L0C74:  DEFB    $05             ; Class-05 - Variable syntax checked entirely
 3482 0C75                                              ; by routine.
 3483 0C75 6A 0D                DEFW    L0D6A           ; Address: $0D6A; Address: REM
 3484 0C77
 3485 0C77              ;; P-NEW
 3486 0C77 00           L0C77:  DEFB    $00             ; Class-00 - No further operands.
 3487 0C78 C3 03                DEFW    L03C3           ; Address: $03C3; Address: NEW
 3488 0C7A
 3489 0C7A              ;; P-RUN
 3490 0C7A 03           L0C7A:  DEFB    $03             ; Class-03 - A numeric expression may follow
 3491 0C7B                                              ; else default to zero.
 3492 0C7B AF 0E                DEFW    L0EAF           ; Address: $0EAF; Address: RUN
 3493 0C7D
 3494 0C7D              ;; P-LIST
 3495 0C7D 03           L0C7D:  DEFB    $03             ; Class-03 - A numeric expression may follow
 3496 0C7E                                              ; else default to zero.
 3497 0C7E 30 07                DEFW    L0730           ; Address: $0730; Address: LIST
 3498 0C80
 3499 0C80              ;; P-POKE
 3500 0C80 06           L0C80:  DEFB    $06             ; Class-06 - A numeric expression must follow.
 3501 0C81 1A                   DEFB    $1A             ; Separator:  ','
 3502 0C82 06                   DEFB    $06             ; Class-06 - A numeric expression must follow.
 3503 0C83 00                   DEFB    $00             ; Class-00 - No further operands.
 3504 0C84 92 0E                DEFW    L0E92           ; Address: $0E92; Address: POKE
 3505 0C86
 3506 0C86              ;; P-RAND
 3507 0C86 03           L0C86:  DEFB    $03             ; Class-03 - A numeric expression may follow
 3508 0C87                                              ; else default to zero.
 3509 0C87 6C 0E                DEFW    L0E6C           ; Address: $0E6C; Address: RAND
 3510 0C89
 3511 0C89              ;; P-LOAD
 3512 0C89 05           L0C89:  DEFB    $05             ; Class-05 - Variable syntax checked entirely
 3513 0C8A                                              ; by routine.
 3514 0C8A 40 03                DEFW    L0340           ; Address: $0340; Address: LOAD
 3515 0C8C
 3516 0C8C              ;; P-SAVE
 3517 0C8C 05           L0C8C:  DEFB    $05             ; Class-05 - Variable syntax checked entirely
 3518 0C8D                                              ; by routine.
 3519 0C8D F6 02                DEFW    L02F6           ; Address: $02F6; Address: SAVE
 3520 0C8F
 3521 0C8F              ;; P-CONT
 3522 0C8F 00           L0C8F:  DEFB    $00             ; Class-00 - No further operands.
 3523 0C90 7C 0E                DEFW    L0E7C           ; Address: $0E7C; Address: CONT
 3524 0C92
 3525 0C92              ;; P-CLEAR
 3526 0C92 00           L0C92:  DEFB    $00             ; Class-00 - No further operands.
 3527 0C93 9A 14                DEFW    L149A           ; Address: $149A; Address: CLEAR
 3528 0C95
 3529 0C95              ;; P-CLS
 3530 0C95 00           L0C95:  DEFB    $00             ; Class-00 - No further operands.
 3531 0C96 2A 0A                DEFW    L0A2A           ; Address: $0A2A; Address: CLS
 3532 0C98
 3533 0C98              ;; P-PLOT
 3534 0C98 06           L0C98:  DEFB    $06             ; Class-06 - A numeric expression must follow.
 3535 0C99 1A                   DEFB    $1A             ; Separator:  ','
 3536 0C9A 06                   DEFB    $06             ; Class-06 - A numeric expression must follow.
 3537 0C9B 00                   DEFB    $00             ; Class-00 - No further operands.
 3538 0C9C AF 0B                DEFW    L0BAF           ; Address: $0BAF; Address: PLOT/UNP
 3539 0C9E
 3540 0C9E              ;; P-UNPLOT
 3541 0C9E 06           L0C9E:  DEFB    $06             ; Class-06 - A numeric expression must follow.
 3542 0C9F 1A                   DEFB    $1A             ; Separator:  ','
 3543 0CA0 06                   DEFB    $06             ; Class-06 - A numeric expression must follow.
 3544 0CA1 00                   DEFB    $00             ; Class-00 - No further operands.
 3545 0CA2 AF 0B                DEFW    L0BAF           ; Address: $0BAF; Address: PLOT/UNP
 3546 0CA4
 3547 0CA4              ;; P-SCROLL
 3548 0CA4 00           L0CA4:  DEFB    $00             ; Class-00 - No further operands.
 3549 0CA5 0E 0C                DEFW    L0C0E           ; Address: $0C0E; Address: SCROLL
 3550 0CA7
 3551 0CA7              ;; P-PAUSE
 3552 0CA7 06           L0CA7:  DEFB    $06             ; Class-06 - A numeric expression must follow.
 3553 0CA8 00                   DEFB    $00             ; Class-00 - No further operands.
 3554 0CA9 32 0F                DEFW    L0F32           ; Address: $0F32; Address: PAUSE
 3555 0CAB
 3556 0CAB              ;; P-SLOW
 3557 0CAB 00           L0CAB:  DEFB    $00             ; Class-00 - No further operands.
 3558 0CAC 2B 0F                DEFW    L0F2B           ; Address: $0F2B; Address: SLOW
 3559 0CAE
 3560 0CAE              ;; P-FAST
 3561 0CAE 00           L0CAE:  DEFB    $00             ; Class-00 - No further operands.
 3562 0CAF 23 0F                DEFW    L0F23           ; Address: $0F23; Address: FAST
 3563 0CB1
 3564 0CB1              ;; P-COPY
 3565 0CB1 00           L0CB1:  DEFB    $00             ; Class-00 - No further operands.
 3566 0CB2 69 08                DEFW    L0869           ; Address: $0869; Address: COPY
 3567 0CB4
 3568 0CB4              ;; P-LPRINT
 3569 0CB4 05           L0CB4:  DEFB    $05             ; Class-05 - Variable syntax checked entirely
 3570 0CB5                                              ; by routine.
 3571 0CB5 CB 0A                DEFW    L0ACB           ; Address: $0ACB; Address: LPRINT
 3572 0CB7
 3573 0CB7              ;; P-LLIST
 3574 0CB7 03           L0CB7:  DEFB    $03             ; Class-03 - A numeric expression may follow
 3575 0CB8                                              ; else default to zero.
 3576 0CB8 2C 07                DEFW    L072C           ; Address: $072C; Address: LLIST
 3577 0CBA
 3578 0CBA
 3579 0CBA              ; ---------------------------
 3580 0CBA              ; THE 'LINE SCANNING' ROUTINE
 3581 0CBA              ; ---------------------------
 3582 0CBA              ;
 3583 0CBA              ;
 3584 0CBA
 3585 0CBA              ;; LINE-SCAN
 3586 0CBA FD 36 01 01  L0CBA:  LD      (IY+$01),$01    ; sv FLAGS
 3587 0CBE CD 73 0A             CALL    L0A73           ; routine E-LINE-NO
 3588 0CC1
 3589 0CC1              ;; LINE-RUN
 3590 0CC1 CD BC 14     L0CC1:  CALL    L14BC           ; routine SET-MIN
 3591 0CC4 21 00 40             LD      HL,$4000        ; sv ERR_NR
 3592 0CC7 36 FF                LD      (HL),$FF        ;
 3593 0CC9 21 2D 40             LD      HL,$402D        ; sv FLAGX
 3594 0CCC CB 6E                BIT     5,(HL)          ;
 3595 0CCE 28 0E                JR      Z,L0CDE         ; to LINE-NULL
 3596 0CD0
 3597 0CD0 FE E3                CP      $E3             ; 'STOP' ?
 3598 0CD2 7E                   LD      A,(HL)          ;
 3599 0CD3 C2 6F 0D             JP      NZ,L0D6F        ; to INPUT-REP
 3600 0CD6
 3601 0CD6 CD A6 0D             CALL    L0DA6           ; routine SYNTAX-Z
 3602 0CD9 C8                   RET     Z               ;
 3603 0CDA
 3604 0CDA
 3605 0CDA CF                   RST     08H             ; ERROR-1
 3606 0CDB 0C                   DEFB    $0C             ; Error Report: BREAK - CONT repeats
 3607 0CDC
 3608 0CDC
 3609 0CDC              ; --------------------------
 3610 0CDC              ; THE 'STOP' COMMAND ROUTINE
 3611 0CDC              ; --------------------------
 3612 0CDC              ;
 3613 0CDC              ;
 3614 0CDC
 3615 0CDC              ;; STOP
 3616 0CDC CF           L0CDC:  RST     08H             ; ERROR-1
 3617 0CDD 08                   DEFB    $08             ; Error Report: STOP statement
 3618 0CDE
 3619 0CDE              ; ---
 3620 0CDE
 3621 0CDE              ; the interpretation of a line continues with a check for just spaces
 3622 0CDE              ; followed by a carriage return.
 3623 0CDE              ; The IF command also branches here with a true value to execute the
 3624 0CDE              ; statement after the THEN but the statement can be null so
 3625 0CDE              ; 10 IF 1 = 1 THEN
 3626 0CDE              ; passes syntax (on all ZX computers).
 3627 0CDE
 3628 0CDE              ;; LINE-NULL
 3629 0CDE DF           L0CDE:  RST     18H             ; GET-CHAR
 3630 0CDF 06 00                LD      B,$00           ; prepare to index - early.
 3631 0CE1 FE 76                CP      $76             ; compare to NEWLINE.
 3632 0CE3 C8                   RET     Z               ; return if so.
 3633 0CE4
 3634 0CE4 4F                   LD      C,A             ; transfer character to C.
 3635 0CE5
 3636 0CE5 E7                   RST     20H             ; NEXT-CHAR advances.
 3637 0CE6 79                   LD      A,C             ; character to A
 3638 0CE7 D6 E1                SUB     $E1             ; subtract 'LPRINT' - lowest command.
 3639 0CE9 38 3B                JR      C,L0D26         ; forward if less to REPORT-C2
 3640 0CEB
 3641 0CEB 4F                   LD      C,A             ; reduced token to C
 3642 0CEC 21 29 0C             LD      HL,L0C29        ; set HL to address of offset table.
 3643 0CEF 09                   ADD     HL,BC           ; index into offset table.
 3644 0CF0 4E                   LD      C,(HL)          ; fetch offset
 3645 0CF1 09                   ADD     HL,BC           ; index into parameter table.
 3646 0CF2 18 03                JR      L0CF7           ; to GET-PARAM
 3647 0CF4
 3648 0CF4              ; ---
 3649 0CF4
 3650 0CF4              ;; SCAN-LOOP
 3651 0CF4 2A 30 40     L0CF4:  LD      HL,($4030)      ; sv T_ADDR_lo
 3652 0CF7
 3653 0CF7              ; -> Entry Point to Scanning Loop
 3654 0CF7
 3655 0CF7              ;; GET-PARAM
 3656 0CF7 7E           L0CF7:  LD      A,(HL)          ;
 3657 0CF8 23                   INC     HL              ;
 3658 0CF9 22 30 40             LD      ($4030),HL      ; sv T_ADDR_lo
 3659 0CFC
 3660 0CFC 01 F4 0C             LD      BC,L0CF4        ; Address: SCAN-LOOP
 3661 0CFF C5                   PUSH    BC              ; is pushed on machine stack.
 3662 0D00
 3663 0D00 4F                   LD      C,A             ;
 3664 0D01 FE 0B                CP      $0B             ;
 3665 0D03 30 0B                JR      NC,L0D10        ; to SEPARATOR
 3666 0D05
 3667 0D05 21 16 0D             LD      HL,L0D16        ; class-tbl - the address of the class table.
 3668 0D08 06 00                LD      B,$00           ;
 3669 0D0A 09                   ADD     HL,BC           ;
 3670 0D0B 4E                   LD      C,(HL)          ;
 3671 0D0C 09                   ADD     HL,BC           ;
 3672 0D0D E5                   PUSH    HL              ;
 3673 0D0E
 3674 0D0E DF                   RST     18H             ; GET-CHAR
 3675 0D0F C9                   RET                     ; indirect jump to class routine and
 3676 0D10                                              ; by subsequent RET to SCAN-LOOP.
 3677 0D10
 3678 0D10              ; -----------------------
 3679 0D10              ; THE 'SEPARATOR' ROUTINE
 3680 0D10              ; -----------------------
 3681 0D10
 3682 0D10              ;; SEPARATOR
 3683 0D10 DF           L0D10:  RST     18H             ; GET-CHAR
 3684 0D11 B9                   CP      C               ;
 3685 0D12 20 12                JR      NZ,L0D26        ; to REPORT-C2
 3686 0D14                                              ; 'Nonsense in BASIC'
 3687 0D14
 3688 0D14 E7                   RST     20H             ; NEXT-CHAR
 3689 0D15 C9                   RET                     ; return
 3690 0D16
 3691 0D16
 3692 0D16              ; -------------------------
 3693 0D16              ; THE 'COMMAND CLASS' TABLE
 3694 0D16              ; -------------------------
 3695 0D16              ;
 3696 0D16
 3697 0D16              ;; class-tbl
 3698 0D16 17           L0D16:  DEFB    L0D2D - $       ; 17 offset to; Address: CLASS-0
 3699 0D17 25                   DEFB    L0D3C - $       ; 25 offset to; Address: CLASS-1
 3700 0D18 53                   DEFB    L0D6B - $       ; 53 offset to; Address: CLASS-2
 3701 0D19 0F                   DEFB    L0D28 - $       ; 0F offset to; Address: CLASS-3
 3702 0D1A 6B                   DEFB    L0D85 - $       ; 6B offset to; Address: CLASS-4
 3703 0D1B 13                   DEFB    L0D2E - $       ; 13 offset to; Address: CLASS-5
 3704 0D1C 76                   DEFB    L0D92 - $       ; 76 offset to; Address: CLASS-6
 3705 0D1D
 3706 0D1D
 3707 0D1D              ; --------------------------
 3708 0D1D              ; THE 'CHECK END' SUBROUTINE
 3709 0D1D              ; --------------------------
 3710 0D1D              ; Check for end of statement and that no spurious characters occur after
 3711 0D1D              ; a correctly parsed statement. Since only one statement is allowed on each
 3712 0D1D              ; line, the only character that may follow a statement is a NEWLINE.
 3713 0D1D              ;
 3714 0D1D
 3715 0D1D              ;; CHECK-END
 3716 0D1D CD A6 0D     L0D1D:  CALL    L0DA6           ; routine SYNTAX-Z
 3717 0D20 C0                   RET     NZ              ; return in runtime.
 3718 0D21
 3719 0D21 C1                   POP     BC              ; else drop return address.
 3720 0D22
 3721 0D22              ;; CHECK-2
 3722 0D22 7E           L0D22:  LD      A,(HL)          ; fetch character.
 3723 0D23 FE 76                CP      $76             ; compare to NEWLINE.
 3724 0D25 C8                   RET     Z               ; return if so.
 3725 0D26
 3726 0D26              ;; REPORT-C2
 3727 0D26 18 72        L0D26:  JR      L0D9A           ; to REPORT-C
 3728 0D28                                              ; 'Nonsense in BASIC'
 3729 0D28
 3730 0D28              ; --------------------------
 3731 0D28              ; COMMAND CLASSES 03, 00, 05
 3732 0D28              ; --------------------------
 3733 0D28              ;
 3734 0D28              ;
 3735 0D28
 3736 0D28              ;; CLASS-3
 3737 0D28 FE 76        L0D28:  CP      $76             ;
 3738 0D2A CD 9C 0D             CALL    L0D9C           ; routine NO-TO-STK
 3739 0D2D
 3740 0D2D              ;; CLASS-0
 3741 0D2D BF           L0D2D:  CP      A               ;
 3742 0D2E
 3743 0D2E              ;; CLASS-5
 3744 0D2E C1           L0D2E:  POP     BC              ;
 3745 0D2F CC 1D 0D             CALL    Z,L0D1D         ; routine CHECK-END
 3746 0D32 EB                   EX      DE,HL           ;
 3747 0D33 2A 30 40             LD      HL,($4030)      ; sv T_ADDR_lo
 3748 0D36 4E                   LD      C,(HL)          ;
 3749 0D37 23                   INC     HL              ;
 3750 0D38 46                   LD      B,(HL)          ;
 3751 0D39 EB                   EX      DE,HL           ;
 3752 0D3A
 3753 0D3A              ;; CLASS-END
 3754 0D3A C5           L0D3A:  PUSH    BC              ;
 3755 0D3B C9                   RET                     ;
 3756 0D3C
 3757 0D3C              ; ------------------------------
 3758 0D3C              ; COMMAND CLASSES 01, 02, 04, 06
 3759 0D3C              ; ------------------------------
 3760 0D3C              ;
 3761 0D3C              ;
 3762 0D3C
 3763 0D3C              ;; CLASS-1
 3764 0D3C CD 1C 11     L0D3C:  CALL    L111C           ; routine LOOK-VARS
 3765 0D3F
 3766 0D3F              ;; CLASS-4-2
 3767 0D3F FD 36 2D 00  L0D3F:  LD      (IY+$2D),$00    ; sv FLAGX
 3768 0D43 30 08                JR      NC,L0D4D        ; to SET-STK
 3769 0D45
 3770 0D45 FD CB 2D CE          SET     1,(IY+$2D)      ; sv FLAGX
 3771 0D49 20 18                JR      NZ,L0D63        ; to SET-STRLN
 3772 0D4B
 3773 0D4B
 3774 0D4B              ;; REPORT-2
 3775 0D4B CF           L0D4B:  RST     08H             ; ERROR-1
 3776 0D4C 01                   DEFB    $01             ; Error Report: Variable not found
 3777 0D4D
 3778 0D4D              ; ---
 3779 0D4D
 3780 0D4D              ;; SET-STK
 3781 0D4D CC A7 11     L0D4D:  CALL    Z,L11A7         ; routine STK-VAR
 3782 0D50 FD CB 01 76          BIT     6,(IY+$01)      ; sv FLAGS  - Numeric or string result?
 3783 0D54 20 0D                JR      NZ,L0D63        ; to SET-STRLN
 3784 0D56
 3785 0D56 AF                   XOR     A               ;
 3786 0D57 CD A6 0D             CALL    L0DA6           ; routine SYNTAX-Z
 3787 0D5A C4 F8 13             CALL    NZ,L13F8        ; routine STK-FETCH
 3788 0D5D 21 2D 40             LD      HL,$402D        ; sv FLAGX
 3789 0D60 B6                   OR      (HL)            ;
 3790 0D61 77                   LD      (HL),A          ;
 3791 0D62 EB                   EX      DE,HL           ;
 3792 0D63
 3793 0D63              ;; SET-STRLN
 3794 0D63 ED 43 2E 40  L0D63:  LD      ($402E),BC      ; sv STRLEN_lo
 3795 0D67 22 12 40             LD      ($4012),HL      ; sv DEST-lo
 3796 0D6A
 3797 0D6A              ; THE 'REM' COMMAND ROUTINE
 3798 0D6A
 3799 0D6A              ;; REM
 3800 0D6A C9           L0D6A:  RET                     ;
 3801 0D6B
 3802 0D6B              ; ---
 3803 0D6B
 3804 0D6B              ;; CLASS-2
 3805 0D6B C1           L0D6B:  POP     BC              ;
 3806 0D6C 3A 01 40             LD      A,($4001)       ; sv FLAGS
 3807 0D6F
 3808 0D6F              ;; INPUT-REP
 3809 0D6F F5           L0D6F:  PUSH    AF              ;
 3810 0D70 CD 55 0F             CALL    L0F55           ; routine SCANNING
 3811 0D73 F1                   POP     AF              ;
 3812 0D74 01 21 13             LD      BC,L1321        ; Address: LET
 3813 0D77 FD 56 01             LD      D,(IY+$01)      ; sv FLAGS
 3814 0D7A AA                   XOR     D               ;
 3815 0D7B E6 40                AND     $40             ;
 3816 0D7D 20 1B                JR      NZ,L0D9A        ; to REPORT-C
 3817 0D7F
 3818 0D7F CB 7A                BIT     7,D             ;
 3819 0D81 20 B7                JR      NZ,L0D3A        ; to CLASS-END
 3820 0D83
 3821 0D83 18 9D                JR      L0D22           ; to CHECK-2
 3822 0D85
 3823 0D85              ; ---
 3824 0D85
 3825 0D85              ;; CLASS-4
 3826 0D85 CD 1C 11     L0D85:  CALL    L111C           ; routine LOOK-VARS
 3827 0D88 F5                   PUSH    AF              ;
 3828 0D89 79                   LD      A,C             ;
 3829 0D8A F6 9F                OR      $9F             ;
 3830 0D8C 3C                   INC     A               ;
 3831 0D8D 20 0B                JR       NZ,L0D9A       ; to REPORT-C
 3832 0D8F
 3833 0D8F F1                   POP     AF              ;
 3834 0D90 18 AD                JR      L0D3F           ; to CLASS-4-2
 3835 0D92
 3836 0D92              ; ---
 3837 0D92
 3838 0D92              ;; CLASS-6
 3839 0D92 CD 55 0F     L0D92:  CALL    L0F55           ; routine SCANNING
 3840 0D95 FD CB 01 76          BIT     6,(IY+$01)      ; sv FLAGS  - Numeric or string result?
 3841 0D99 C0                   RET     NZ              ;
 3842 0D9A
 3843 0D9A
 3844 0D9A              ;; REPORT-C
 3845 0D9A CF           L0D9A:  RST     08H             ; ERROR-1
 3846 0D9B 0B                   DEFB    $0B             ; Error Report: Nonsense in BASIC
 3847 0D9C
 3848 0D9C              ; --------------------------------
 3849 0D9C              ; THE 'NUMBER TO STACK' SUBROUTINE
 3850 0D9C              ; --------------------------------
 3851 0D9C              ;
 3852 0D9C              ;
 3853 0D9C
 3854 0D9C              ;; NO-TO-STK
 3855 0D9C 20 F4        L0D9C:  JR      NZ,L0D92        ; back to CLASS-6 with a non-zero number.
 3856 0D9E
 3857 0D9E CD A6 0D             CALL    L0DA6           ; routine SYNTAX-Z
 3858 0DA1 C8                   RET     Z               ; return if checking syntax.
 3859 0DA2
 3860 0DA2              ; in runtime a zero default is placed on the calculator stack.
 3861 0DA2
 3862 0DA2 EF                   RST     28H             ;; FP-CALC
 3863 0DA3 A0                   DEFB    $A0             ;;stk-zero
 3864 0DA4 34                   DEFB    $34             ;;end-calc
 3865 0DA5
 3866 0DA5 C9                   RET                     ; return.
 3867 0DA6
 3868 0DA6              ; -------------------------
 3869 0DA6              ; THE 'SYNTAX-Z' SUBROUTINE
 3870 0DA6              ; -------------------------
 3871 0DA6              ; This routine returns with zero flag set if checking syntax.
 3872 0DA6              ; Calling this routine uses three instruction bytes compared to four if the
 3873 0DA6              ; bit test is implemented inline.
 3874 0DA6
 3875 0DA6              ;; SYNTAX-Z
 3876 0DA6 FD CB 01 7E  L0DA6:  BIT     7,(IY+$01)      ; test FLAGS  - checking syntax only?
 3877 0DAA C9                   RET                     ; return.
 3878 0DAB
 3879 0DAB              ; ------------------------
 3880 0DAB              ; THE 'IF' COMMAND ROUTINE
 3881 0DAB              ; ------------------------
 3882 0DAB              ; In runtime, the class routines have evaluated the test expression and
 3883 0DAB              ; the result, true or false, is on the stack.
 3884 0DAB
 3885 0DAB              ;; IF
 3886 0DAB CD A6 0D     L0DAB:  CALL    L0DA6           ; routine SYNTAX-Z
 3887 0DAE 28 06                JR      Z,L0DB6         ; forward if checking syntax to IF-END
 3888 0DB0
 3889 0DB0              ; else delete the Boolean value on the calculator stack.
 3890 0DB0
 3891 0DB0 EF                   RST     28H             ;; FP-CALC
 3892 0DB1 02                   DEFB    $02             ;;delete
 3893 0DB2 34                   DEFB    $34             ;;end-calc
 3894 0DB3
 3895 0DB3              ; register DE points to exponent of floating point value.
 3896 0DB3
 3897 0DB3 1A                   LD      A,(DE)          ; fetch exponent.
 3898 0DB4 A7                   AND     A               ; test for zero - FALSE.
 3899 0DB5 C8                   RET     Z               ; return if so.
 3900 0DB6
 3901 0DB6              ;; IF-END
 3902 0DB6 C3 DE 0C     L0DB6:  JP      L0CDE           ; jump back to LINE-NULL
 3903 0DB9
 3904 0DB9              ; -------------------------
 3905 0DB9              ; THE 'FOR' COMMAND ROUTINE
 3906 0DB9              ; -------------------------
 3907 0DB9              ;
 3908 0DB9              ;
 3909 0DB9
 3910 0DB9              ;; FOR
 3911 0DB9 FE E0        L0DB9:  CP      $E0             ; is current character 'STEP' ?
 3912 0DBB 20 09                JR      NZ,L0DC6        ; forward if not to F-USE-ONE
 3913 0DBD
 3914 0DBD
 3915 0DBD E7                   RST     20H             ; NEXT-CHAR
 3916 0DBE CD 92 0D             CALL    L0D92           ; routine CLASS-6 stacks the number
 3917 0DC1 CD 1D 0D             CALL    L0D1D           ; routine CHECK-END
 3918 0DC4 18 06                JR      L0DCC           ; forward to F-REORDER
 3919 0DC6
 3920 0DC6              ; ---
 3921 0DC6
 3922 0DC6              ;; F-USE-ONE
 3923 0DC6 CD 1D 0D     L0DC6:  CALL    L0D1D           ; routine CHECK-END
 3924 0DC9
 3925 0DC9 EF                   RST     28H             ;; FP-CALC
 3926 0DCA A1                   DEFB    $A1             ;;stk-one
 3927 0DCB 34                   DEFB    $34             ;;end-calc
 3928 0DCC
 3929 0DCC
 3930 0DCC
 3931 0DCC              ;; F-REORDER
 3932 0DCC EF           L0DCC:  RST     28H             ;; FP-CALC      v, l, s.
 3933 0DCD C0                   DEFB    $C0             ;;st-mem-0      v, l, s.
 3934 0DCE 02                   DEFB    $02             ;;delete        v, l.
 3935 0DCF 01                   DEFB    $01             ;;exchange      l, v.
 3936 0DD0 E0                   DEFB    $E0             ;;get-mem-0     l, v, s.
 3937 0DD1 01                   DEFB    $01             ;;exchange      l, s, v.
 3938 0DD2 34                   DEFB    $34             ;;end-calc      l, s, v.
 3939 0DD3
 3940 0DD3 CD 21 13             CALL    L1321           ; routine LET
 3941 0DD6
 3942 0DD6 22 1F 40             LD      ($401F),HL      ; set MEM to address variable.
 3943 0DD9 2B                   DEC     HL              ; point to letter.
 3944 0DDA 7E                   LD      A,(HL)          ;
 3945 0DDB CB FE                SET     7,(HL)          ;
 3946 0DDD 01 06 00             LD      BC,$0006        ;
 3947 0DE0 09                   ADD     HL,BC           ;
 3948 0DE1 07                   RLCA                    ;
 3949 0DE2 38 06                JR      C,L0DEA         ; to F-LMT-STP
 3950 0DE4
 3951 0DE4 CB 21                SLA     C               ;
 3952 0DE6 CD 9E 09             CALL    L099E           ; routine MAKE-ROOM
 3953 0DE9 23                   INC     HL              ;
 3954 0DEA
 3955 0DEA              ;; F-LMT-STP
 3956 0DEA E5           L0DEA:  PUSH    HL              ;
 3957 0DEB
 3958 0DEB EF                   RST     28H             ;; FP-CALC
 3959 0DEC 02                   DEFB    $02             ;;delete
 3960 0DED 02                   DEFB    $02             ;;delete
 3961 0DEE 34                   DEFB    $34             ;;end-calc
 3962 0DEF
 3963 0DEF E1                   POP     HL              ;
 3964 0DF0 EB                   EX      DE,HL           ;
 3965 0DF1
 3966 0DF1 0E 0A                LD      C,$0A           ; ten bytes to be moved.
 3967 0DF3 ED B0                LDIR                    ; copy bytes
 3968 0DF5
 3969 0DF5 2A 07 40             LD      HL,($4007)      ; set HL to system variable PPC current line.
 3970 0DF8 EB                   EX      DE,HL           ; transfer to DE, variable pointer to HL.
 3971 0DF9 13                   INC     DE              ; loop start will be this line + 1 at least.
 3972 0DFA 73                   LD      (HL),E          ;
 3973 0DFB 23                   INC     HL              ;
 3974 0DFC 72                   LD      (HL),D          ;
 3975 0DFD CD 5A 0E             CALL    L0E5A           ; routine NEXT-LOOP considers an initial pass.
 3976 0E00 D0                   RET     NC              ; return if possible.
 3977 0E01
 3978 0E01              ; else program continues from point following matching NEXT.
 3979 0E01
 3980 0E01 FD CB 08 7E          BIT     7,(IY+$08)      ; test PPC_hi
 3981 0E05 C0                   RET     NZ              ; return if over 32767 ???
 3982 0E06
 3983 0E06 FD 46 2E             LD      B,(IY+$2E)      ; fetch variable name from STRLEN_lo
 3984 0E09 CB B0                RES     6,B             ; make a true letter.
 3985 0E0B 2A 29 40             LD      HL,($4029)      ; set HL from NXTLIN
 3986 0E0E
 3987 0E0E              ; now enter a loop to look for matching next.
 3988 0E0E
 3989 0E0E              ;; NXTLIN-NO
 3990 0E0E 7E           L0E0E:  LD      A,(HL)          ; fetch high byte of line number.
 3991 0E0F E6 C0                AND     $C0             ; mask off low bits $3F
 3992 0E11 20 17                JR      NZ,L0E2A        ; forward at end of program to FOR-END
 3993 0E13
 3994 0E13 C5                   PUSH    BC              ; save letter
 3995 0E14 CD F2 09             CALL    L09F2           ; routine NEXT-ONE finds next line.
 3996 0E17 C1                   POP     BC              ; restore letter
 3997 0E18
 3998 0E18 23                   INC     HL              ; step past low byte
 3999 0E19 23                   INC     HL              ; past the
 4000 0E1A 23                   INC     HL              ; line length.
 4001 0E1B CD 4C 00             CALL    L004C           ; routine TEMP-PTR1 sets CH_ADD
 4002 0E1E
 4003 0E1E DF                   RST     18H             ; GET-CHAR
 4004 0E1F FE F3                CP      $F3             ; compare to 'NEXT'.
 4005 0E21 EB                   EX      DE,HL           ; next line to HL.
 4006 0E22 20 EA                JR      NZ,L0E0E        ; back with no match to NXTLIN-NO
 4007 0E24
 4008 0E24              ;
 4009 0E24
 4010 0E24 EB                   EX      DE,HL           ; restore pointer.
 4011 0E25
 4012 0E25 E7                   RST     20H             ; NEXT-CHAR advances and gets letter in A.
 4013 0E26 EB                   EX      DE,HL           ; save pointer
 4014 0E27 B8                   CP      B               ; compare to variable name.
 4015 0E28 20 E4                JR      NZ,L0E0E        ; back with mismatch to NXTLIN-NO
 4016 0E2A
 4017 0E2A              ;; FOR-END
 4018 0E2A 22 29 40     L0E2A:  LD      ($4029),HL      ; update system variable NXTLIN
 4019 0E2D C9                   RET                     ; return.
 4020 0E2E
 4021 0E2E              ; --------------------------
 4022 0E2E              ; THE 'NEXT' COMMAND ROUTINE
 4023 0E2E              ; --------------------------
 4024 0E2E              ;
 4025 0E2E              ;
 4026 0E2E
 4027 0E2E              ;; NEXT
 4028 0E2E FD CB 2D 4E  L0E2E:  BIT     1,(IY+$2D)      ; sv FLAGX
 4029 0E32 C2 4B 0D             JP      NZ,L0D4B        ; to REPORT-2
 4030 0E35
 4031 0E35 2A 12 40             LD      HL,($4012)      ; DEST
 4032 0E38 CB 7E                BIT     7,(HL)          ;
 4033 0E3A 28 1C                JR      Z,L0E58         ; to REPORT-1
 4034 0E3C
 4035 0E3C 23                   INC     HL              ;
 4036 0E3D 22 1F 40             LD      ($401F),HL      ; sv MEM_lo
 4037 0E40
 4038 0E40 EF                   RST     28H             ;; FP-CALC
 4039 0E41 E0                   DEFB    $E0             ;;get-mem-0
 4040 0E42 E2                   DEFB    $E2             ;;get-mem-2
 4041 0E43 0F                   DEFB    $0F             ;;addition
 4042 0E44 C0                   DEFB    $C0             ;;st-mem-0
 4043 0E45 02                   DEFB    $02             ;;delete
 4044 0E46 34                   DEFB    $34             ;;end-calc
 4045 0E47
 4046 0E47 CD 5A 0E             CALL    L0E5A           ; routine NEXT-LOOP
 4047 0E4A D8                   RET     C               ;
 4048 0E4B
 4049 0E4B 2A 1F 40             LD      HL,($401F)      ; sv MEM_lo
 4050 0E4E 11 0F 00             LD      DE,$000F        ;
 4051 0E51 19                   ADD     HL,DE           ;
 4052 0E52 5E                   LD      E,(HL)          ;
 4053 0E53 23                   INC     HL              ;
 4054 0E54 56                   LD      D,(HL)          ;
 4055 0E55 EB                   EX      DE,HL           ;
 4056 0E56 18 2E                JR      L0E86           ; to GOTO-2
 4057 0E58
 4058 0E58              ; ---
 4059 0E58
 4060 0E58
 4061 0E58              ;; REPORT-1
 4062 0E58 CF           L0E58:  RST     08H             ; ERROR-1
 4063 0E59 00                   DEFB    $00             ; Error Report: NEXT without FOR
 4064 0E5A
 4065 0E5A
 4066 0E5A              ; --------------------------
 4067 0E5A              ; THE 'NEXT-LOOP' SUBROUTINE
 4068 0E5A              ; --------------------------
 4069 0E5A              ;
 4070 0E5A              ;
 4071 0E5A
 4072 0E5A              ;; NEXT-LOOP
 4073 0E5A EF           L0E5A:  RST     28H             ;; FP-CALC
 4074 0E5B E1                   DEFB    $E1             ;;get-mem-1
 4075 0E5C E0                   DEFB    $E0             ;;get-mem-0
 4076 0E5D E2                   DEFB    $E2             ;;get-mem-2
 4077 0E5E 32                   DEFB    $32             ;;less-0
 4078 0E5F 00                   DEFB    $00             ;;jump-true
 4079 0E60 02                   DEFB    $02             ;;to L0E62, LMT-V-VAL
 4080 0E61
 4081 0E61 01                   DEFB    $01             ;;exchange
 4082 0E62
 4083 0E62              ;; LMT-V-VAL
 4084 0E62 03           L0E62:  DEFB    $03             ;;subtract
 4085 0E63 33                   DEFB    $33             ;;greater-0
 4086 0E64 00                   DEFB    $00             ;;jump-true
 4087 0E65 04                   DEFB    $04             ;;to L0E69, IMPOSS
 4088 0E66
 4089 0E66 34                   DEFB    $34             ;;end-calc
 4090 0E67
 4091 0E67 A7                   AND     A               ; clear carry flag
 4092 0E68 C9                   RET                     ; return.
 4093 0E69
 4094 0E69              ; ---
 4095 0E69
 4096 0E69
 4097 0E69              ;; IMPOSS
 4098 0E69 34           L0E69:  DEFB    $34             ;;end-calc
 4099 0E6A
 4100 0E6A 37                   SCF                     ; set carry flag
 4101 0E6B C9                   RET                     ; return.
 4102 0E6C
 4103 0E6C              ; --------------------------
 4104 0E6C              ; THE 'RAND' COMMAND ROUTINE
 4105 0E6C              ; --------------------------
 4106 0E6C              ; The keyword was 'RANDOMISE' on the ZX80, is 'RAND' here on the ZX81 and
 4107 0E6C              ; becomes 'RANDOMIZE' on the ZX Spectrum.
 4108 0E6C              ; In all invocations the procedure is the same - to set the SEED system variable
 4109 0E6C              ; with a supplied integer value or to use a time-based value if no number, or
 4110 0E6C              ; zero, is supplied.
 4111 0E6C
 4112 0E6C              ;; RAND
 4113 0E6C CD A7 0E     L0E6C:  CALL    L0EA7           ; routine FIND-INT
 4114 0E6F 78                   LD      A,B             ; test value
 4115 0E70 B1                   OR      C               ; for zero
 4116 0E71 20 04                JR      NZ,L0E77        ; forward if not zero to SET-SEED
 4117 0E73
 4118 0E73 ED 4B 34 40          LD      BC,($4034)      ; fetch value of FRAMES system variable.
 4119 0E77
 4120 0E77              ;; SET-SEED
 4121 0E77 ED 43 32 40  L0E77:  LD       ($4032),BC     ; update the SEED system variable.
 4122 0E7B C9                   RET                     ; return.
 4123 0E7C
 4124 0E7C              ; --------------------------
 4125 0E7C              ; THE 'CONT' COMMAND ROUTINE
 4126 0E7C              ; --------------------------
 4127 0E7C              ; Another abbreviated command. ROM space was really tight.
 4128 0E7C              ; CONTINUE at the line number that was set when break was pressed.
 4129 0E7C              ; Sometimes the current line, sometimes the next line.
 4130 0E7C
 4131 0E7C              ;; CONT
 4132 0E7C 2A 2B 40     L0E7C:  LD      HL,($402B)      ; set HL from system variable OLDPPC
 4133 0E7F 18 05                JR      L0E86           ; forward to GOTO-2
 4134 0E81
 4135 0E81              ; --------------------------
 4136 0E81              ; THE 'GOTO' COMMAND ROUTINE
 4137 0E81              ; --------------------------
 4138 0E81              ; This token also suffered from the shortage of room and there is no space
 4139 0E81              ; getween GO and TO as there is on the ZX80 and ZX Spectrum. The same also
 4140 0E81              ; applies to the GOSUB keyword.
 4141 0E81
 4142 0E81              ;; GOTO
 4143 0E81 CD A7 0E     L0E81:  CALL    L0EA7           ; routine FIND-INT
 4144 0E84 60                   LD      H,B             ;
 4145 0E85 69                   LD      L,C             ;
 4146 0E86
 4147 0E86              ;; GOTO-2
 4148 0E86 7C           L0E86:  LD      A,H             ;
 4149 0E87 FE F0                CP      $F0             ;
 4150 0E89 30 22                JR      NC,L0EAD        ; to REPORT-B
 4151 0E8B
 4152 0E8B CD D8 09             CALL    L09D8           ; routine LINE-ADDR
 4153 0E8E 22 29 40             LD      ($4029),HL      ; sv NXTLIN_lo
 4154 0E91 C9                   RET                     ;
 4155 0E92
 4156 0E92              ; --------------------------
 4157 0E92              ; THE 'POKE' COMMAND ROUTINE
 4158 0E92              ; --------------------------
 4159 0E92              ;
 4160 0E92              ;
 4161 0E92
 4162 0E92              ;; POKE
 4163 0E92 CD CD 15     L0E92:  CALL    L15CD           ; routine FP-TO-A
 4164 0E95 38 16                JR      C,L0EAD         ; forward, with overflow, to REPORT-B
 4165 0E97
 4166 0E97 28 02                JR      Z,L0E9B         ; forward, if positive, to POKE-SAVE
 4167 0E99
 4168 0E99 ED 44                NEG                     ; negate
 4169 0E9B
 4170 0E9B              ;; POKE-SAVE
 4171 0E9B F5           L0E9B:  PUSH    AF              ; preserve value.
 4172 0E9C CD A7 0E             CALL    L0EA7           ; routine FIND-INT gets address in BC
 4173 0E9F                                              ; invoking the error routine with overflow
 4174 0E9F                                              ; or a negative number.
 4175 0E9F F1                   POP     AF              ; restore value.
 4176 0EA0
 4177 0EA0              ; Note. the next two instructions are legacy code from the ZX80 and
 4178 0EA0              ; inappropriate here.
 4179 0EA0
 4180 0EA0 FD CB 00 7E          BIT     7,(IY+$00)      ; test ERR_NR - is it still $FF ?
 4181 0EA4 C8                   RET     Z               ; return with error.
 4182 0EA5
 4183 0EA5 02                   LD      (BC),A          ; update the address contents.
 4184 0EA6 C9                   RET                     ; return.
 4185 0EA7
 4186 0EA7              ; -----------------------------
 4187 0EA7              ; THE 'FIND INTEGER' SUBROUTINE
 4188 0EA7              ; -----------------------------
 4189 0EA7              ;
 4190 0EA7              ;
 4191 0EA7
 4192 0EA7              ;; FIND-INT
 4193 0EA7 CD 8A 15     L0EA7:  CALL    L158A           ; routine FP-TO-BC
 4194 0EAA 38 01                JR      C,L0EAD         ; forward with overflow to REPORT-B
 4195 0EAC
 4196 0EAC C8                   RET     Z               ; return if positive (0-65535).
 4197 0EAD
 4198 0EAD
 4199 0EAD              ;; REPORT-B
 4200 0EAD CF           L0EAD:  RST     08H             ; ERROR-1
 4201 0EAE 0A                   DEFB    $0A             ; Error Report: Integer out of range
 4202 0EAF
 4203 0EAF              ; -------------------------
 4204 0EAF              ; THE 'RUN' COMMAND ROUTINE
 4205 0EAF              ; -------------------------
 4206 0EAF              ;
 4207 0EAF              ;
 4208 0EAF
 4209 0EAF              ;; RUN
 4210 0EAF CD 81 0E     L0EAF:  CALL    L0E81           ; routine GOTO
 4211 0EB2 C3 9A 14             JP      L149A           ; to CLEAR
 4212 0EB5
 4213 0EB5              ; ---------------------------
 4214 0EB5              ; THE 'GOSUB' COMMAND ROUTINE
 4215 0EB5              ; ---------------------------
 4216 0EB5              ;
 4217 0EB5              ;
 4218 0EB5
 4219 0EB5              ;; GOSUB
 4220 0EB5 2A 07 40     L0EB5:  LD      HL,($4007)      ; sv PPC_lo
 4221 0EB8 23                   INC     HL              ;
 4222 0EB9 E3                   EX      (SP),HL         ;
 4223 0EBA E5                   PUSH    HL              ;
 4224 0EBB ED 73 02 40          LD      ($4002),SP      ; set the error stack pointer - ERR_SP
 4225 0EBF CD 81 0E             CALL    L0E81           ; routine GOTO
 4226 0EC2 01 06 00             LD      BC,$0006        ;
 4227 0EC5
 4228 0EC5              ; --------------------------
 4229 0EC5              ; THE 'TEST ROOM' SUBROUTINE
 4230 0EC5              ; --------------------------
 4231 0EC5              ;
 4232 0EC5              ;
 4233 0EC5
 4234 0EC5              ;; TEST-ROOM
 4235 0EC5 2A 1C 40     L0EC5:  LD      HL,($401C)      ; sv STKEND_lo
 4236 0EC8 09                   ADD     HL,BC           ;
 4237 0EC9 38 08                JR      C,L0ED3         ; to REPORT-4
 4238 0ECB
 4239 0ECB EB                   EX      DE,HL           ;
 4240 0ECC 21 24 00             LD      HL,$0024        ;
 4241 0ECF 19                   ADD     HL,DE           ;
 4242 0ED0 ED 72                SBC     HL,SP           ;
 4243 0ED2 D8                   RET     C               ;
 4244 0ED3
 4245 0ED3              ;; REPORT-4
 4246 0ED3 2E 03        L0ED3:  LD      L,$03           ;
 4247 0ED5 C3 58 00             JP      L0058           ; to ERROR-3
 4248 0ED8
 4249 0ED8              ; ----------------------------
 4250 0ED8              ; THE 'RETURN' COMMAND ROUTINE
 4251 0ED8              ; ----------------------------
 4252 0ED8              ;
 4253 0ED8              ;
 4254 0ED8
 4255 0ED8              ;; RETURN
 4256 0ED8 E1           L0ED8:  POP     HL              ;
 4257 0ED9 E3                   EX      (SP),HL         ;
 4258 0EDA 7C                   LD      A,H             ;
 4259 0EDB FE 3E                CP      $3E             ;
 4260 0EDD 28 06                JR      Z,L0EE5         ; to REPORT-7
 4261 0EDF
 4262 0EDF ED 73 02 40          LD      ($4002),SP      ; sv ERR_SP_lo
 4263 0EE3 18 A1                JR      L0E86           ; back to GOTO-2
 4264 0EE5
 4265 0EE5              ; ---
 4266 0EE5
 4267 0EE5              ;; REPORT-7
 4268 0EE5 E3           L0EE5:  EX      (SP),HL         ;
 4269 0EE6 E5                   PUSH    HL              ;
 4270 0EE7
 4271 0EE7 CF                   RST     08H             ; ERROR-1
 4272 0EE8 06                   DEFB    $06             ; Error Report: RETURN without GOSUB
 4273 0EE9
 4274 0EE9              ; ---------------------------
 4275 0EE9              ; THE 'INPUT' COMMAND ROUTINE
 4276 0EE9              ; ---------------------------
 4277 0EE9              ;
 4278 0EE9              ;
 4279 0EE9
 4280 0EE9              ;; INPUT
 4281 0EE9 FD CB 08 7E  L0EE9:  BIT     7,(IY+$08)      ; sv PPC_hi
 4282 0EED 20 32                JR      NZ,L0F21        ; to REPORT-8
 4283 0EEF
 4284 0EEF CD A3 14             CALL    L14A3           ; routine X-TEMP
 4285 0EF2 21 2D 40             LD      HL,$402D        ; sv FLAGX
 4286 0EF5 CB EE                SET     5,(HL)          ;
 4287 0EF7 CB B6                RES     6,(HL)          ;
 4288 0EF9 3A 01 40             LD      A,($4001)       ; sv FLAGS
 4289 0EFC E6 40                AND     $40             ;
 4290 0EFE 01 02 00             LD      BC,$0002        ;
 4291 0F01 20 02                JR      NZ,L0F05        ; to PROMPT
 4292 0F03
 4293 0F03 0E 04                LD      C,$04           ;
 4294 0F05
 4295 0F05              ;; PROMPT
 4296 0F05 B6           L0F05:  OR      (HL)            ;
 4297 0F06 77                   LD      (HL),A          ;
 4298 0F07
 4299 0F07 F7                   RST     30H             ; BC-SPACES
 4300 0F08 36 76                LD      (HL),$76        ;
 4301 0F0A 79                   LD      A,C             ;
 4302 0F0B 0F                   RRCA                    ;
 4303 0F0C 0F                   RRCA                    ;
 4304 0F0D 38 05                JR      C,L0F14         ; to ENTER-CUR
 4305 0F0F
 4306 0F0F 3E 0B                LD      A,$0B           ;
 4307 0F11 12                   LD      (DE),A          ;
 4308 0F12 2B                   DEC     HL              ;
 4309 0F13 77                   LD      (HL),A          ;
 4310 0F14
 4311 0F14              ;; ENTER-CUR
 4312 0F14 2B           L0F14:  DEC     HL              ;
 4313 0F15 36 7F                LD      (HL),$7F        ;
 4314 0F17 2A 39 40             LD      HL,($4039)      ; sv S_POSN_x
 4315 0F1A 22 30 40             LD      ($4030),HL      ; sv T_ADDR_lo
 4316 0F1D E1                   POP     HL              ;
 4317 0F1E C3 72 04             JP      L0472           ; to LOWER
 4318 0F21
 4319 0F21              ; ---
 4320 0F21
 4321 0F21              ;; REPORT-8
 4322 0F21 CF           L0F21:  RST     08H             ; ERROR-1
 4323 0F22 07                   DEFB    $07             ; Error Report: End of file
 4324 0F23
 4325 0F23              ; ---------------------------
 4326 0F23              ; THE 'PAUSE' COMMAND ROUTINE
 4327 0F23              ; ---------------------------
 4328 0F23              ;
 4329 0F23              ;
 4330 0F23
 4331 0F23              ;; FAST
 4332 0F23 CD E7 02     L0F23:  CALL    L02E7           ; routine SET-FAST
 4333 0F26 FD CB 3B B6          RES     6,(IY+$3B)      ; sv CDFLAG
 4334 0F2A C9                   RET                     ; return.
 4335 0F2B
 4336 0F2B              ; --------------------------
 4337 0F2B              ; THE 'SLOW' COMMAND ROUTINE
 4338 0F2B              ; --------------------------
 4339 0F2B              ;
 4340 0F2B              ;
 4341 0F2B
 4342 0F2B              ;; SLOW
 4343 0F2B FD CB 3B F6  L0F2B:  SET     6,(IY+$3B)      ; sv CDFLAG
 4344 0F2F C3 07 02             JP      L0207           ; to SLOW/FAST
 4345 0F32
 4346 0F32              ; ---------------------------
 4347 0F32              ; THE 'PAUSE' COMMAND ROUTINE
 4348 0F32              ; ---------------------------
 4349 0F32
 4350 0F32              ;; PAUSE
 4351 0F32 CD A7 0E     L0F32:  CALL    L0EA7           ; routine FIND-INT
 4352 0F35 CD E7 02             CALL    L02E7           ; routine SET-FAST
 4353 0F38 60                   LD      H,B             ;
 4354 0F39 69                   LD      L,C             ;
 4355 0F3A CD 2D 02             CALL    L022D           ; routine DISPLAY-P
 4356 0F3D
 4357 0F3D FD 36 35 FF          LD      (IY+$35),$FF    ; sv FRAMES_hi
 4358 0F41
 4359 0F41 CD 07 02             CALL    L0207           ; routine SLOW/FAST
 4360 0F44 18 05                JR      L0F4B           ; routine DEBOUNCE
 4361 0F46
 4362 0F46              ; ----------------------
 4363 0F46              ; THE 'BREAK' SUBROUTINE
 4364 0F46              ; ----------------------
 4365 0F46              ;
 4366 0F46              ;
 4367 0F46
 4368 0F46              ;; BREAK-1
 4369 0F46 3E 7F        L0F46:  LD      A,$7F           ; read port $7FFE - keys B,N,M,.,SPACE.
 4370 0F48 DB FE                IN      A,($FE)         ;
 4371 0F4A 1F                   RRA                     ; carry will be set if space not pressed.
 4372 0F4B
 4373 0F4B              ; -------------------------
 4374 0F4B              ; THE 'DEBOUNCE' SUBROUTINE
 4375 0F4B              ; -------------------------
 4376 0F4B              ;
 4377 0F4B              ;
 4378 0F4B
 4379 0F4B              ;; DEBOUNCE
 4380 0F4B FD CB 3B 86  L0F4B:  RES     0,(IY+$3B)      ; update system variable CDFLAG
 4381 0F4F 3E FF                LD      A,$FF           ;
 4382 0F51 32 27 40             LD      ($4027),A       ; update system variable DEBOUNCE
 4383 0F54 C9                   RET                     ; return.
 4384 0F55
 4385 0F55
 4386 0F55              ; -------------------------
 4387 0F55              ; THE 'SCANNING' SUBROUTINE
 4388 0F55              ; -------------------------
 4389 0F55              ; This recursive routine is where the ZX81 gets its power. Provided there is
 4390 0F55              ; enough memory it can evaluate an expression of unlimited complexity.
 4391 0F55              ; Note. there is no unary plus so, as on the ZX80, PRINT +1 gives a syntax error.
 4392 0F55              ; PRINT +1 works on the Spectrum but so too does PRINT + "STRING".
 4393 0F55
 4394 0F55              ;; SCANNING
 4395 0F55 DF           L0F55:  RST     18H             ; GET-CHAR
 4396 0F56 06 00                LD      B,$00           ; set B register to zero.
 4397 0F58 C5                   PUSH    BC              ; stack zero as a priority end-marker.
 4398 0F59
 4399 0F59              ;; S-LOOP-1
 4400 0F59 FE 40        L0F59:  CP      $40             ; compare to the 'RND' character
 4401 0F5B 20 2F                JR      NZ,L0F8C        ; forward, if not, to S-TEST-PI
 4402 0F5D
 4403 0F5D              ; ------------------
 4404 0F5D              ; THE 'RND' FUNCTION
 4405 0F5D              ; ------------------
 4406 0F5D
 4407 0F5D CD A6 0D             CALL    L0DA6           ; routine SYNTAX-Z
 4408 0F60 28 28                JR      Z,L0F8A         ; forward if checking syntax to S-JPI-END
 4409 0F62
 4410 0F62 ED 4B 32 40          LD      BC,($4032)      ; sv SEED_lo
 4411 0F66 CD 20 15             CALL    L1520           ; routine STACK-BC
 4412 0F69
 4413 0F69 EF                   RST     28H             ;; FP-CALC
 4414 0F6A A1                   DEFB    $A1             ;;stk-one
 4415 0F6B 0F                   DEFB    $0F             ;;addition
 4416 0F6C 30                   DEFB    $30             ;;stk-data
 4417 0F6D 37                   DEFB    $37             ;;Exponent: $87, Bytes: 1
 4418 0F6E 16                   DEFB    $16             ;;(+00,+00,+00)
 4419 0F6F 04                   DEFB    $04             ;;multiply
 4420 0F70 30                   DEFB    $30             ;;stk-data
 4421 0F71 80                   DEFB    $80             ;;Bytes: 3
 4422 0F72 41                   DEFB    $41             ;;Exponent $91
 4423 0F73 00 00 80             DEFB    $00,$00,$80     ;;(+00)
 4424 0F76 2E                   DEFB    $2E             ;;n-mod-m
 4425 0F77 02                   DEFB    $02             ;;delete
 4426 0F78 A1                   DEFB    $A1             ;;stk-one
 4427 0F79 03                   DEFB    $03             ;;subtract
 4428 0F7A 2D                   DEFB    $2D             ;;duplicate
 4429 0F7B 34                   DEFB    $34             ;;end-calc
 4430 0F7C
 4431 0F7C CD 8A 15             CALL    L158A           ; routine FP-TO-BC
 4432 0F7F ED 43 32 40          LD      ($4032),BC      ; update the SEED system variable.
 4433 0F83 7E                   LD      A,(HL)          ; HL addresses the exponent of the last value.
 4434 0F84 A7                   AND     A               ; test for zero
 4435 0F85 28 03                JR      Z,L0F8A         ; forward, if so, to S-JPI-END
 4436 0F87
 4437 0F87 D6 10                SUB     $10             ; else reduce exponent by sixteen
 4438 0F89 77                   LD      (HL),A          ; thus dividing by 65536 for last value.
 4439 0F8A
 4440 0F8A              ;; S-JPI-END
 4441 0F8A 18 0D        L0F8A:  JR      L0F99           ; forward to S-PI-END
 4442 0F8C
 4443 0F8C              ; ---
 4444 0F8C
 4445 0F8C              ;; S-TEST-PI
 4446 0F8C FE 42        L0F8C:  CP      $42             ; the 'PI' character
 4447 0F8E 20 0D                JR      NZ,L0F9D        ; forward, if not, to S-TST-INK
 4448 0F90
 4449 0F90              ; -------------------
 4450 0F90              ; THE 'PI' EVALUATION
 4451 0F90              ; -------------------
 4452 0F90
 4453 0F90 CD A6 0D             CALL    L0DA6           ; routine SYNTAX-Z
 4454 0F93 28 04                JR      Z,L0F99         ; forward if checking syntax to S-PI-END
 4455 0F95
 4456 0F95
 4457 0F95 EF                   RST     28H             ;; FP-CALC
 4458 0F96 A3                   DEFB    $A3             ;;stk-pi/2
 4459 0F97 34                   DEFB    $34             ;;end-calc
 4460 0F98
 4461 0F98 34                   INC     (HL)            ; double the exponent giving PI on the stack.
 4462 0F99
 4463 0F99              ;; S-PI-END
 4464 0F99 E7           L0F99:  RST     20H             ; NEXT-CHAR advances character pointer.
 4465 0F9A
 4466 0F9A C3 83 10             JP      L1083           ; jump forward to S-NUMERIC to set the flag
 4467 0F9D                                              ; to signal numeric result before advancing.
 4468 0F9D
 4469 0F9D              ; ---
 4470 0F9D
 4471 0F9D              ;; S-TST-INK
 4472 0F9D FE 41        L0F9D:  CP      $41             ; compare to character 'INKEY$'
 4473 0F9F 20 11                JR      NZ,L0FB2        ; forward, if not, to S-ALPHANUM
 4474 0FA1
 4475 0FA1              ; -----------------------
 4476 0FA1              ; THE 'INKEY$' EVALUATION
 4477 0FA1              ; -----------------------
 4478 0FA1
 4479 0FA1 CD BB 02             CALL    L02BB           ; routine KEYBOARD
 4480 0FA4 44                   LD      B,H             ;
 4481 0FA5 4D                   LD      C,L             ;
 4482 0FA6 51                   LD      D,C             ;
 4483 0FA7 14                   INC     D               ;
 4484 0FA8 C4 BD 07             CALL    NZ,L07BD        ; routine DECODE
 4485 0FAB 7A                   LD      A,D             ;
 4486 0FAC 8A                   ADC     A,D             ;
 4487 0FAD 42                   LD      B,D             ;
 4488 0FAE 4F                   LD      C,A             ;
 4489 0FAF EB                   EX      DE,HL           ;
 4490 0FB0 18 3B                JR      L0FED           ; forward to S-STRING
 4491 0FB2
 4492 0FB2              ; ---
 4493 0FB2
 4494 0FB2              ;; S-ALPHANUM
 4495 0FB2 CD D2 14     L0FB2:  CALL    L14D2           ; routine ALPHANUM
 4496 0FB5 38 6E                JR      C,L1025         ; forward, if alphanumeric to S-LTR-DGT
 4497 0FB7
 4498 0FB7 FE 1B                CP      $1B             ; is character a '.' ?
 4499 0FB9 CA 47 10             JP      Z,L1047         ; jump forward if so to S-DECIMAL
 4500 0FBC
 4501 0FBC 01 D8 09             LD      BC,$09D8        ; prepare priority 09, operation 'subtract'
 4502 0FBF FE 16                CP      $16             ; is character unary minus '-' ?
 4503 0FC1 28 5D                JR      Z,L1020         ; forward, if so, to S-PUSH-PO
 4504 0FC3
 4505 0FC3 FE 10                CP      $10             ; is character a '(' ?
 4506 0FC5 20 0F                JR      NZ,L0FD6        ; forward if not to S-QUOTE
 4507 0FC7
 4508 0FC7 CD 49 00             CALL    L0049           ; routine CH-ADD+1 advances character pointer.
 4509 0FCA
 4510 0FCA CD 55 0F             CALL    L0F55           ; recursively call routine SCANNING to
 4511 0FCD                                              ; evaluate the sub-expression.
 4512 0FCD
 4513 0FCD FE 11                CP      $11             ; is subsequent character a ')' ?
 4514 0FCF 20 2E                JR      NZ,L0FFF        ; forward if not to S-RPT-C
 4515 0FD1
 4516 0FD1
 4517 0FD1 CD 49 00             CALL    L0049           ; routine CH-ADD+1  advances.
 4518 0FD4 18 22                JR      L0FF8           ; relative jump to S-JP-CONT3 and then S-CONT3
 4519 0FD6
 4520 0FD6              ; ---
 4521 0FD6
 4522 0FD6              ; consider a quoted string e.g. PRINT "Hooray!"
 4523 0FD6              ; Note. quotes are not allowed within a string.
 4524 0FD6
 4525 0FD6              ;; S-QUOTE
 4526 0FD6 FE 0B        L0FD6:  CP      $0B             ; is character a quote (") ?
 4527 0FD8 20 28                JR      NZ,L1002        ; forward, if not, to S-FUNCTION
 4528 0FDA
 4529 0FDA CD 49 00             CALL    L0049           ; routine CH-ADD+1 advances
 4530 0FDD E5                   PUSH    HL              ; * save start of string.
 4531 0FDE 18 03                JR      L0FE3           ; forward to S-QUOTE-S
 4532 0FE0
 4533 0FE0              ; ---
 4534 0FE0
 4535 0FE0
 4536 0FE0              ;; S-Q-AGAIN
 4537 0FE0 CD 49 00     L0FE0:  CALL    L0049           ; routine CH-ADD+1
 4538 0FE3
 4539 0FE3              ;; S-QUOTE-S
 4540 0FE3 FE 0B        L0FE3:  CP      $0B             ; is character a '"' ?
 4541 0FE5 20 14                JR      NZ,L0FFB        ; forward if not to S-Q-NL
 4542 0FE7
 4543 0FE7 D1                   POP     DE              ; * retrieve start of string
 4544 0FE8 A7                   AND     A               ; prepare to subtract.
 4545 0FE9 ED 52                SBC     HL,DE           ; subtract start from current position.
 4546 0FEB 44                   LD      B,H             ; transfer this length
 4547 0FEC 4D                   LD      C,L             ; to the BC register pair.
 4548 0FED
 4549 0FED              ;; S-STRING
 4550 0FED 21 01 40     L0FED:  LD      HL,$4001        ; address system variable FLAGS
 4551 0FF0 CB B6                RES     6,(HL)          ; signal string result
 4552 0FF2 CB 7E                BIT     7,(HL)          ; test if checking syntax.
 4553 0FF4
 4554 0FF4 C4 C3 12             CALL    NZ,L12C3        ; in run-time routine STK-STO-$ stacks the
 4555 0FF7                                              ; string descriptor - start DE, length BC.
 4556 0FF7
 4557 0FF7 E7                   RST     20H             ; NEXT-CHAR advances pointer.
 4558 0FF8
 4559 0FF8              ;; S-J-CONT-3
 4560 0FF8 C3 88 10     L0FF8:  JP      L1088           ; jump to S-CONT-3
 4561 0FFB
 4562 0FFB              ; ---
 4563 0FFB
 4564 0FFB              ; A string with no terminating quote has to be considered.
 4565 0FFB
 4566 0FFB              ;; S-Q-NL
 4567 0FFB FE 76        L0FFB:  CP      $76             ; compare to NEWLINE
 4568 0FFD 20 E1                JR      NZ,L0FE0        ; loop back if not to S-Q-AGAIN
 4569 0FFF
 4570 0FFF              ;; S-RPT-C
 4571 0FFF C3 9A 0D     L0FFF:  JP      L0D9A           ; to REPORT-C
 4572 1002
 4573 1002              ; ---
 4574 1002
 4575 1002              ;; S-FUNCTION
 4576 1002 D6 C4        L1002:  SUB     $C4             ; subtract 'CODE' reducing codes
 4577 1004                                              ; CODE thru '<>' to range $00 - $XX
 4578 1004 38 F9                JR      C,L0FFF         ; back, if less, to S-RPT-C
 4579 1006
 4580 1006              ; test for NOT the last function in character set.
 4581 1006
 4582 1006 01 EC 04             LD      BC,$04EC        ; prepare priority $04, operation 'not'
 4583 1009 FE 13                CP      $13             ; compare to 'NOT'  ( - CODE)
 4584 100B 28 13                JR      Z,L1020         ; forward, if so, to S-PUSH-PO
 4585 100D
 4586 100D 30 F0                JR      NC,L0FFF        ; back with anything higher to S-RPT-C
 4587 100F
 4588 100F              ; else is a function 'CODE' thru 'CHR$'
 4589 100F
 4590 100F 06 10                LD      B,$10           ; priority sixteen binds all functions to
 4591 1011                                              ; arguments removing the need for brackets.
 4592 1011
 4593 1011 C6 D9                ADD     A,$D9           ; add $D9 to give range $D9 thru $EB
 4594 1013                                              ; bit 6 is set to show numeric argument.
 4595 1013                                              ; bit 7 is set to show numeric result.
 4596 1013
 4597 1013              ; now adjust these default argument/result indicators.
 4598 1013
 4599 1013 4F                   LD      C,A             ; save code in C
 4600 1014
 4601 1014 FE DC                CP      $DC             ; separate 'CODE', 'VAL', 'LEN'
 4602 1016 30 02                JR      NC,L101A        ; skip forward if string operand to S-NO-TO-$
 4603 1018
 4604 1018 CB B1                RES     6,C             ; signal string operand.
 4605 101A
 4606 101A              ;; S-NO-TO-$
 4607 101A FE EA        L101A:  CP      $EA             ; isolate top of range 'STR$' and 'CHR$'
 4608 101C 38 02                JR      C,L1020         ; skip forward with others to S-PUSH-PO
 4609 101E
 4610 101E CB B9                RES     7,C             ; signal string result.
 4611 1020
 4612 1020              ;; S-PUSH-PO
 4613 1020 C5           L1020:  PUSH    BC              ; push the priority/operation
 4614 1021
 4615 1021 E7                   RST     20H             ; NEXT-CHAR
 4616 1022 C3 59 0F             JP      L0F59           ; jump back to S-LOOP-1
 4617 1025
 4618 1025              ; ---
 4619 1025
 4620 1025              ;; S-LTR-DGT
 4621 1025 FE 26        L1025:  CP      $26             ; compare to 'A'.
 4622 1027 38 1E                JR      C,L1047         ; forward if less to S-DECIMAL
 4623 1029
 4624 1029 CD 1C 11             CALL    L111C           ; routine LOOK-VARS
 4625 102C DA 4B 0D             JP      C,L0D4B         ; back if not found to REPORT-2
 4626 102F                                              ; a variable is always 'found' when checking
 4627 102F                                              ; syntax.
 4628 102F
 4629 102F CC A7 11             CALL    Z,L11A7         ; routine STK-VAR stacks string parameters or
 4630 1032                                              ; returns cell location if numeric.
 4631 1032
 4632 1032 3A 01 40             LD      A,($4001)       ; fetch FLAGS
 4633 1035 FE C0                CP      $C0             ; compare to numeric result/numeric operand
 4634 1037 38 4E                JR      C,L1087         ; forward if not numeric to S-CONT-2
 4635 1039
 4636 1039 23                   INC     HL              ; address numeric contents of variable.
 4637 103A ED 5B 1C 40          LD      DE,($401C)      ; set destination to STKEND
 4638 103E CD F6 19             CALL    L19F6           ; routine MOVE-FP stacks the five bytes
 4639 1041 EB                   EX      DE,HL           ; transfer new free location from DE to HL.
 4640 1042 22 1C 40             LD      ($401C),HL      ; update STKEND system variable.
 4641 1045 18 40                JR      L1087           ; forward to S-CONT-2
 4642 1047
 4643 1047              ; ---
 4644 1047
 4645 1047              ; The Scanning Decimal routine is invoked when a decimal point or digit is
 4646 1047              ; found in the expression.
 4647 1047              ; When checking syntax, then the 'hidden floating point' form is placed
 4648 1047              ; after the number in the BASIC line.
 4649 1047              ; In run-time, the digits are skipped and the floating point number is picked
 4650 1047              ; up.
 4651 1047
 4652 1047              ;; S-DECIMAL
 4653 1047 CD A6 0D     L1047:  CALL    L0DA6           ; routine SYNTAX-Z
 4654 104A 20 23                JR      NZ,L106F        ; forward in run-time to S-STK-DEC
 4655 104C
 4656 104C CD D9 14             CALL    L14D9           ; routine DEC-TO-FP
 4657 104F
 4658 104F DF                   RST     18H             ; GET-CHAR advances HL past digits
 4659 1050 01 06 00             LD      BC,$0006        ; six locations are required.
 4660 1053 CD 9E 09             CALL    L099E           ; routine MAKE-ROOM
 4661 1056 23                   INC     HL              ; point to first new location
 4662 1057 36 7E                LD      (HL),$7E        ; insert the number marker 126 decimal.
 4663 1059 23                   INC     HL              ; increment
 4664 105A EB                   EX      DE,HL           ; transfer destination to DE.
 4665 105B 2A 1C 40             LD      HL,($401C)      ; set HL from STKEND which points to the
 4666 105E                                              ; first location after the 'last value'
 4667 105E 0E 05                LD      C,$05           ; five bytes to move.
 4668 1060 A7                   AND     A               ; clear carry.
 4669 1061 ED 42                SBC     HL,BC           ; subtract five pointing to 'last value'.
 4670 1063 22 1C 40             LD      ($401C),HL      ; update STKEND thereby 'deleting the value.
 4671 1066
 4672 1066 ED B0                LDIR                    ; copy the five value bytes.
 4673 1068
 4674 1068 EB                   EX      DE,HL           ; basic pointer to HL which may be white-space
 4675 1069                                              ; following the number.
 4676 1069 2B                   DEC     HL              ; now points to last of five bytes.
 4677 106A CD 4C 00             CALL    L004C           ; routine TEMP-PTR1 advances the character
 4678 106D                                              ; address skipping any white-space.
 4679 106D 18 14                JR      L1083           ; forward to S-NUMERIC
 4680 106F                                              ; to signal a numeric result.
 4681 106F
 4682 106F              ; ---
 4683 106F
 4684 106F              ; In run-time the branch is here when a digit or point is encountered.
 4685 106F
 4686 106F              ;; S-STK-DEC
 4687 106F E7           L106F:  RST     20H             ; NEXT-CHAR
 4688 1070 FE 7E                CP      $7E             ; compare to 'number marker'
 4689 1072 20 FB                JR      NZ,L106F        ; loop back until found to S-STK-DEC
 4690 1074                                              ; skipping all the digits.
 4691 1074
 4692 1074 23                   INC     HL              ; point to first of five hidden bytes.
 4693 1075 ED 5B 1C 40          LD      DE,($401C)      ; set destination from STKEND system variable
 4694 1079 CD F6 19             CALL    L19F6           ; routine MOVE-FP stacks the number.
 4695 107C ED 53 1C 40          LD      ($401C),DE      ; update system variable STKEND.
 4696 1080 22 16 40             LD      ($4016),HL      ; update system variable CH_ADD.
 4697 1083
 4698 1083              ;; S-NUMERIC
 4699 1083 FD CB 01 F6  L1083:  SET     6,(IY+$01)      ; update FLAGS  - Signal numeric result
 4700 1087
 4701 1087              ;; S-CONT-2
 4702 1087 DF           L1087:  RST     18H             ; GET-CHAR
 4703 1088
 4704 1088              ;; S-CONT-3
 4705 1088 FE 10        L1088:  CP      $10             ; compare to opening bracket '('
 4706 108A 20 0C                JR      NZ,L1098        ; forward if not to S-OPERTR
 4707 108C
 4708 108C FD CB 01 76          BIT     6,(IY+$01)      ; test FLAGS  - Numeric or string result?
 4709 1090 20 2A                JR      NZ,L10BC        ; forward if numeric to S-LOOP
 4710 1092
 4711 1092              ; else is a string
 4712 1092
 4713 1092 CD 63 12             CALL    L1263           ; routine SLICING
 4714 1095
 4715 1095 E7                   RST     20H             ; NEXT-CHAR
 4716 1096 18 F0                JR      L1088           ; back to S-CONT-3
 4717 1098
 4718 1098              ; ---
 4719 1098
 4720 1098              ; the character is now manipulated to form an equivalent in the table of
 4721 1098              ; calculator literals. This is quite cumbersome and in the ZX Spectrum a
 4722 1098              ; simple look-up table was introduced at this point.
 4723 1098
 4724 1098              ;; S-OPERTR
 4725 1098 01 C3 00     L1098:  LD      BC,$00C3        ; prepare operator 'subtract' as default.
 4726 109B                                              ; also set B to zero for later indexing.
 4727 109B
 4728 109B FE 12                CP      $12             ; is character '>' ?
 4729 109D 38 1D                JR      C,L10BC         ; forward if less to S-LOOP as
 4730 109F                                              ; we have reached end of meaningful expression
 4731 109F
 4732 109F D6 16                SUB     $16             ; is character '-' ?
 4733 10A1 30 04                JR      NC,L10A7        ; forward with - * / and '**' '<>' to SUBMLTDIV
 4734 10A3
 4735 10A3 C6 0D                ADD     A,$0D           ; increase others by thirteen
 4736 10A5                                              ; $09 '>' thru $0C '+'
 4737 10A5 18 0E                JR      L10B5           ; forward to GET-PRIO
 4738 10A7
 4739 10A7              ; ---
 4740 10A7
 4741 10A7              ;; SUBMLTDIV
 4742 10A7 FE 03        L10A7:  CP      $03             ; isolate $00 '-', $01 '*', $02 '/'
 4743 10A9 38 0A                JR      C,L10B5         ; forward if so to GET-PRIO
 4744 10AB
 4745 10AB              ; else possibly originally $D8 '**' thru $DD '<>' already reduced by $16
 4746 10AB
 4747 10AB D6 C2                SUB     $C2             ; giving range $00 to $05
 4748 10AD 38 0D                JR      C,L10BC         ; forward if less to S-LOOP
 4749 10AF
 4750 10AF FE 06                CP      $06             ; test the upper limit for nonsense also
 4751 10B1 30 09                JR      NC,L10BC        ; forward if so to S-LOOP
 4752 10B3
 4753 10B3 C6 03                ADD     A,$03           ; increase by 3 to give combined operators of
 4754 10B5
 4755 10B5                                              ; $00 '-'
 4756 10B5                                              ; $01 '*'
 4757 10B5                                              ; $02 '/'
 4758 10B5
 4759 10B5                                              ; $03 '**'
 4760 10B5                                              ; $04 'OR'
 4761 10B5                                              ; $05 'AND'
 4762 10B5                                              ; $06 '<='
 4763 10B5                                              ; $07 '>='
 4764 10B5                                              ; $08 '<>'
 4765 10B5
 4766 10B5                                              ; $09 '>'
 4767 10B5                                              ; $0A '<'
 4768 10B5                                              ; $0B '='
 4769 10B5                                              ; $0C '+'
 4770 10B5
 4771 10B5              ;; GET-PRIO
 4772 10B5 81           L10B5:  ADD     A,C             ; add to default operation 'sub' ($C3)
 4773 10B6 4F                   LD      C,A             ; and place in operator byte - C.
 4774 10B7
 4775 10B7 21 4C 10             LD      HL,L110F - $C3  ; theoretical base of the priorities table.
 4776 10BA 09                   ADD     HL,BC           ; add C ( B is zero)
 4777 10BB 46                   LD      B,(HL)          ; pick up the priority in B
 4778 10BC
 4779 10BC              ;; S-LOOP
 4780 10BC D1           L10BC:  POP     DE              ; restore previous
 4781 10BD 7A                   LD      A,D             ; load A with priority.
 4782 10BE B8                   CP      B               ; is present priority higher
 4783 10BF 38 2C                JR      C,L10ED         ; forward if so to S-TIGHTER
 4784 10C1
 4785 10C1 A7                   AND     A               ; are both priorities zero
 4786 10C2 CA 18 00             JP      Z,L0018         ; exit if zero via GET-CHAR
 4787 10C5
 4788 10C5 C5                   PUSH    BC              ; stack present values
 4789 10C6 D5                   PUSH    DE              ; stack last values
 4790 10C7 CD A6 0D             CALL    L0DA6           ; routine SYNTAX-Z
 4791 10CA 28 09                JR      Z,L10D5         ; forward is checking syntax to S-SYNTEST
 4792 10CC
 4793 10CC 7B                   LD      A,E             ; fetch last operation
 4794 10CD E6 3F                AND     $3F             ; mask off the indicator bits to give true
 4795 10CF                                              ; calculator literal.
 4796 10CF 47                   LD      B,A             ; place in the B register for BREG
 4797 10D0
 4798 10D0              ; perform the single operation
 4799 10D0
 4800 10D0 EF                   RST     28H             ;; FP-CALC
 4801 10D1 37                   DEFB    $37             ;;fp-calc-2
 4802 10D2 34                   DEFB    $34             ;;end-calc
 4803 10D3
 4804 10D3 18 09                JR      L10DE           ; forward to S-RUNTEST
 4805 10D5
 4806 10D5              ; ---
 4807 10D5
 4808 10D5              ;; S-SYNTEST
 4809 10D5 7B           L10D5:  LD      A,E             ; transfer masked operator to A
 4810 10D6 FD AE 01             XOR     (IY+$01)        ; XOR with FLAGS like results will reset bit 6
 4811 10D9 E6 40                AND     $40             ; test bit 6
 4812 10DB
 4813 10DB              ;; S-RPORT-C
 4814 10DB C2 9A 0D     L10DB:  JP      NZ,L0D9A        ; back to REPORT-C if results do not agree.
 4815 10DE
 4816 10DE              ; ---
 4817 10DE
 4818 10DE              ; in run-time impose bit 7 of the operator onto bit 6 of the FLAGS
 4819 10DE
 4820 10DE              ;; S-RUNTEST
 4821 10DE D1           L10DE:  POP     DE              ; restore last operation.
 4822 10DF 21 01 40             LD      HL,$4001        ; address system variable FLAGS
 4823 10E2 CB F6                SET     6,(HL)          ; presume a numeric result
 4824 10E4 CB 7B                BIT     7,E             ; test expected result in operation
 4825 10E6 20 02                JR      NZ,L10EA        ; forward if numeric to S-LOOPEND
 4826 10E8
 4827 10E8 CB B6                RES     6,(HL)          ; reset to signal string result
 4828 10EA
 4829 10EA              ;; S-LOOPEND
 4830 10EA C1           L10EA:  POP     BC              ; restore present values
 4831 10EB 18 CF                JR      L10BC           ; back to S-LOOP
 4832 10ED
 4833 10ED              ; ---
 4834 10ED
 4835 10ED              ;; S-TIGHTER
 4836 10ED D5           L10ED:  PUSH    DE              ; push last values and consider these
 4837 10EE
 4838 10EE 79                   LD      A,C             ; get the present operator.
 4839 10EF FD CB 01 76          BIT     6,(IY+$01)      ; test FLAGS  - Numeric or string result?
 4840 10F3 20 15                JR      NZ,L110A        ; forward if numeric to S-NEXT
 4841 10F5
 4842 10F5 E6 3F                AND     $3F             ; strip indicator bits to give clear literal.
 4843 10F7 C6 08                ADD     A,$08           ; add eight - augmenting numeric to equivalent
 4844 10F9                                              ; string literals.
 4845 10F9 4F                   LD      C,A             ; place plain literal back in C.
 4846 10FA FE 10                CP      $10             ; compare to 'AND'
 4847 10FC 20 04                JR      NZ,L1102        ; forward if not to S-NOT-AND
 4848 10FE
 4849 10FE CB F1                SET     6,C             ; set the numeric operand required for 'AND'
 4850 1100 18 08                JR      L110A           ; forward to S-NEXT
 4851 1102
 4852 1102              ; ---
 4853 1102
 4854 1102              ;; S-NOT-AND
 4855 1102 38 D7        L1102:  JR      C,L10DB         ; back if less than 'AND' to S-RPORT-C
 4856 1104                                              ; Nonsense if '-', '*' etc.
 4857 1104
 4858 1104 FE 17                CP      $17             ; compare to 'strs-add' literal
 4859 1106 28 02                JR      Z,L110A         ; forward if so signaling string result
 4860 1108
 4861 1108 CB F9                SET     7,C             ; set bit to numeric (Boolean) for others.
 4862 110A
 4863 110A              ;; S-NEXT
 4864 110A C5           L110A:  PUSH    BC              ; stack 'present' values
 4865 110B
 4866 110B E7                   RST     20H             ; NEXT-CHAR
 4867 110C C3 59 0F             JP      L0F59           ; jump back to S-LOOP-1
 4868 110F
 4869 110F
 4870 110F
 4871 110F              ; -------------------------
 4872 110F              ; THE 'TABLE OF PRIORITIES'
 4873 110F              ; -------------------------
 4874 110F              ;
 4875 110F              ;
 4876 110F
 4877 110F              ;; tbl-pri
 4878 110F 06           L110F:  DEFB    $06             ;       '-'
 4879 1110 08                   DEFB    $08             ;       '*'
 4880 1111 08                   DEFB    $08             ;       '/'
 4881 1112 0A                   DEFB    $0A             ;       '**'
 4882 1113 02                   DEFB    $02             ;       'OR'
 4883 1114 03                   DEFB    $03             ;       'AND'
 4884 1115 05                   DEFB    $05             ;       '<='
 4885 1116 05                   DEFB    $05             ;       '>='
 4886 1117 05                   DEFB    $05             ;       '<>'
 4887 1118 05                   DEFB    $05             ;       '>'
 4888 1119 05                   DEFB    $05             ;       '<'
 4889 111A 05                   DEFB    $05             ;       '='
 4890 111B 06                   DEFB    $06             ;       '+'
 4891 111C
 4892 111C
 4893 111C              ; --------------------------
 4894 111C              ; THE 'LOOK-VARS' SUBROUTINE
 4895 111C              ; --------------------------
 4896 111C              ;
 4897 111C              ;
 4898 111C
 4899 111C              ;; LOOK-VARS
 4900 111C FD CB 01 F6  L111C:  SET     6,(IY+$01)      ; sv FLAGS  - Signal numeric result
 4901 1120
 4902 1120 DF                   RST     18H             ; GET-CHAR
 4903 1121 CD CE 14             CALL    L14CE           ; routine ALPHA
 4904 1124 D2 9A 0D             JP      NC,L0D9A        ; to REPORT-C
 4905 1127
 4906 1127 E5                   PUSH    HL              ;
 4907 1128 4F                   LD      C,A             ;
 4908 1129
 4909 1129 E7                   RST     20H             ; NEXT-CHAR
 4910 112A E5                   PUSH    HL              ;
 4911 112B CB A9                RES     5,C             ;
 4912 112D FE 10                CP      $10             ;
 4913 112F 28 17                JR      Z,L1148         ; to V-SYN/RUN
 4914 1131
 4915 1131 CB F1                SET     6,C             ;
 4916 1133 FE 0D                CP      $0D             ;
 4917 1135 28 0C                JR      Z,L1143         ; forward to V-STR-VAR
 4918 1137
 4919 1137 CB E9                SET     5,C             ;
 4920 1139
 4921 1139              ;; V-CHAR
 4922 1139 CD D2 14     L1139:  CALL    L14D2           ; routine ALPHANUM
 4923 113C 30 0A                JR      NC,L1148        ; forward when not to V-RUN/SYN
 4924 113E
 4925 113E CB B1                RES     6,C             ;
 4926 1140
 4927 1140 E7                   RST     20H             ; NEXT-CHAR
 4928 1141 18 F6                JR      L1139           ; loop back to V-CHAR
 4929 1143
 4930 1143              ; ---
 4931 1143
 4932 1143              ;; V-STR-VAR
 4933 1143 E7           L1143:  RST     20H             ; NEXT-CHAR
 4934 1144 FD CB 01 B6          RES     6,(IY+$01)      ; sv FLAGS  - Signal string result
 4935 1148
 4936 1148              ;; V-RUN/SYN
 4937 1148 41           L1148:  LD      B,C             ;
 4938 1149 CD A6 0D             CALL    L0DA6           ; routine SYNTAX-Z
 4939 114C 20 08                JR      NZ,L1156        ; forward to V-RUN
 4940 114E
 4941 114E 79                   LD      A,C             ;
 4942 114F E6 E0                AND     $E0             ;
 4943 1151 CB FF                SET     7,A             ;
 4944 1153 4F                   LD      C,A             ;
 4945 1154 18 34                JR      L118A           ; forward to V-SYNTAX
 4946 1156
 4947 1156              ; ---
 4948 1156
 4949 1156              ;; V-RUN
 4950 1156 2A 10 40     L1156:  LD      HL,($4010)      ; sv VARS
 4951 1159
 4952 1159              ;; V-EACH
 4953 1159 7E           L1159:  LD      A,(HL)          ;
 4954 115A E6 7F                AND     $7F             ;
 4955 115C 28 2A                JR      Z,L1188         ; to V-80-BYTE
 4956 115E
 4957 115E B9                   CP      C               ;
 4958 115F 20 1F                JR      NZ,L1180        ; to V-NEXT
 4959 1161
 4960 1161 17                   RLA                     ;
 4961 1162 87                   ADD     A,A             ;
 4962 1163 F2 95 11             JP      P,L1195         ; to V-FOUND-2
 4963 1166
 4964 1166 38 2D                JR      C,L1195         ; to V-FOUND-2
 4965 1168
 4966 1168 D1                   POP     DE              ;
 4967 1169 D5                   PUSH    DE              ;
 4968 116A E5                   PUSH    HL              ;
 4969 116B
 4970 116B              ;; V-MATCHES
 4971 116B 23           L116B:  INC     HL              ;
 4972 116C
 4973 116C              ;; V-SPACES
 4974 116C 1A           L116C:  LD      A,(DE)          ;
 4975 116D 13                   INC     DE              ;
 4976 116E A7                   AND     A               ;
 4977 116F 28 FB                JR      Z,L116C         ; back to V-SPACES
 4978 1171
 4979 1171 BE                   CP      (HL)            ;
 4980 1172 28 F7                JR      Z,L116B         ; back to V-MATCHES
 4981 1174
 4982 1174 F6 80                OR      $80             ;
 4983 1176 BE                   CP      (HL)            ;
 4984 1177 20 06                JR       NZ,L117F       ; forward to V-GET-PTR
 4985 1179
 4986 1179 1A                   LD      A,(DE)          ;
 4987 117A CD D2 14             CALL    L14D2           ; routine ALPHANUM
 4988 117D 30 15                JR      NC,L1194        ; forward to V-FOUND-1
 4989 117F
 4990 117F              ;; V-GET-PTR
 4991 117F E1           L117F:  POP     HL              ;
 4992 1180
 4993 1180              ;; V-NEXT
 4994 1180 C5           L1180:  PUSH    BC              ;
 4995 1181 CD F2 09             CALL    L09F2           ; routine NEXT-ONE
 4996 1184 EB                   EX      DE,HL           ;
 4997 1185 C1                   POP     BC              ;
 4998 1186 18 D1                JR      L1159           ; back to V-EACH
 4999 1188
 5000 1188              ; ---
 5001 1188
 5002 1188              ;; V-80-BYTE
 5003 1188 CB F8        L1188:  SET     7,B             ;
 5004 118A
 5005 118A              ;; V-SYNTAX
 5006 118A D1           L118A:  POP     DE              ;
 5007 118B
 5008 118B DF                   RST     18H             ; GET-CHAR
 5009 118C FE 10                CP      $10             ;
 5010 118E 28 09                JR      Z,L1199         ; forward to V-PASS
 5011 1190
 5012 1190 CB E8                SET     5,B             ;
 5013 1192 18 0D                JR      L11A1           ; forward to V-END
 5014 1194
 5015 1194              ; ---
 5016 1194
 5017 1194              ;; V-FOUND-1
 5018 1194 D1           L1194:  POP     DE              ;
 5019 1195
 5020 1195              ;; V-FOUND-2
 5021 1195 D1           L1195:  POP     DE              ;
 5022 1196 D1                   POP     DE              ;
 5023 1197 E5                   PUSH    HL              ;
 5024 1198
 5025 1198 DF                   RST     18H             ; GET-CHAR
 5026 1199
 5027 1199              ;; V-PASS
 5028 1199 CD D2 14     L1199:  CALL    L14D2           ; routine ALPHANUM
 5029 119C 30 03                JR      NC,L11A1        ; forward if not alphanumeric to V-END
 5030 119E
 5031 119E
 5032 119E E7                   RST     20H             ; NEXT-CHAR
 5033 119F 18 F8                JR      L1199           ; back to V-PASS
 5034 11A1
 5035 11A1              ; ---
 5036 11A1
 5037 11A1              ;; V-END
 5038 11A1 E1           L11A1:  POP     HL              ;
 5039 11A2 CB 10                RL      B               ;
 5040 11A4 CB 70                BIT     6,B             ;
 5041 11A6 C9                   RET                     ;
 5042 11A7
 5043 11A7              ; ------------------------
 5044 11A7              ; THE 'STK-VAR' SUBROUTINE
 5045 11A7              ; ------------------------
 5046 11A7              ;
 5047 11A7              ;
 5048 11A7
 5049 11A7              ;; STK-VAR
 5050 11A7 AF           L11A7:  XOR     A               ;
 5051 11A8 47                   LD      B,A             ;
 5052 11A9 CB 79                BIT     7,C             ;
 5053 11AB 20 4B                JR      NZ,L11F8        ; forward to SV-COUNT
 5054 11AD
 5055 11AD CB 7E                BIT     7,(HL)          ;
 5056 11AF 20 0E                JR      NZ,L11BF        ; forward to SV-ARRAYS
 5057 11B1
 5058 11B1 3C                   INC     A               ;
 5059 11B2
 5060 11B2              ;; SV-SIMPLE$
 5061 11B2 23           L11B2:  INC     HL              ;
 5062 11B3 4E                   LD      C,(HL)          ;
 5063 11B4 23                   INC     HL              ;
 5064 11B5 46                   LD      B,(HL)          ;
 5065 11B6 23                   INC     HL              ;
 5066 11B7 EB                   EX      DE,HL           ;
 5067 11B8 CD C3 12             CALL    L12C3           ; routine STK-STO-$
 5068 11BB
 5069 11BB DF                   RST     18H             ; GET-CHAR
 5070 11BC C3 5A 12             JP      L125A           ; jump forward to SV-SLICE?
 5071 11BF
 5072 11BF              ; ---
 5073 11BF
 5074 11BF              ;; SV-ARRAYS
 5075 11BF 23           L11BF:  INC     HL              ;
 5076 11C0 23                   INC     HL              ;
 5077 11C1 23                   INC     HL              ;
 5078 11C2 46                   LD      B,(HL)          ;
 5079 11C3 CB 71                BIT     6,C             ;
 5080 11C5 28 0A                JR      Z,L11D1         ; forward to SV-PTR
 5081 11C7
 5082 11C7 05                   DEC     B               ;
 5083 11C8 28 E8                JR      Z,L11B2         ; forward to SV-SIMPLE$
 5084 11CA
 5085 11CA EB                   EX      DE,HL           ;
 5086 11CB
 5087 11CB DF                   RST     18H             ; GET-CHAR
 5088 11CC FE 10                CP      $10             ;
 5089 11CE 20 61                JR      NZ,L1231        ; forward to REPORT-3
 5090 11D0
 5091 11D0 EB                   EX      DE,HL           ;
 5092 11D1
 5093 11D1              ;; SV-PTR
 5094 11D1 EB           L11D1:  EX      DE,HL           ;
 5095 11D2 18 24                JR      L11F8           ; forward to SV-COUNT
 5096 11D4
 5097 11D4              ; ---
 5098 11D4
 5099 11D4              ;; SV-COMMA
 5100 11D4 E5           L11D4:  PUSH    HL              ;
 5101 11D5
 5102 11D5 DF                   RST     18H             ; GET-CHAR
 5103 11D6 E1                   POP     HL              ;
 5104 11D7 FE 1A                CP      $1A             ;
 5105 11D9 28 20                JR      Z,L11FB         ; forward to SV-LOOP
 5106 11DB
 5107 11DB CB 79                BIT     7,C             ;
 5108 11DD 28 52                JR      Z,L1231         ; forward to REPORT-3
 5109 11DF
 5110 11DF CB 71                BIT     6,C             ;
 5111 11E1 20 06                JR      NZ,L11E9        ; forward to SV-CLOSE
 5112 11E3
 5113 11E3 FE 11                CP      $11             ;
 5114 11E5 20 3C                JR      NZ,L1223        ; forward to SV-RPT-C
 5115 11E7
 5116 11E7
 5117 11E7 E7                   RST     20H             ; NEXT-CHAR
 5118 11E8 C9                   RET                     ;
 5119 11E9
 5120 11E9              ; ---
 5121 11E9
 5122 11E9              ;; SV-CLOSE
 5123 11E9 FE 11        L11E9:  CP      $11             ;
 5124 11EB 28 6C                JR      Z,L1259         ; forward to SV-DIM
 5125 11ED
 5126 11ED FE DF                CP      $DF             ;
 5127 11EF 20 32                JR      NZ,L1223        ; forward to SV-RPT-C
 5128 11F1
 5129 11F1
 5130 11F1              ;; SV-CH-ADD
 5131 11F1 DF           L11F1:  RST     18H             ; GET-CHAR
 5132 11F2 2B                   DEC     HL              ;
 5133 11F3 22 16 40             LD      ($4016),HL      ; sv CH_ADD
 5134 11F6 18 5E                JR      L1256           ; forward to SV-SLICE
 5135 11F8
 5136 11F8              ; ---
 5137 11F8
 5138 11F8              ;; SV-COUNT
 5139 11F8 21 00 00     L11F8:  LD      HL,$0000        ;
 5140 11FB
 5141 11FB              ;; SV-LOOP
 5142 11FB E5           L11FB:  PUSH    HL              ;
 5143 11FC
 5144 11FC E7                   RST     20H             ; NEXT-CHAR
 5145 11FD E1                   POP     HL              ;
 5146 11FE 79                   LD      A,C             ;
 5147 11FF FE C0                CP      $C0             ;
 5148 1201 20 09                JR      NZ,L120C        ; forward to SV-MULT
 5149 1203
 5150 1203
 5151 1203 DF                   RST     18H             ; GET-CHAR
 5152 1204 FE 11                CP      $11             ;
 5153 1206 28 51                JR      Z,L1259         ; forward to SV-DIM
 5154 1208
 5155 1208 FE DF                CP      $DF             ;
 5156 120A 28 E5                JR      Z,L11F1         ; back to SV-CH-ADD
 5157 120C
 5158 120C              ;; SV-MULT
 5159 120C C5           L120C:  PUSH    BC              ;
 5160 120D E5                   PUSH    HL              ;
 5161 120E CD FF 12             CALL    L12FF           ; routine DE,(DE+1)
 5162 1211 E3                   EX      (SP),HL         ;
 5163 1212 EB                   EX      DE,HL           ;
 5164 1213 CD DD 12             CALL    L12DD           ; routine INT-EXP1
 5165 1216 38 19                JR      C,L1231         ; forward to REPORT-3
 5166 1218
 5167 1218 0B                   DEC     BC              ;
 5168 1219 CD 05 13             CALL    L1305           ; routine GET-HL*DE
 5169 121C 09                   ADD     HL,BC           ;
 5170 121D D1                   POP     DE              ;
 5171 121E C1                   POP     BC              ;
 5172 121F 10 B3                DJNZ    L11D4           ; loop back to SV-COMMA
 5173 1221
 5174 1221 CB 79                BIT     7,C             ;
 5175 1223
 5176 1223              ;; SV-RPT-C
 5177 1223 20 66        L1223:  JR      NZ,L128B        ; relative jump to SL-RPT-C
 5178 1225
 5179 1225 E5                   PUSH    HL              ;
 5180 1226 CB 71                BIT     6,C             ;
 5181 1228 20 13                JR      NZ,L123D        ; forward to SV-ELEM$
 5182 122A
 5183 122A 42                   LD      B,D             ;
 5184 122B 4B                   LD      C,E             ;
 5185 122C
 5186 122C DF                   RST     18H             ; GET-CHAR
 5187 122D FE 11                CP      $11             ; is character a ')' ?
 5188 122F 28 02                JR      Z,L1233         ; skip forward to SV-NUMBER
 5189 1231
 5190 1231
 5191 1231              ;; REPORT-3
 5192 1231 CF           L1231:  RST     08H             ; ERROR-1
 5193 1232 02                   DEFB    $02             ; Error Report: Subscript wrong
 5194 1233
 5195 1233
 5196 1233              ;; SV-NUMBER
 5197 1233 E7           L1233:  RST     20H             ; NEXT-CHAR
 5198 1234 E1                   POP     HL              ;
 5199 1235 11 05 00             LD      DE,$0005        ;
 5200 1238 CD 05 13             CALL    L1305           ; routine GET-HL*DE
 5201 123B 09                   ADD     HL,BC           ;
 5202 123C C9                   RET                     ; return                            >>
 5203 123D
 5204 123D              ; ---
 5205 123D
 5206 123D              ;; SV-ELEM$
 5207 123D CD FF 12     L123D:  CALL    L12FF           ; routine DE,(DE+1)
 5208 1240 E3                   EX      (SP),HL         ;
 5209 1241 CD 05 13             CALL    L1305           ; routine GET-HL*DE
 5210 1244 C1                   POP     BC              ;
 5211 1245 09                   ADD     HL,BC           ;
 5212 1246 23                   INC     HL              ;
 5213 1247 42                   LD      B,D             ;
 5214 1248 4B                   LD      C,E             ;
 5215 1249 EB                   EX      DE,HL           ;
 5216 124A CD C2 12             CALL    L12C2           ; routine STK-ST-0
 5217 124D
 5218 124D DF                   RST     18H             ; GET-CHAR
 5219 124E FE 11                CP      $11             ; is it ')' ?
 5220 1250 28 07                JR      Z,L1259         ; forward if so to SV-DIM
 5221 1252
 5222 1252 FE 1A                CP      $1A             ; is it ',' ?
 5223 1254 20 DB                JR      NZ,L1231        ; back if not to REPORT-3
 5224 1256
 5225 1256              ;; SV-SLICE
 5226 1256 CD 63 12     L1256:  CALL    L1263           ; routine SLICING
 5227 1259
 5228 1259              ;; SV-DIM
 5229 1259 E7           L1259:  RST     20H             ; NEXT-CHAR
 5230 125A
 5231 125A              ;; SV-SLICE?
 5232 125A FE 10        L125A:  CP      $10             ;
 5233 125C 28 F8                JR      Z,L1256         ; back to SV-SLICE
 5234 125E
 5235 125E FD CB 01 B6          RES     6,(IY+$01)      ; sv FLAGS  - Signal string result
 5236 1262 C9                   RET                     ; return.
 5237 1263
 5238 1263              ; ------------------------
 5239 1263              ; THE 'SLICING' SUBROUTINE
 5240 1263              ; ------------------------
 5241 1263              ;
 5242 1263              ;
 5243 1263
 5244 1263              ;; SLICING
 5245 1263 CD A6 0D     L1263:  CALL    L0DA6           ; routine SYNTAX-Z
 5246 1266 C4 F8 13             CALL    NZ,L13F8        ; routine STK-FETCH
 5247 1269
 5248 1269 E7                   RST     20H             ; NEXT-CHAR
 5249 126A FE 11                CP      $11             ; is it ')' ?
 5250 126C 28 50                JR      Z,L12BE         ; forward if so to SL-STORE
 5251 126E
 5252 126E D5                   PUSH    DE              ;
 5253 126F AF                   XOR     A               ;
 5254 1270 F5                   PUSH    AF              ;
 5255 1271 C5                   PUSH    BC              ;
 5256 1272 11 01 00             LD      DE,$0001        ;
 5257 1275
 5258 1275 DF                   RST     18H             ; GET-CHAR
 5259 1276 E1                   POP     HL              ;
 5260 1277 FE DF                CP      $DF             ; is it 'TO' ?
 5261 1279 28 17                JR      Z,L1292         ; forward if so to SL-SECOND
 5262 127B
 5263 127B F1                   POP     AF              ;
 5264 127C CD DE 12             CALL    L12DE           ; routine INT-EXP2
 5265 127F F5                   PUSH    AF              ;
 5266 1280 50                   LD      D,B             ;
 5267 1281 59                   LD      E,C             ;
 5268 1282 E5                   PUSH    HL              ;
 5269 1283
 5270 1283 DF                   RST     18H             ; GET-CHAR
 5271 1284 E1                   POP     HL              ;
 5272 1285 FE DF                CP      $DF             ; is it 'TO' ?
 5273 1287 28 09                JR      Z,L1292         ; forward if so to SL-SECOND
 5274 1289
 5275 1289 FE 11                CP      $11             ;
 5276 128B
 5277 128B              ;; SL-RPT-C
 5278 128B C2 9A 0D     L128B:  JP      NZ,L0D9A        ; to REPORT-C
 5279 128E
 5280 128E 62                   LD      H,D             ;
 5281 128F 6B                   LD      L,E             ;
 5282 1290 18 13                JR      L12A5           ; forward to SL-DEFINE
 5283 1292
 5284 1292              ; ---
 5285 1292
 5286 1292              ;; SL-SECOND
 5287 1292 E5           L1292:  PUSH    HL              ;
 5288 1293
 5289 1293 E7                   RST     20H             ; NEXT-CHAR
 5290 1294 E1                   POP     HL              ;
 5291 1295 FE 11                CP      $11             ; is it ')' ?
 5292 1297 28 0C                JR      Z,L12A5         ; forward if so to SL-DEFINE
 5293 1299
 5294 1299 F1                   POP     AF              ;
 5295 129A CD DE 12             CALL    L12DE           ; routine INT-EXP2
 5296 129D F5                   PUSH    AF              ;
 5297 129E
 5298 129E DF                   RST     18H             ; GET-CHAR
 5299 129F 60                   LD      H,B             ;
 5300 12A0 69                   LD      L,C             ;
 5301 12A1 FE 11                CP      $11             ; is it ')' ?
 5302 12A3 20 E6                JR      NZ,L128B        ; back if not to SL-RPT-C
 5303 12A5
 5304 12A5              ;; SL-DEFINE
 5305 12A5 F1           L12A5:  POP     AF              ;
 5306 12A6 E3                   EX      (SP),HL         ;
 5307 12A7 19                   ADD     HL,DE           ;
 5308 12A8 2B                   DEC     HL              ;
 5309 12A9 E3                   EX      (SP),HL         ;
 5310 12AA A7                   AND     A               ;
 5311 12AB ED 52                SBC     HL,DE           ;
 5312 12AD 01 00 00             LD      BC,$0000        ;
 5313 12B0 38 07                JR      C,L12B9         ; forward to SL-OVER
 5314 12B2
 5315 12B2 23                   INC     HL              ;
 5316 12B3 A7                   AND     A               ;
 5317 12B4 FA 31 12             JP      M,L1231         ; jump back to REPORT-3
 5318 12B7
 5319 12B7 44                   LD      B,H             ;
 5320 12B8 4D                   LD      C,L             ;
 5321 12B9
 5322 12B9              ;; SL-OVER
 5323 12B9 D1           L12B9:  POP     DE              ;
 5324 12BA FD CB 01 B6          RES     6,(IY+$01)      ; sv FLAGS  - Signal string result
 5325 12BE
 5326 12BE              ;; SL-STORE
 5327 12BE CD A6 0D     L12BE:  CALL    L0DA6           ; routine SYNTAX-Z
 5328 12C1 C8                   RET     Z               ; return if checking syntax.
 5329 12C2
 5330 12C2              ; --------------------------
 5331 12C2              ; THE 'STK-STORE' SUBROUTINE
 5332 12C2              ; --------------------------
 5333 12C2              ;
 5334 12C2              ;
 5335 12C2
 5336 12C2              ;; STK-ST-0
 5337 12C2 AF           L12C2:  XOR     A               ;
 5338 12C3
 5339 12C3              ;; STK-STO-$
 5340 12C3 C5           L12C3:  PUSH    BC              ;
 5341 12C4 CD EB 19             CALL    L19EB           ; routine TEST-5-SP
 5342 12C7 C1                   POP     BC              ;
 5343 12C8 2A 1C 40             LD      HL,($401C)      ; sv STKEND
 5344 12CB 77                   LD      (HL),A          ;
 5345 12CC 23                   INC     HL              ;
 5346 12CD 73                   LD      (HL),E          ;
 5347 12CE 23                   INC     HL              ;
 5348 12CF 72                   LD      (HL),D          ;
 5349 12D0 23                   INC     HL              ;
 5350 12D1 71                   LD      (HL),C          ;
 5351 12D2 23                   INC     HL              ;
 5352 12D3 70                   LD      (HL),B          ;
 5353 12D4 23                   INC     HL              ;
 5354 12D5 22 1C 40             LD      ($401C),HL      ; sv STKEND
 5355 12D8 FD CB 01 B6          RES     6,(IY+$01)      ; update FLAGS - signal string result
 5356 12DC C9                   RET                     ; return.
 5357 12DD
 5358 12DD              ; -------------------------
 5359 12DD              ; THE 'INT EXP' SUBROUTINES
 5360 12DD              ; -------------------------
 5361 12DD              ;
 5362 12DD              ;
 5363 12DD
 5364 12DD              ;; INT-EXP1
 5365 12DD AF           L12DD:  XOR     A               ;
 5366 12DE
 5367 12DE              ;; INT-EXP2
 5368 12DE D5           L12DE:  PUSH    DE              ;
 5369 12DF E5                   PUSH    HL              ;
 5370 12E0 F5                   PUSH    AF              ;
 5371 12E1 CD 92 0D             CALL    L0D92           ; routine CLASS-6
 5372 12E4 F1                   POP     AF              ;
 5373 12E5 CD A6 0D             CALL    L0DA6           ; routine SYNTAX-Z
 5374 12E8 28 12                JR      Z,L12FC         ; forward if checking syntax to I-RESTORE
 5375 12EA
 5376 12EA F5                   PUSH    AF              ;
 5377 12EB CD A7 0E             CALL    L0EA7           ; routine FIND-INT
 5378 12EE D1                   POP     DE              ;
 5379 12EF 78                   LD      A,B             ;
 5380 12F0 B1                   OR      C               ;
 5381 12F1 37                   SCF                     ; Set Carry Flag
 5382 12F2 28 05                JR      Z,L12F9         ; forward to I-CARRY
 5383 12F4
 5384 12F4 E1                   POP     HL              ;
 5385 12F5 E5                   PUSH    HL              ;
 5386 12F6 A7                   AND     A               ;
 5387 12F7 ED 42                SBC     HL,BC           ;
 5388 12F9
 5389 12F9              ;; I-CARRY
 5390 12F9 7A           L12F9:  LD      A,D             ;
 5391 12FA DE 00                SBC     A,$00           ;
 5392 12FC
 5393 12FC              ;; I-RESTORE
 5394 12FC E1           L12FC:  POP     HL              ;
 5395 12FD D1                   POP     DE              ;
 5396 12FE C9                   RET                     ;
 5397 12FF
 5398 12FF              ; --------------------------
 5399 12FF              ; THE 'DE,(DE+1)' SUBROUTINE
 5400 12FF              ; --------------------------
 5401 12FF              ; INDEX and LOAD Z80 subroutine.
 5402 12FF              ; This emulates the 6800 processor instruction LDX 1,X which loads a two-byte
 5403 12FF              ; value from memory into the register indexing it. Often these are hardly worth
 5404 12FF              ; the bother of writing as subroutines and this one doesn't save any time or
 5405 12FF              ; memory. The timing and space overheads have to be offset against the ease of
 5406 12FF              ; writing and the greater program readability from using such toolkit routines.
 5407 12FF
 5408 12FF              ;; DE,(DE+1)
 5409 12FF EB           L12FF:  EX      DE,HL           ; move index address into HL.
 5410 1300 23                   INC     HL              ; increment to address word.
 5411 1301 5E                   LD      E,(HL)          ; pick up word low-order byte.
 5412 1302 23                   INC     HL              ; index high-order byte and
 5413 1303 56                   LD      D,(HL)          ; pick it up.
 5414 1304 C9                   RET                     ; return with DE = word.
 5415 1305
 5416 1305              ; --------------------------
 5417 1305              ; THE 'GET-HL*DE' SUBROUTINE
 5418 1305              ; --------------------------
 5419 1305              ;
 5420 1305
 5421 1305              ;; GET-HL*DE
 5422 1305 CD A6 0D     L1305:  CALL    L0DA6           ; routine SYNTAX-Z
 5423 1308 C8                   RET     Z               ;
 5424 1309
 5425 1309 C5                   PUSH    BC              ;
 5426 130A 06 10                LD      B,$10           ;
 5427 130C 7C                   LD      A,H             ;
 5428 130D 4D                   LD      C,L             ;
 5429 130E 21 00 00             LD      HL,$0000        ;
 5430 1311
 5431 1311              ;; HL-LOOP
 5432 1311 29           L1311:  ADD     HL,HL           ;
 5433 1312 38 06                JR      C,L131A         ; forward with carry to HL-END
 5434 1314
 5435 1314 CB 11                RL      C               ;
 5436 1316 17                   RLA                     ;
 5437 1317 30 04                JR      NC,L131D        ; forward with no carry to HL-AGAIN
 5438 1319
 5439 1319 19                   ADD     HL,DE           ;
 5440 131A
 5441 131A              ;; HL-END
 5442 131A DA D3 0E     L131A:  JP      C,L0ED3         ; to REPORT-4
 5443 131D
 5444 131D              ;; HL-AGAIN
 5445 131D 10 F2        L131D:  DJNZ    L1311           ; loop back to HL-LOOP
 5446 131F
 5447 131F C1                   POP     BC              ;
 5448 1320 C9                   RET                     ; return.
 5449 1321
 5450 1321              ; --------------------
 5451 1321              ; THE 'LET' SUBROUTINE
 5452 1321              ; --------------------
 5453 1321              ;
 5454 1321              ;
 5455 1321
 5456 1321              ;; LET
 5457 1321 2A 12 40     L1321:  LD      HL,($4012)      ; sv DEST-lo
 5458 1324 FD CB 2D 4E          BIT     1,(IY+$2D)      ; sv FLAGX
 5459 1328 28 44                JR      Z,L136E         ; forward to L-EXISTS
 5460 132A
 5461 132A 01 05 00             LD      BC,$0005        ;
 5462 132D
 5463 132D              ;; L-EACH-CH
 5464 132D 03           L132D:  INC     BC              ;
 5465 132E
 5466 132E              ; check
 5467 132E
 5468 132E              ;; L-NO-SP
 5469 132E 23           L132E:  INC     HL              ;
 5470 132F 7E                   LD      A,(HL)          ;
 5471 1330 A7                   AND     A               ;
 5472 1331 28 FB                JR      Z,L132E         ; back to L-NO-SP
 5473 1333
 5474 1333 CD D2 14             CALL    L14D2           ; routine ALPHANUM
 5475 1336 38 F5                JR      C,L132D         ; back to L-EACH-CH
 5476 1338
 5477 1338 FE 0D                CP      $0D             ; is it '$' ?
 5478 133A CA C8 13             JP      Z,L13C8         ; forward if so to L-NEW$
 5479 133D
 5480 133D
 5481 133D F7                   RST     30H             ; BC-SPACES
 5482 133E D5                   PUSH    DE              ;
 5483 133F 2A 12 40             LD      HL,($4012)      ; sv DEST
 5484 1342 1B                   DEC     DE              ;
 5485 1343 79                   LD      A,C             ;
 5486 1344 D6 06                SUB     $06             ;
 5487 1346 47                   LD      B,A             ;
 5488 1347 3E 40                LD      A,$40           ;
 5489 1349 28 0E                JR      Z,L1359         ; forward to L-SINGLE
 5490 134B
 5491 134B              ;; L-CHAR
 5492 134B 23           L134B:  INC     HL              ;
 5493 134C 7E                   LD      A,(HL)          ;
 5494 134D A7                   AND     A               ; is it a space ?
 5495 134E 28 FB                JR      Z,L134B         ; back to L-CHAR
 5496 1350
 5497 1350 13                   INC     DE              ;
 5498 1351 12                   LD      (DE),A          ;
 5499 1352 10 F7                DJNZ    L134B           ; loop back to L-CHAR
 5500 1354
 5501 1354 F6 80                OR      $80             ;
 5502 1356 12                   LD      (DE),A          ;
 5503 1357 3E 80                LD      A,$80           ;
 5504 1359
 5505 1359              ;; L-SINGLE
 5506 1359 2A 12 40     L1359:  LD      HL,($4012)      ; sv DEST-lo
 5507 135C AE                   XOR     (HL)            ;
 5508 135D E1                   POP     HL              ;
 5509 135E CD E7 13             CALL    L13E7           ; routine L-FIRST
 5510 1361
 5511 1361              ;; L-NUMERIC
 5512 1361 E5           L1361:  PUSH    HL              ;
 5513 1362
 5514 1362 EF                   RST     28H             ;; FP-CALC
 5515 1363 02                   DEFB    $02             ;;delete
 5516 1364 34                   DEFB    $34             ;;end-calc
 5517 1365
 5518 1365 E1                   POP     HL              ;
 5519 1366 01 05 00             LD      BC,$0005        ;
 5520 1369 A7                   AND     A               ;
 5521 136A ED 42                SBC     HL,BC           ;
 5522 136C 18 40                JR      L13AE           ; forward to L-ENTER
 5523 136E
 5524 136E              ; ---
 5525 136E
 5526 136E              ;; L-EXISTS
 5527 136E FD CB 01 76  L136E:  BIT     6,(IY+$01)      ; sv FLAGS  - Numeric or string result?
 5528 1372 28 06                JR      Z,L137A         ; forward to L-DELETE$
 5529 1374
 5530 1374 11 06 00             LD      DE,$0006        ;
 5531 1377 19                   ADD     HL,DE           ;
 5532 1378 18 E7                JR      L1361           ; back to L-NUMERIC
 5533 137A
 5534 137A              ; ---
 5535 137A
 5536 137A              ;; L-DELETE$
 5537 137A 2A 12 40     L137A:  LD      HL,($4012)      ; sv DEST-lo
 5538 137D ED 4B 2E 40          LD      BC,($402E)      ; sv STRLEN_lo
 5539 1381 FD CB 2D 46          BIT     0,(IY+$2D)      ; sv FLAGX
 5540 1385 20 30                JR      NZ,L13B7        ; forward to L-ADD$
 5541 1387
 5542 1387 78                   LD      A,B             ;
 5543 1388 B1                   OR      C               ;
 5544 1389 C8                   RET     Z               ;
 5545 138A
 5546 138A E5                   PUSH    HL              ;
 5547 138B
 5548 138B F7                   RST     30H             ; BC-SPACES
 5549 138C D5                   PUSH    DE              ;
 5550 138D C5                   PUSH    BC              ;
 5551 138E 54                   LD      D,H             ;
 5552 138F 5D                   LD      E,L             ;
 5553 1390 23                   INC     HL              ;
 5554 1391 36 00                LD      (HL),$00        ;
 5555 1393 ED B8                LDDR                    ; Copy Bytes
 5556 1395 E5                   PUSH    HL              ;
 5557 1396 CD F8 13             CALL    L13F8           ; routine STK-FETCH
 5558 1399 E1                   POP     HL              ;
 5559 139A E3                   EX      (SP),HL         ;
 5560 139B A7                   AND     A               ;
 5561 139C ED 42                SBC     HL,BC           ;
 5562 139E 09                   ADD     HL,BC           ;
 5563 139F 30 02                JR      NC,L13A3        ; forward to L-LENGTH
 5564 13A1
 5565 13A1 44                   LD      B,H             ;
 5566 13A2 4D                   LD      C,L             ;
 5567 13A3
 5568 13A3              ;; L-LENGTH
 5569 13A3 E3           L13A3:  EX      (SP),HL         ;
 5570 13A4 EB                   EX      DE,HL           ;
 5571 13A5 78                   LD      A,B             ;
 5572 13A6 B1                   OR      C               ;
 5573 13A7 28 02                JR      Z,L13AB         ; forward if zero to L-IN-W/S
 5574 13A9
 5575 13A9 ED B0                LDIR                    ; Copy Bytes
 5576 13AB
 5577 13AB              ;; L-IN-W/S
 5578 13AB C1           L13AB:  POP     BC              ;
 5579 13AC D1                   POP     DE              ;
 5580 13AD E1                   POP     HL              ;
 5581 13AE
 5582 13AE              ; ------------------------
 5583 13AE              ; THE 'L-ENTER' SUBROUTINE
 5584 13AE              ; ------------------------
 5585 13AE              ;
 5586 13AE
 5587 13AE              ;; L-ENTER
 5588 13AE EB           L13AE:  EX      DE,HL           ;
 5589 13AF 78                   LD      A,B             ;
 5590 13B0 B1                   OR      C               ;
 5591 13B1 C8                   RET     Z               ;
 5592 13B2
 5593 13B2 D5                   PUSH    DE              ;
 5594 13B3 ED B0                LDIR                    ; Copy Bytes
 5595 13B5 E1                   POP     HL              ;
 5596 13B6 C9                   RET                     ; return.
 5597 13B7
 5598 13B7              ; ---
 5599 13B7
 5600 13B7              ;; L-ADD$
 5601 13B7 2B           L13B7:  DEC     HL              ;
 5602 13B8 2B                   DEC     HL              ;
 5603 13B9 2B                   DEC     HL              ;
 5604 13BA 7E                   LD      A,(HL)          ;
 5605 13BB E5                   PUSH    HL              ;
 5606 13BC C5                   PUSH    BC              ;
 5607 13BD
 5608 13BD CD CE 13             CALL    L13CE           ; routine L-STRING
 5609 13C0
 5610 13C0 C1                   POP     BC              ;
 5611 13C1 E1                   POP     HL              ;
 5612 13C2 03                   INC     BC              ;
 5613 13C3 03                   INC     BC              ;
 5614 13C4 03                   INC     BC              ;
 5615 13C5 C3 60 0A             JP      L0A60           ; jump back to exit via RECLAIM-2
 5616 13C8
 5617 13C8              ; ---
 5618 13C8
 5619 13C8              ;; L-NEW$
 5620 13C8 3E 60        L13C8:  LD      A,$60           ; prepare mask %01100000
 5621 13CA 2A 12 40             LD      HL,($4012)      ; sv DEST-lo
 5622 13CD AE                   XOR     (HL)            ;
 5623 13CE
 5624 13CE              ; -------------------------
 5625 13CE              ; THE 'L-STRING' SUBROUTINE
 5626 13CE              ; -------------------------
 5627 13CE              ;
 5628 13CE
 5629 13CE              ;; L-STRING
 5630 13CE F5           L13CE:  PUSH    AF              ;
 5631 13CF CD F8 13             CALL    L13F8           ; routine STK-FETCH
 5632 13D2 EB                   EX      DE,HL           ;
 5633 13D3 09                   ADD     HL,BC           ;
 5634 13D4 E5                   PUSH    HL              ;
 5635 13D5 03                   INC     BC              ;
 5636 13D6 03                   INC     BC              ;
 5637 13D7 03                   INC     BC              ;
 5638 13D8
 5639 13D8 F7                   RST     30H             ; BC-SPACES
 5640 13D9 EB                   EX      DE,HL           ;
 5641 13DA E1                   POP     HL              ;
 5642 13DB 0B                   DEC     BC              ;
 5643 13DC 0B                   DEC     BC              ;
 5644 13DD C5                   PUSH    BC              ;
 5645 13DE ED B8                LDDR                    ; Copy Bytes
 5646 13E0 EB                   EX      DE,HL           ;
 5647 13E1 C1                   POP     BC              ;
 5648 13E2 0B                   DEC     BC              ;
 5649 13E3 70                   LD      (HL),B          ;
 5650 13E4 2B                   DEC     HL              ;
 5651 13E5 71                   LD      (HL),C          ;
 5652 13E6 F1                   POP     AF              ;
 5653 13E7
 5654 13E7              ;; L-FIRST
 5655 13E7 F5           L13E7:  PUSH    AF              ;
 5656 13E8 CD C7 14             CALL    L14C7           ; routine REC-V80
 5657 13EB F1                   POP     AF              ;
 5658 13EC 2B                   DEC     HL              ;
 5659 13ED 77                   LD      (HL),A          ;
 5660 13EE 2A 1A 40             LD      HL,($401A)      ; sv STKBOT_lo
 5661 13F1 22 14 40             LD      ($4014),HL      ; sv E_LINE_lo
 5662 13F4 2B                   DEC     HL              ;
 5663 13F5 36 80                LD      (HL),$80        ;
 5664 13F7 C9                   RET                     ;
 5665 13F8
 5666 13F8              ; --------------------------
 5667 13F8              ; THE 'STK-FETCH' SUBROUTINE
 5668 13F8              ; --------------------------
 5669 13F8              ; This routine fetches a five-byte value from the calculator stack
 5670 13F8              ; reducing the pointer to the end of the stack by five.
 5671 13F8              ; For a floating-point number the exponent is in A and the mantissa
 5672 13F8              ; is the thirty-two bits EDCB.
 5673 13F8              ; For strings, the start of the string is in DE and the length in BC.
 5674 13F8              ; A is unused.
 5675 13F8
 5676 13F8              ;; STK-FETCH
 5677 13F8 2A 1C 40     L13F8:  LD      HL,($401C)      ; load HL from system variable STKEND
 5678 13FB
 5679 13FB 2B                   DEC     HL              ;
 5680 13FC 46                   LD      B,(HL)          ;
 5681 13FD 2B                   DEC     HL              ;
 5682 13FE 4E                   LD      C,(HL)          ;
 5683 13FF 2B                   DEC     HL              ;
 5684 1400 56                   LD      D,(HL)          ;
 5685 1401 2B                   DEC     HL              ;
 5686 1402 5E                   LD      E,(HL)          ;
 5687 1403 2B                   DEC     HL              ;
 5688 1404 7E                   LD      A,(HL)          ;
 5689 1405
 5690 1405 22 1C 40             LD      ($401C),HL      ; set system variable STKEND to lower value.
 5691 1408 C9                   RET                     ; return.
 5692 1409
 5693 1409              ; -------------------------
 5694 1409              ; THE 'DIM' COMMAND ROUTINE
 5695 1409              ; -------------------------
 5696 1409              ; An array is created and initialized to zeros which is also the space
 5697 1409              ; character on the ZX81.
 5698 1409
 5699 1409              ;; DIM
 5700 1409 CD 1C 11     L1409:  CALL    L111C           ; routine LOOK-VARS
 5701 140C
 5702 140C              ;; D-RPORT-C
 5703 140C C2 9A 0D     L140C:  JP      NZ,L0D9A        ; to REPORT-C
 5704 140F
 5705 140F CD A6 0D             CALL    L0DA6           ; routine SYNTAX-Z
 5706 1412 20 08                JR      NZ,L141C        ; forward to D-RUN
 5707 1414
 5708 1414 CB B1                RES     6,C             ;
 5709 1416 CD A7 11             CALL    L11A7           ; routine STK-VAR
 5710 1419 CD 1D 0D             CALL    L0D1D           ; routine CHECK-END
 5711 141C
 5712 141C              ;; D-RUN
 5713 141C 38 08        L141C:  JR      C,L1426         ; forward to D-LETTER
 5714 141E
 5715 141E C5                   PUSH    BC              ;
 5716 141F CD F2 09             CALL    L09F2           ; routine NEXT-ONE
 5717 1422 CD 60 0A             CALL    L0A60           ; routine RECLAIM-2
 5718 1425 C1                   POP     BC              ;
 5719 1426
 5720 1426              ;; D-LETTER
 5721 1426 CB F9        L1426:  SET     7,C             ;
 5722 1428 06 00                LD      B,$00           ;
 5723 142A C5                   PUSH    BC              ;
 5724 142B 21 01 00             LD      HL,$0001        ;
 5725 142E CB 71                BIT     6,C             ;
 5726 1430 20 02                JR      NZ,L1434        ; forward to D-SIZE
 5727 1432
 5728 1432 2E 05                LD      L,$05           ;
 5729 1434
 5730 1434              ;; D-SIZE
 5731 1434 EB           L1434:  EX      DE,HL           ;
 5732 1435
 5733 1435              ;; D-NO-LOOP
 5734 1435 E7           L1435:  RST     20H             ; NEXT-CHAR
 5735 1436 26 40                LD      H,$40           ;
 5736 1438 CD DD 12             CALL    L12DD           ; routine INT-EXP1
 5737 143B DA 31 12             JP      C,L1231         ; jump back to REPORT-3
 5738 143E
 5739 143E E1                   POP     HL              ;
 5740 143F C5                   PUSH    BC              ;
 5741 1440 24                   INC     H               ;
 5742 1441 E5                   PUSH    HL              ;
 5743 1442 60                   LD      H,B             ;
 5744 1443 69                   LD      L,C             ;
 5745 1444 CD 05 13             CALL    L1305           ; routine GET-HL*DE
 5746 1447 EB                   EX      DE,HL           ;
 5747 1448
 5748 1448 DF                   RST     18H             ; GET-CHAR
 5749 1449 FE 1A                CP      $1A             ;
 5750 144B 28 E8                JR      Z,L1435         ; back to D-NO-LOOP
 5751 144D
 5752 144D FE 11                CP      $11             ; is it ')' ?
 5753 144F 20 BB                JR      NZ,L140C        ; back if not to D-RPORT-C
 5754 1451
 5755 1451
 5756 1451 E7                   RST     20H             ; NEXT-CHAR
 5757 1452 C1                   POP     BC              ;
 5758 1453 79                   LD      A,C             ;
 5759 1454 68                   LD      L,B             ;
 5760 1455 26 00                LD      H,$00           ;
 5761 1457 23                   INC     HL              ;
 5762 1458 23                   INC     HL              ;
 5763 1459 29                   ADD     HL,HL           ;
 5764 145A 19                   ADD     HL,DE           ;
 5765 145B DA D3 0E             JP      C,L0ED3         ; jump to REPORT-4
 5766 145E
 5767 145E D5                   PUSH    DE              ;
 5768 145F C5                   PUSH    BC              ;
 5769 1460 E5                   PUSH    HL              ;
 5770 1461 44                   LD      B,H             ;
 5771 1462 4D                   LD      C,L             ;
 5772 1463 2A 14 40             LD      HL,($4014)      ; sv E_LINE_lo
 5773 1466 2B                   DEC     HL              ;
 5774 1467 CD 9E 09             CALL    L099E           ; routine MAKE-ROOM
 5775 146A 23                   INC     HL              ;
 5776 146B 77                   LD       (HL),A         ;
 5777 146C C1                   POP     BC              ;
 5778 146D 0B                   DEC     BC              ;
 5779 146E 0B                   DEC     BC              ;
 5780 146F 0B                   DEC     BC              ;
 5781 1470 23                   INC     HL              ;
 5782 1471 71                   LD      (HL),C          ;
 5783 1472 23                   INC     HL              ;
 5784 1473 70                   LD      (HL),B          ;
 5785 1474 F1                   POP     AF              ;
 5786 1475 23                   INC     HL              ;
 5787 1476 77                   LD      (HL),A          ;
 5788 1477 62                   LD      H,D             ;
 5789 1478 6B                   LD      L,E             ;
 5790 1479 1B                   DEC     DE              ;
 5791 147A 36 00                LD      (HL),$00        ;
 5792 147C C1                   POP     BC              ;
 5793 147D ED B8                LDDR                    ; Copy Bytes
 5794 147F
 5795 147F              ;; DIM-SIZES
 5796 147F C1           L147F:  POP     BC              ;
 5797 1480 70                   LD      (HL),B          ;
 5798 1481 2B                   DEC     HL              ;
 5799 1482 71                   LD      (HL),C          ;
 5800 1483 2B                   DEC     HL              ;
 5801 1484 3D                   DEC     A               ;
 5802 1485 20 F8                JR      NZ,L147F        ; back to DIM-SIZES
 5803 1487
 5804 1487 C9                   RET                     ; return.
 5805 1488
 5806 1488              ; ---------------------
 5807 1488              ; THE 'RESERVE' ROUTINE
 5808 1488              ; ---------------------
 5809 1488              ;
 5810 1488              ;
 5811 1488
 5812 1488              ;; RESERVE
 5813 1488 2A 1A 40     L1488:  LD      HL,($401A)      ; address STKBOT
 5814 148B 2B                   DEC     HL              ; now last byte of workspace
 5815 148C CD 9E 09             CALL    L099E           ; routine MAKE-ROOM
 5816 148F 23                   INC     HL              ;
 5817 1490 23                   INC     HL              ;
 5818 1491 C1                   POP     BC              ;
 5819 1492 ED 43 14 40          LD      ($4014),BC      ; sv E_LINE_lo
 5820 1496 C1                   POP     BC              ;
 5821 1497 EB                   EX      DE,HL           ;
 5822 1498 23                   INC     HL              ;
 5823 1499 C9                   RET                     ;
 5824 149A
 5825 149A              ; ---------------------------
 5826 149A              ; THE 'CLEAR' COMMAND ROUTINE
 5827 149A              ; ---------------------------
 5828 149A              ;
 5829 149A              ;
 5830 149A
 5831 149A              ;; CLEAR
 5832 149A 2A 10 40     L149A:  LD      HL,($4010)      ; sv VARS_lo
 5833 149D 36 80                LD      (HL),$80        ;
 5834 149F 23                   INC     HL              ;
 5835 14A0 22 14 40             LD      ($4014),HL      ; sv E_LINE_lo
 5836 14A3
 5837 14A3              ; -----------------------
 5838 14A3              ; THE 'X-TEMP' SUBROUTINE
 5839 14A3              ; -----------------------
 5840 14A3              ;
 5841 14A3              ;
 5842 14A3
 5843 14A3              ;; X-TEMP
 5844 14A3 2A 14 40     L14A3:  LD      HL,($4014)      ; sv E_LINE_lo
 5845 14A6
 5846 14A6              ; ----------------------
 5847 14A6              ; THE 'SET-STK' ROUTINES
 5848 14A6              ; ----------------------
 5849 14A6              ;
 5850 14A6              ;
 5851 14A6
 5852 14A6              ;; SET-STK-B
 5853 14A6 22 1A 40     L14A6:  LD      ($401A),HL      ; sv STKBOT
 5854 14A9
 5855 14A9              ;
 5856 14A9
 5857 14A9              ;; SET-STK-E
 5858 14A9 22 1C 40     L14A9:  LD      ($401C),HL      ; sv STKEND
 5859 14AC C9                   RET                     ;
 5860 14AD
 5861 14AD              ; -----------------------
 5862 14AD              ; THE 'CURSOR-IN' ROUTINE
 5863 14AD              ; -----------------------
 5864 14AD              ; This routine is called to set the edit line to the minimum cursor/newline
 5865 14AD              ; and to set STKEND, the start of free space, at the next position.
 5866 14AD
 5867 14AD              ;; CURSOR-IN
 5868 14AD 2A 14 40     L14AD:  LD      HL,($4014)      ; fetch start of edit line from E_LINE
 5869 14B0 36 7F                LD      (HL),$7F        ; insert cursor character
 5870 14B2
 5871 14B2 23                   INC     HL              ; point to next location.
 5872 14B3 36 76                LD      (HL),$76        ; insert NEWLINE character
 5873 14B5 23                   INC     HL              ; point to next free location.
 5874 14B6
 5875 14B6 FD 36 22 02          LD      (IY+$22),$02    ; set lower screen display file size DF_SZ
 5876 14BA
 5877 14BA 18 EA                JR      L14A6           ; exit via SET-STK-B above
 5878 14BC
 5879 14BC              ; ------------------------
 5880 14BC              ; THE 'SET-MIN' SUBROUTINE
 5881 14BC              ; ------------------------
 5882 14BC              ;
 5883 14BC              ;
 5884 14BC
 5885 14BC              ;; SET-MIN
 5886 14BC 21 5D 40     L14BC:  LD      HL,$405D        ; normal location of calculator's memory area
 5887 14BF 22 1F 40             LD      ($401F),HL      ; update system variable MEM
 5888 14C2 2A 1A 40             LD      HL,($401A)      ; fetch STKBOT
 5889 14C5 18 E2                JR      L14A9           ; back to SET-STK-E
 5890 14C7
 5891 14C7
 5892 14C7              ; ------------------------------------
 5893 14C7              ; THE 'RECLAIM THE END-MARKER' ROUTINE
 5894 14C7              ; ------------------------------------
 5895 14C7
 5896 14C7              ;; REC-V80
 5897 14C7 ED 5B 14 40  L14C7:  LD      DE,($4014)      ; sv E_LINE_lo
 5898 14CB C3 5D 0A             JP      L0A5D           ; to RECLAIM-1
 5899 14CE
 5900 14CE              ; ----------------------
 5901 14CE              ; THE 'ALPHA' SUBROUTINE
 5902 14CE              ; ----------------------
 5903 14CE
 5904 14CE              ;; ALPHA
 5905 14CE FE 26        L14CE:  CP      $26             ;
 5906 14D0 18 02                JR      L14D4           ; skip forward to ALPHA-2
 5907 14D2
 5908 14D2
 5909 14D2              ; -------------------------
 5910 14D2              ; THE 'ALPHANUM' SUBROUTINE
 5911 14D2              ; -------------------------
 5912 14D2
 5913 14D2              ;; ALPHANUM
 5914 14D2 FE 1C        L14D2:  CP      $1C             ;
 5915 14D4
 5916 14D4
 5917 14D4              ;; ALPHA-2
 5918 14D4 3F           L14D4:  CCF                     ; Complement Carry Flag
 5919 14D5 D0                   RET     NC              ;
 5920 14D6
 5921 14D6 FE 40                CP      $40             ;
 5922 14D8 C9                   RET                     ;
 5923 14D9
 5924 14D9
 5925 14D9              ; ------------------------------------------
 5926 14D9              ; THE 'DECIMAL TO FLOATING POINT' SUBROUTINE
 5927 14D9              ; ------------------------------------------
 5928 14D9              ;
 5929 14D9
 5930 14D9              ;; DEC-TO-FP
 5931 14D9 CD 48 15     L14D9:  CALL    L1548           ; routine INT-TO-FP gets first part
 5932 14DC FE 1B                CP      $1B             ; is character a '.' ?
 5933 14DE 20 15                JR      NZ,L14F5        ; forward if not to E-FORMAT
 5934 14E0
 5935 14E0
 5936 14E0 EF                   RST     28H             ;; FP-CALC
 5937 14E1 A1                   DEFB    $A1             ;;stk-one
 5938 14E2 C0                   DEFB    $C0             ;;st-mem-0
 5939 14E3 02                   DEFB    $02             ;;delete
 5940 14E4 34                   DEFB    $34             ;;end-calc
 5941 14E5
 5942 14E5
 5943 14E5              ;; NXT-DGT-1
 5944 14E5 E7           L14E5:  RST     20H             ; NEXT-CHAR
 5945 14E6 CD 14 15             CALL    L1514           ; routine STK-DIGIT
 5946 14E9 38 0A                JR      C,L14F5         ; forward to E-FORMAT
 5947 14EB
 5948 14EB
 5949 14EB EF                   RST     28H             ;; FP-CALC
 5950 14EC E0                   DEFB    $E0             ;;get-mem-0
 5951 14ED A4                   DEFB    $A4             ;;stk-ten
 5952 14EE 05                   DEFB    $05             ;;division
 5953 14EF C0                   DEFB    $C0             ;;st-mem-0
 5954 14F0 04                   DEFB    $04             ;;multiply
 5955 14F1 0F                   DEFB    $0F             ;;addition
 5956 14F2 34                   DEFB    $34             ;;end-calc
 5957 14F3
 5958 14F3 18 F0                JR      L14E5           ; loop back till exhausted to NXT-DGT-1
 5959 14F5
 5960 14F5              ; ---
 5961 14F5
 5962 14F5              ;; E-FORMAT
 5963 14F5 FE 2A        L14F5:  CP      $2A             ; is character 'E' ?
 5964 14F7 C0                   RET     NZ              ; return if not
 5965 14F8
 5966 14F8 FD 36 5D FF          LD      (IY+$5D),$FF    ; initialize sv MEM-0-1st to $FF TRUE
 5967 14FC
 5968 14FC E7                   RST     20H             ; NEXT-CHAR
 5969 14FD FE 15                CP      $15             ; is character a '+' ?
 5970 14FF 28 07                JR      Z,L1508         ; forward if so to SIGN-DONE
 5971 1501
 5972 1501 FE 16                CP      $16             ; is it a '-' ?
 5973 1503 20 04                JR      NZ,L1509        ; forward if not to ST-E-PART
 5974 1505
 5975 1505 FD 34 5D             INC     (IY+$5D)        ; sv MEM-0-1st change to FALSE
 5976 1508
 5977 1508              ;; SIGN-DONE
 5978 1508 E7           L1508:  RST     20H             ; NEXT-CHAR
 5979 1509
 5980 1509              ;; ST-E-PART
 5981 1509 CD 48 15     L1509:  CALL    L1548           ; routine INT-TO-FP
 5982 150C
 5983 150C EF                   RST     28H             ;; FP-CALC              m, e.
 5984 150D E0                   DEFB    $E0             ;;get-mem-0             m, e, (1/0) TRUE/FALSE
 5985 150E 00                   DEFB    $00             ;;jump-true
 5986 150F 02                   DEFB    $02             ;;to L1511, E-POSTVE
 5987 1510 18                   DEFB    $18             ;;neg                   m, -e
 5988 1511
 5989 1511              ;; E-POSTVE
 5990 1511 38           L1511:  DEFB    $38             ;;e-to-fp               x.
 5991 1512 34                   DEFB    $34             ;;end-calc              x.
 5992 1513
 5993 1513 C9                   RET                     ; return.
 5994 1514
 5995 1514
 5996 1514              ; --------------------------
 5997 1514              ; THE 'STK-DIGIT' SUBROUTINE
 5998 1514              ; --------------------------
 5999 1514              ;
 6000 1514
 6001 1514              ;; STK-DIGIT
 6002 1514 FE 1C        L1514:  CP      $1C             ;
 6003 1516 D8                   RET     C               ;
 6004 1517
 6005 1517 FE 26                CP      $26             ;
 6006 1519 3F                   CCF                     ; Complement Carry Flag
 6007 151A D8                   RET     C               ;
 6008 151B
 6009 151B D6 1C                SUB     $1C             ;
 6010 151D
 6011 151D              ; ------------------------
 6012 151D              ; THE 'STACK-A' SUBROUTINE
 6013 151D              ; ------------------------
 6014 151D              ;
 6015 151D
 6016 151D
 6017 151D              ;; STACK-A
 6018 151D 4F           L151D:  LD      C,A             ;
 6019 151E 06 00                LD      B,$00           ;
 6020 1520
 6021 1520              ; -------------------------
 6022 1520              ; THE 'STACK-BC' SUBROUTINE
 6023 1520              ; -------------------------
 6024 1520              ; The ZX81 does not have an integer number format so the BC register contents
 6025 1520              ; must be converted to their full floating-point form.
 6026 1520
 6027 1520              ;; STACK-BC
 6028 1520 FD 21 00 40  L1520:  LD      IY,$4000        ; re-initialize the system variables pointer.
 6029 1524 C5                   PUSH    BC              ; save the integer value.
 6030 1525
 6031 1525              ; now stack zero, five zero bytes as a starting point.
 6032 1525
 6033 1525 EF                   RST     28H             ;; FP-CALC
 6034 1526 A0                   DEFB    $A0             ;;stk-zero                      0.
 6035 1527 34                   DEFB    $34             ;;end-calc
 6036 1528
 6037 1528 C1                   POP     BC              ; restore integer value.
 6038 1529
 6039 1529 36 91                LD      (HL),$91        ; place $91 in exponent         65536.
 6040 152B                                              ; this is the maximum possible value
 6041 152B
 6042 152B 78                   LD      A,B             ; fetch hi-byte.
 6043 152C A7                   AND     A               ; test for zero.
 6044 152D 20 07                JR      NZ,L1536        ; forward if not zero to STK-BC-2
 6045 152F
 6046 152F 77                   LD      (HL),A          ; else make exponent zero again
 6047 1530 B1                   OR      C               ; test lo-byte
 6048 1531 C8                   RET     Z               ; return if BC was zero - done.
 6049 1532
 6050 1532              ; else  there has to be a set bit if only the value one.
 6051 1532
 6052 1532 41                   LD      B,C             ; save C in B.
 6053 1533 4E                   LD      C,(HL)          ; fetch zero to C
 6054 1534 36 89                LD      (HL),$89        ; make exponent $89             256.
 6055 1536
 6056 1536              ;; STK-BC-2
 6057 1536 35           L1536:  DEC     (HL)            ; decrement exponent - halving number
 6058 1537 CB 21                SLA     C               ;  C<-76543210<-0
 6059 1539 CB 10                RL      B               ;  C<-76543210<-C
 6060 153B 30 F9                JR      NC,L1536        ; loop back if no carry to STK-BC-2
 6061 153D
 6062 153D CB 38                SRL     B               ;  0->76543210->C
 6063 153F CB 19                RR      C               ;  C->76543210->C
 6064 1541
 6065 1541 23                   INC     HL              ; address first byte of mantissa
 6066 1542 70                   LD      (HL),B          ; insert B
 6067 1543 23                   INC     HL              ; address second byte of mantissa
 6068 1544 71                   LD      (HL),C          ; insert C
 6069 1545
 6070 1545 2B                   DEC     HL              ; point to the
 6071 1546 2B                   DEC     HL              ; exponent again
 6072 1547 C9                   RET                     ; return.
 6073 1548
 6074 1548              ; ------------------------------------------
 6075 1548              ; THE 'INTEGER TO FLOATING POINT' SUBROUTINE
 6076 1548              ; ------------------------------------------
 6077 1548              ;
 6078 1548              ;
 6079 1548
 6080 1548              ;; INT-TO-FP
 6081 1548 F5           L1548:  PUSH    AF              ;
 6082 1549
 6083 1549 EF                   RST     28H             ;; FP-CALC
 6084 154A A0                   DEFB    $A0             ;;stk-zero
 6085 154B 34                   DEFB    $34             ;;end-calc
 6086 154C
 6087 154C F1                   POP     AF              ;
 6088 154D
 6089 154D              ;; NXT-DGT-2
 6090 154D CD 14 15     L154D:  CALL    L1514           ; routine STK-DIGIT
 6091 1550 D8                   RET     C               ;
 6092 1551
 6093 1551
 6094 1551 EF                   RST     28H             ;; FP-CALC
 6095 1552 01                   DEFB    $01             ;;exchange
 6096 1553 A4                   DEFB    $A4             ;;stk-ten
 6097 1554 04                   DEFB    $04             ;;multiply
 6098 1555 0F                   DEFB    $0F             ;;addition
 6099 1556 34                   DEFB    $34             ;;end-calc
 6100 1557
 6101 1557
 6102 1557 E7                   RST     20H             ; NEXT-CHAR
 6103 1558 18 F3                JR      L154D           ; to NXT-DGT-2
 6104 155A
 6105 155A
 6106 155A              ; -------------------------------------------
 6107 155A              ; THE 'E-FORMAT TO FLOATING POINT' SUBROUTINE
 6108 155A              ; -------------------------------------------
 6109 155A              ; (Offset $38: 'e-to-fp')
 6110 155A              ; invoked from DEC-TO-FP and PRINT-FP.
 6111 155A              ; e.g. 2.3E4 is 23000.
 6112 155A              ; This subroutine evaluates xEm where m is a positive or negative integer.
 6113 155A              ; At a simple level x is multiplied by ten for every unit of m.
 6114 155A              ; If the decimal exponent m is negative then x is divided by ten for each unit.
 6115 155A              ; A short-cut is taken if the exponent is greater than seven and in this
 6116 155A              ; case the exponent is reduced by seven and the value is multiplied or divided
 6117 155A              ; by ten million.
 6118 155A              ; Note. for the ZX Spectrum an even cleverer method was adopted which involved
 6119 155A              ; shifting the bits out of the exponent so the result was achieved with six
 6120 155A              ; shifts at most. The routine below had to be completely re-written mostly
 6121 155A              ; in Z80 machine code.
 6122 155A              ; Although no longer operable, the calculator literal was retained for old
 6123 155A              ; times sake, the routine being invoked directly from a machine code CALL.
 6124 155A              ;
 6125 155A              ; On entry in the ZX81, m, the exponent, is the 'last value', and the
 6126 155A              ; floating-point decimal mantissa is beneath it.
 6127 155A
 6128 155A
 6129 155A              ;; e-to-fp
 6130 155A EF           L155A:  RST     28H             ;; FP-CALC              x, m.
 6131 155B 2D                   DEFB    $2D             ;;duplicate             x, m, m.
 6132 155C 32                   DEFB    $32             ;;less-0                x, m, (1/0).
 6133 155D C0                   DEFB    $C0             ;;st-mem-0              x, m, (1/0).
 6134 155E 02                   DEFB    $02             ;;delete                x, m.
 6135 155F 27                   DEFB    $27             ;;abs                   x, +m.
 6136 1560
 6137 1560              ;; E-LOOP
 6138 1560 A1           L1560:  DEFB    $A1             ;;stk-one               x, m,1.
 6139 1561 03                   DEFB    $03             ;;subtract              x, m-1.
 6140 1562 2D                   DEFB    $2D             ;;duplicate             x, m-1,m-1.
 6141 1563 32                   DEFB    $32             ;;less-0                x, m-1, (1/0).
 6142 1564 00                   DEFB    $00             ;;jump-true             x, m-1.
 6143 1565 22                   DEFB    $22             ;;to L1587, E-END       x, m-1.
 6144 1566
 6145 1566 2D                   DEFB    $2D             ;;duplicate             x, m-1, m-1.
 6146 1567 30                   DEFB    $30             ;;stk-data
 6147 1568 33                   DEFB    $33             ;;Exponent: $83, Bytes: 1
 6148 1569
 6149 1569 40                   DEFB    $40             ;;(+00,+00,+00)         x, m-1, m-1, 6.
 6150 156A 03                   DEFB    $03             ;;subtract              x, m-1, m-7.
 6151 156B 2D                   DEFB    $2D             ;;duplicate             x, m-1, m-7, m-7.
 6152 156C 32                   DEFB    $32             ;;less-0                x, m-1, m-7, (1/0).
 6153 156D 00                   DEFB    $00             ;;jump-true             x, m-1, m-7.
 6154 156E 0C                   DEFB    $0C             ;;to L157A, E-LOW
 6155 156F
 6156 156F              ; but if exponent m is higher than 7 do a bigger chunk.
 6157 156F              ; multiplying (or dividing if negative) by 10 million - 1e7.
 6158 156F
 6159 156F 01                   DEFB    $01             ;;exchange              x, m-7, m-1.
 6160 1570 02                   DEFB    $02             ;;delete                x, m-7.
 6161 1571 01                   DEFB    $01             ;;exchange              m-7, x.
 6162 1572 30                   DEFB    $30             ;;stk-data
 6163 1573 80                   DEFB    $80             ;;Bytes: 3
 6164 1574 48                   DEFB    $48             ;;Exponent $98
 6165 1575 18 96 80             DEFB    $18,$96,$80     ;;(+00)                 m-7, x, 10,000,000 (=f)
 6166 1578 2F                   DEFB    $2F             ;;jump
 6167 1579 04                   DEFB    $04             ;;to L157D, E-CHUNK
 6168 157A
 6169 157A              ; ---
 6170 157A
 6171 157A              ;; E-LOW
 6172 157A 02           L157A:  DEFB    $02             ;;delete                x, m-1.
 6173 157B 01                   DEFB    $01             ;;exchange              m-1, x.
 6174 157C A4                   DEFB    $A4             ;;stk-ten               m-1, x, 10 (=f).
 6175 157D
 6176 157D              ;; E-CHUNK
 6177 157D E0           L157D:  DEFB    $E0             ;;get-mem-0             m-1, x, f, (1/0)
 6178 157E 00                   DEFB    $00             ;;jump-true             m-1, x, f
 6179 157F 04                   DEFB    $04             ;;to L1583, E-DIVSN
 6180 1580
 6181 1580 04                   DEFB    $04             ;;multiply              m-1, x*f.
 6182 1581 2F                   DEFB    $2F             ;;jump
 6183 1582 02                   DEFB    $02             ;;to L1584, E-SWAP
 6184 1583
 6185 1583              ; ---
 6186 1583
 6187 1583              ;; E-DIVSN
 6188 1583 05           L1583:  DEFB    $05             ;;division              m-1, x/f (= new x).
 6189 1584
 6190 1584              ;; E-SWAP
 6191 1584 01           L1584:  DEFB    $01             ;;exchange              x, m-1 (= new m).
 6192 1585 2F                   DEFB    $2F             ;;jump                  x, m.
 6193 1586 DA                   DEFB    $DA             ;;to L1560, E-LOOP
 6194 1587
 6195 1587              ; ---
 6196 1587
 6197 1587              ;; E-END
 6198 1587 02           L1587:  DEFB    $02             ;;delete                x. (-1)
 6199 1588 34                   DEFB    $34             ;;end-calc              x.
 6200 1589
 6201 1589 C9                   RET                     ; return.
 6202 158A
 6203 158A              ; -------------------------------------
 6204 158A              ; THE 'FLOATING-POINT TO BC' SUBROUTINE
 6205 158A              ; -------------------------------------
 6206 158A              ; The floating-point form on the calculator stack is compressed directly into
 6207 158A              ; the BC register rounding up if necessary.
 6208 158A              ; Valid range is 0 to 65535.4999
 6209 158A
 6210 158A              ;; FP-TO-BC
 6211 158A CD F8 13     L158A:  CALL    L13F8           ; routine STK-FETCH - exponent to A
 6212 158D                                              ; mantissa to EDCB.
 6213 158D A7                   AND     A               ; test for value zero.
 6214 158E 20 05                JR      NZ,L1595        ; forward if not to FPBC-NZRO
 6215 1590
 6216 1590              ; else value is zero
 6217 1590
 6218 1590 47                   LD      B,A             ; zero to B
 6219 1591 4F                   LD      C,A             ; also to C
 6220 1592 F5                   PUSH    AF              ; save the flags on machine stack
 6221 1593 18 31                JR      L15C6           ; forward to FPBC-END
 6222 1595
 6223 1595              ; ---
 6224 1595
 6225 1595              ; EDCB  =>  BCE
 6226 1595
 6227 1595              ;; FPBC-NZRO
 6228 1595 43           L1595:  LD      B,E             ; transfer the mantissa from EDCB
 6229 1596 59                   LD      E,C             ; to BCE. Bit 7 of E is the 17th bit which
 6230 1597 4A                   LD      C,D             ; will be significant for rounding if the
 6231 1598                                              ; number is already normalized.
 6232 1598
 6233 1598 D6 91                SUB     $91             ; subtract 65536
 6234 159A 3F                   CCF                     ; complement carry flag
 6235 159B CB 78                BIT     7,B             ; test sign bit
 6236 159D F5                   PUSH    AF              ; push the result
 6237 159E
 6238 159E CB F8                SET     7,B             ; set the implied bit
 6239 15A0 38 24                JR      C,L15C6         ; forward with carry from SUB/CCF to FPBC-END
 6240 15A2                                              ; number is too big.
 6241 15A2
 6242 15A2 3C                   INC     A               ; increment the exponent and
 6243 15A3 ED 44                NEG                     ; negate to make range $00 - $0F
 6244 15A5
 6245 15A5 FE 08                CP      $08             ; test if one or two bytes
 6246 15A7 38 06                JR      C,L15AF         ; forward with two to BIG-INT
 6247 15A9
 6248 15A9 59                   LD      E,C             ; shift mantissa
 6249 15AA 48                   LD      C,B             ; 8 places right
 6250 15AB 06 00                LD      B,$00           ; insert a zero in B
 6251 15AD D6 08                SUB     $08             ; reduce exponent by eight
 6252 15AF
 6253 15AF              ;; BIG-INT
 6254 15AF A7           L15AF:  AND     A               ; test the exponent
 6255 15B0 57                   LD      D,A             ; save exponent in D.
 6256 15B1
 6257 15B1 7B                   LD      A,E             ; fractional bits to A
 6258 15B2 07                   RLCA                    ; rotate most significant bit to carry for
 6259 15B3                                              ; rounding of an already normal number.
 6260 15B3
 6261 15B3 28 07                JR      Z,L15BC         ; forward if exponent zero to EXP-ZERO
 6262 15B5                                              ; the number is normalized
 6263 15B5
 6264 15B5              ;; FPBC-NORM
 6265 15B5 CB 38        L15B5:  SRL     B               ;   0->76543210->C
 6266 15B7 CB 19                RR      C               ;   C->76543210->C
 6267 15B9
 6268 15B9 15                   DEC     D               ; decrement exponent
 6269 15BA
 6270 15BA 20 F9                JR      NZ,L15B5        ; loop back till zero to FPBC-NORM
 6271 15BC
 6272 15BC              ;; EXP-ZERO
 6273 15BC 30 08        L15BC:  JR      NC,L15C6        ; forward without carry to NO-ROUND
 6274 15BE
 6275 15BE 03                   INC     BC              ; round up.
 6276 15BF 78                   LD      A,B             ; test result
 6277 15C0 B1                   OR      C               ; for zero
 6278 15C1 20 03                JR      NZ,L15C6        ; forward if not to GRE-ZERO
 6279 15C3
 6280 15C3 F1                   POP     AF              ; restore sign flag
 6281 15C4 37                   SCF                     ; set carry flag to indicate overflow
 6282 15C5 F5                   PUSH    AF              ; save combined flags again
 6283 15C6
 6284 15C6              ;; FPBC-END
 6285 15C6 C5           L15C6:  PUSH    BC              ; save BC value
 6286 15C7
 6287 15C7              ; set HL and DE to calculator stack pointers.
 6288 15C7
 6289 15C7 EF                   RST     28H             ;; FP-CALC
 6290 15C8 34                   DEFB    $34             ;;end-calc
 6291 15C9
 6292 15C9
 6293 15C9 C1                   POP     BC              ; restore BC value
 6294 15CA F1                   POP     AF              ; restore flags
 6295 15CB 79                   LD      A,C             ; copy low byte to A also.
 6296 15CC C9                   RET                     ; return
 6297 15CD
 6298 15CD              ; ------------------------------------
 6299 15CD              ; THE 'FLOATING-POINT TO A' SUBROUTINE
 6300 15CD              ; ------------------------------------
 6301 15CD              ;
 6302 15CD              ;
 6303 15CD
 6304 15CD              ;; FP-TO-A
 6305 15CD CD 8A 15     L15CD:  CALL    L158A           ; routine FP-TO-BC
 6306 15D0 D8                   RET     C               ;
 6307 15D1
 6308 15D1 F5                   PUSH    AF              ;
 6309 15D2 05                   DEC     B               ;
 6310 15D3 04                   INC     B               ;
 6311 15D4 28 03                JR      Z,L15D9         ; forward if in range to FP-A-END
 6312 15D6
 6313 15D6 F1                   POP     AF              ; fetch result
 6314 15D7 37                   SCF                     ; set carry flag signaling overflow
 6315 15D8 C9                   RET                     ; return
 6316 15D9
 6317 15D9              ;; FP-A-END
 6318 15D9 F1           L15D9:  POP     AF              ;
 6319 15DA C9                   RET                     ;
 6320 15DB
 6321 15DB
 6322 15DB              ; ----------------------------------------------
 6323 15DB              ; THE 'PRINT A FLOATING-POINT NUMBER' SUBROUTINE
 6324 15DB              ; ----------------------------------------------
 6325 15DB              ; prints 'last value' x on calculator stack.
 6326 15DB              ; There are a wide variety of formats see Chapter 4.
 6327 15DB              ; e.g.
 6328 15DB              ; PI            prints as       3.1415927
 6329 15DB              ; .123          prints as       0.123
 6330 15DB              ; .0123         prints as       .0123
 6331 15DB              ; 999999999999  prints as       1000000000000
 6332 15DB              ; 9876543210123 prints as       9876543200000
 6333 15DB
 6334 15DB              ; Begin by isolating zero and just printing the '0' character
 6335 15DB              ; for that case. For negative numbers print a leading '-' and
 6336 15DB              ; then form the absolute value of x.
 6337 15DB
 6338 15DB              ;; PRINT-FP
 6339 15DB EF           L15DB:  RST     28H             ;; FP-CALC              x.
 6340 15DC 2D                   DEFB    $2D             ;;duplicate             x, x.
 6341 15DD 32                   DEFB    $32             ;;less-0                x, (1/0).
 6342 15DE 00                   DEFB    $00             ;;jump-true
 6343 15DF 0B                   DEFB    $0B             ;;to L15EA, PF-NGTVE    x.
 6344 15E0
 6345 15E0 2D                   DEFB    $2D             ;;duplicate             x, x
 6346 15E1 33                   DEFB    $33             ;;greater-0             x, (1/0).
 6347 15E2 00                   DEFB    $00             ;;jump-true
 6348 15E3 0D                   DEFB    $0D             ;;to L15F0, PF-POSTVE   x.
 6349 15E4
 6350 15E4 02                   DEFB    $02             ;;delete                .
 6351 15E5 34                   DEFB    $34             ;;end-calc              .
 6352 15E6
 6353 15E6 3E 1C                LD      A,$1C           ; load accumulator with character '0'
 6354 15E8
 6355 15E8 D7                   RST     10H             ; PRINT-A
 6356 15E9 C9                   RET                     ; return.                               >>
 6357 15EA
 6358 15EA              ; ---
 6359 15EA
 6360 15EA              ;; PF-NEGTVE
 6361 15EA 27           L15EA:  DEFB    $27             ; abs                   +x.
 6362 15EB 34                   DEFB    $34             ;;end-calc              x.
 6363 15EC
 6364 15EC 3E 16                LD      A,$16           ; load accumulator with '-'
 6365 15EE
 6366 15EE D7                   RST     10H             ; PRINT-A
 6367 15EF
 6368 15EF EF                   RST     28H             ;; FP-CALC              x.
 6369 15F0
 6370 15F0              ;; PF-POSTVE
 6371 15F0 34           L15F0:  DEFB    $34             ;;end-calc              x.
 6372 15F1
 6373 15F1              ; register HL addresses the exponent of the floating-point value.
 6374 15F1              ; if positive, and point floats to left, then bit 7 is set.
 6375 15F1
 6376 15F1 7E                   LD      A,(HL)          ; pick up the exponent byte
 6377 15F2 CD 1D 15             CALL    L151D           ; routine STACK-A places on calculator stack.
 6378 15F5
 6379 15F5              ; now calculate roughly the number of digits, n, before the decimal point by
 6380 15F5              ; subtracting a half from true exponent and multiplying by log to
 6381 15F5              ; the base 10 of 2.
 6382 15F5              ; The true number could be one higher than n, the integer result.
 6383 15F5
 6384 15F5 EF                   RST     28H             ;; FP-CALC              x, e.
 6385 15F6 30                   DEFB    $30             ;;stk-data
 6386 15F7 78                   DEFB    $78             ;;Exponent: $88, Bytes: 2
 6387 15F8 00 80                DEFB    $00,$80         ;;(+00,+00)             x, e, 128.5.
 6388 15FA 03                   DEFB    $03             ;;subtract              x, e -.5.
 6389 15FB 30                   DEFB    $30             ;;stk-data
 6390 15FC EF                   DEFB    $EF             ;;Exponent: $7F, Bytes: 4
 6391 15FD 1A 20 9A 85          DEFB    $1A,$20,$9A,$85 ;;                      .30103 (log10 2)
 6392 1601 04                   DEFB    $04             ;;multiply              x,
 6393 1602 24                   DEFB    $24             ;;int
 6394 1603 C1                   DEFB    $C1             ;;st-mem-1              x, n.
 6395 1604
 6396 1604
 6397 1604 30                   DEFB    $30             ;;stk-data
 6398 1605 34                   DEFB    $34             ;;Exponent: $84, Bytes: 1
 6399 1606 00                   DEFB    $00             ;;(+00,+00,+00)         x, n, 8.
 6400 1607
 6401 1607 03                   DEFB    $03             ;;subtract              x, n-8.
 6402 1608 18                   DEFB    $18             ;;neg                   x, 8-n.
 6403 1609 38                   DEFB    $38             ;;e-to-fp               x * (10^n)
 6404 160A
 6405 160A              ; finally the 8 or 9 digit decimal is rounded.
 6406 160A              ; a ten-digit integer can arise in the case of, say, 999999999.5
 6407 160A              ; which gives 1000000000.
 6408 160A
 6409 160A A2                   DEFB    $A2             ;;stk-half
 6410 160B 0F                   DEFB    $0F             ;;addition
 6411 160C 24                   DEFB    $24             ;;int                   i.
 6412 160D 34                   DEFB    $34             ;;end-calc
 6413 160E
 6414 160E              ; If there were 8 digits then final rounding will take place on the calculator
 6415 160E              ; stack above and the next two instructions insert a masked zero so that
 6416 160E              ; no further rounding occurs. If the result is a 9 digit integer then
 6417 160E              ; rounding takes place within the buffer.
 6418 160E
 6419 160E 21 6B 40             LD      HL,$406B        ; address system variable MEM-2-5th
 6420 1611                                              ; which could be the 'ninth' digit.
 6421 1611 36 90                LD      (HL),$90        ; insert the value $90  10010000
 6422 1613
 6423 1613              ; now starting from lowest digit lay down the 8, 9 or 10 digit integer
 6424 1613              ; which represents the significant portion of the number
 6425 1613              ; e.g. PI will be the nine-digit integer 314159265
 6426 1613
 6427 1613 06 0A                LD      B,$0A           ; count is ten digits.
 6428 1615
 6429 1615              ;; PF-LOOP
 6430 1615 23           L1615:  INC     HL              ; increase pointer
 6431 1616
 6432 1616 E5                   PUSH    HL              ; preserve buffer address.
 6433 1617 C5                   PUSH    BC              ; preserve counter.
 6434 1618
 6435 1618 EF                   RST     28H             ;; FP-CALC              i.
 6436 1619 A4                   DEFB    $A4             ;;stk-ten               i, 10.
 6437 161A 2E                   DEFB    $2E             ;;n-mod-m               i mod 10, i/10
 6438 161B 01                   DEFB    $01             ;;exchange              i/10, remainder.
 6439 161C 34                   DEFB    $34             ;;end-calc
 6440 161D
 6441 161D CD CD 15             CALL    L15CD           ; routine FP-TO-A  $00-$09
 6442 1620
 6443 1620 F6 90                OR      $90             ; make left hand nibble 9
 6444 1622
 6445 1622 C1                   POP     BC              ; restore counter
 6446 1623 E1                   POP     HL              ; restore buffer address.
 6447 1624
 6448 1624 77                   LD      (HL),A          ; insert masked digit in buffer.
 6449 1625 10 EE                DJNZ    L1615           ; loop back for all ten to PF-LOOP
 6450 1627
 6451 1627              ; the most significant digit will be last but if the number is exhausted then
 6452 1627              ; the last one or two positions will contain zero ($90).
 6453 1627
 6454 1627              ; e.g. for 'one' we have zero as estimate of leading digits.
 6455 1627              ; 1*10^8 100000000 as integer value
 6456 1627              ; 90 90 90 90 90   90 90 90 91 90 as buffer mem3/mem4 contents.
 6457 1627
 6458 1627
 6459 1627 23                   INC     HL              ; advance pointer to one past buffer
 6460 1628 01 08 00             LD      BC,$0008        ; set C to 8 ( B is already zero )
 6461 162B E5                   PUSH    HL              ; save pointer.
 6462 162C
 6463 162C              ;; PF-NULL
 6464 162C 2B           L162C:  DEC     HL              ; decrease pointer
 6465 162D 7E                   LD      A,(HL)          ; fetch masked digit
 6466 162E FE 90                CP      $90             ; is it a leading zero ?
 6467 1630 28 FA                JR      Z,L162C         ; loop back if so to PF-NULL
 6468 1632
 6469 1632              ; at this point a significant digit has been found. carry is reset.
 6470 1632
 6471 1632 ED 42                SBC     HL,BC           ; subtract eight from the address.
 6472 1634 E5                   PUSH    HL              ; ** save this pointer too
 6473 1635 7E                   LD      A,(HL)          ; fetch addressed byte
 6474 1636 C6 6B                ADD     A,$6B           ; add $6B - forcing a round up ripple
 6475 1638                                              ; if  $95 or over.
 6476 1638 F5                   PUSH    AF              ; save the carry result.
 6477 1639
 6478 1639              ; now enter a loop to round the number. After rounding has been considered
 6479 1639              ; a zero that has arisen from rounding or that was present at that position
 6480 1639              ; originally is changed from $90 to $80.
 6481 1639
 6482 1639              ;; PF-RND-LP
 6483 1639 F1           L1639:  POP     AF              ; retrieve carry from machine stack.
 6484 163A 23                   INC     HL              ; increment address
 6485 163B 7E                   LD      A,(HL)          ; fetch new byte
 6486 163C CE 00                ADC     A,$00           ; add in any carry
 6487 163E
 6488 163E 27                   DAA                     ; decimal adjust accumulator
 6489 163F                                              ; carry will ripple through the '9'
 6490 163F
 6491 163F F5                   PUSH    AF              ; save carry on machine stack.
 6492 1640 E6 0F                AND     $0F             ; isolate character 0 - 9 AND set zero flag
 6493 1642                                              ; if zero.
 6494 1642 77                   LD      (HL),A          ; place back in location.
 6495 1643 CB FE                SET     7,(HL)          ; set bit 7 to show printable.
 6496 1645                                              ; but not if trailing zero after decimal point.
 6497 1645 28 F2                JR      Z,L1639         ; back if a zero to PF-RND-LP
 6498 1647                                              ; to consider further rounding and/or trailing
 6499 1647                                              ; zero identification.
 6500 1647
 6501 1647 F1                   POP     AF              ; balance stack
 6502 1648 E1                   POP     HL              ; ** retrieve lower pointer
 6503 1649
 6504 1649              ; now insert 6 trailing zeros which are printed if before the decimal point
 6505 1649              ; but mark the end of printing if after decimal point.
 6506 1649              ; e.g. 9876543210123 is printed as 9876543200000
 6507 1649              ; 123.456001 is printed as 123.456
 6508 1649
 6509 1649 06 06                LD      B,$06           ; the count is six.
 6510 164B
 6511 164B              ;; PF-ZERO-6
 6512 164B 36 80        L164B:  LD      (HL),$80        ; insert a masked zero
 6513 164D 2B                   DEC     HL              ; decrease pointer.
 6514 164E 10 FB                DJNZ    L164B           ; loop back for all six to PF-ZERO-6
 6515 1650
 6516 1650              ; n-mod-m reduced the number to zero and this is now deleted from the calculator
 6517 1650              ; stack before fetching the original estimate of leading digits.
 6518 1650
 6519 1650
 6520 1650 EF                   RST     28H             ;; FP-CALC              0.
 6521 1651 02                   DEFB    $02             ;;delete                .
 6522 1652 E1                   DEFB    $E1             ;;get-mem-1             n.
 6523 1653 34                   DEFB    $34             ;;end-calc              n.
 6524 1654
 6525 1654 CD CD 15             CALL    L15CD           ; routine FP-TO-A
 6526 1657 28 02                JR      Z,L165B         ; skip forward if positive to PF-POS
 6527 1659
 6528 1659 ED 44                NEG                     ; negate makes positive
 6529 165B
 6530 165B              ;; PF-POS
 6531 165B 5F           L165B:  LD      E,A             ; transfer count of digits to E
 6532 165C 1C                   INC     E               ; increment twice
 6533 165D 1C                   INC     E               ;
 6534 165E E1                   POP     HL              ; * retrieve pointer to one past buffer.
 6535 165F
 6536 165F              ;; GET-FIRST
 6537 165F 2B           L165F:  DEC     HL              ; decrement address.
 6538 1660 1D                   DEC     E               ; decrement digit counter.
 6539 1661 7E                   LD      A,(HL)          ; fetch masked byte.
 6540 1662 E6 0F                AND     $0F             ; isolate right-hand nibble.
 6541 1664 28 F9                JR      Z,L165F         ; back with leading zero to GET-FIRST
 6542 1666
 6543 1666              ; now determine if E-format printing is needed
 6544 1666
 6545 1666 7B                   LD      A,E             ; transfer now accurate number count to A.
 6546 1667 D6 05                SUB     $05             ; subtract five
 6547 1669 FE 08                CP      $08             ; compare with 8 as maximum digits is 13.
 6548 166B F2 82 16             JP      P,L1682         ; forward if positive to PF-E-FMT
 6549 166E
 6550 166E FE F6                CP      $F6             ; test for more than four zeros after point.
 6551 1670 FA 82 16             JP      M,L1682         ; forward if so to PF-E-FMT
 6552 1673
 6553 1673 C6 06                ADD     A,$06           ; test for zero leading digits, e.g. 0.5
 6554 1675 28 48                JR      Z,L16BF         ; forward if so to PF-ZERO-1
 6555 1677
 6556 1677 FA B2 16             JP      M,L16B2         ; forward if more than one zero to PF-ZEROS
 6557 167A
 6558 167A              ; else digits before the decimal point are to be printed
 6559 167A
 6560 167A 47                   LD      B,A             ; count of leading characters to B.
 6561 167B
 6562 167B              ;; PF-NIB-LP
 6563 167B CD D0 16     L167B:  CALL    L16D0           ; routine PF-NIBBLE
 6564 167E 10 FB                DJNZ    L167B           ; loop back for counted numbers to PF-NIB-LP
 6565 1680
 6566 1680 18 40                JR      L16C2           ; forward to consider decimal part to PF-DC-OUT
 6567 1682
 6568 1682              ; ---
 6569 1682
 6570 1682              ;; PF-E-FMT
 6571 1682 43           L1682:  LD      B,E             ; count to B
 6572 1683 CD D0 16             CALL    L16D0           ; routine PF-NIBBLE prints one digit.
 6573 1686 CD C2 16             CALL    L16C2           ; routine PF-DC-OUT considers fractional part.
 6574 1689
 6575 1689 3E 2A                LD      A,$2A           ; prepare character 'E'
 6576 168B D7                   RST     10H             ; PRINT-A
 6577 168C
 6578 168C 78                   LD      A,B             ; transfer exponent to A
 6579 168D A7                   AND     A               ; test the sign.
 6580 168E F2 98 16             JP      P,L1698         ; forward if positive to PF-E-POS
 6581 1691
 6582 1691 ED 44                NEG                     ; negate the negative exponent.
 6583 1693 47                   LD      B,A             ; save positive exponent in B.
 6584 1694
 6585 1694 3E 16                LD      A,$16           ; prepare character '-'
 6586 1696 18 02                JR      L169A           ; skip forward to PF-E-SIGN
 6587 1698
 6588 1698              ; ---
 6589 1698
 6590 1698              ;; PF-E-POS
 6591 1698 3E 15        L1698:  LD      A,$15           ; prepare character '+'
 6592 169A
 6593 169A              ;; PF-E-SIGN
 6594 169A D7           L169A:  RST     10H             ; PRINT-A
 6595 169B
 6596 169B              ; now convert the integer exponent in B to two characters.
 6597 169B              ; it will be less than 99.
 6598 169B
 6599 169B 78                   LD      A,B             ; fetch positive exponent.
 6600 169C 06 FF                LD      B,$FF           ; initialize left hand digit to minus one.
 6601 169E
 6602 169E              ;; PF-E-TENS
 6603 169E 04           L169E:  INC     B               ; increment ten count
 6604 169F D6 0A                SUB     $0A             ; subtract ten from exponent
 6605 16A1 30 FB                JR      NC,L169E        ; loop back if greater than ten to PF-E-TENS
 6606 16A3
 6607 16A3 C6 0A                ADD     A,$0A           ; reverse last subtraction
 6608 16A5 4F                   LD      C,A             ; transfer remainder to C
 6609 16A6
 6610 16A6 78                   LD      A,B             ; transfer ten value to A.
 6611 16A7 A7                   AND     A               ; test for zero.
 6612 16A8 28 03                JR      Z,L16AD         ; skip forward if so to PF-E-LOW
 6613 16AA
 6614 16AA CD EB 07             CALL    L07EB           ; routine OUT-CODE prints as digit '1' - '9'
 6615 16AD
 6616 16AD              ;; PF-E-LOW
 6617 16AD 79           L16AD:  LD      A,C             ; low byte to A
 6618 16AE CD EB 07             CALL    L07EB           ; routine OUT-CODE prints final digit of the
 6619 16B1                                              ; exponent.
 6620 16B1 C9                   RET                     ; return.                               >>
 6621 16B2
 6622 16B2              ; ---
 6623 16B2
 6624 16B2              ; this branch deals with zeros after decimal point.
 6625 16B2              ; e.g.      .01 or .0000999
 6626 16B2
 6627 16B2              ;; PF-ZEROS
 6628 16B2 ED 44        L16B2:  NEG                     ; negate makes number positive 1 to 4.
 6629 16B4 47                   LD      B,A             ; zero count to B.
 6630 16B5
 6631 16B5 3E 1B                LD      A,$1B           ; prepare character '.'
 6632 16B7 D7                   RST     10H             ; PRINT-A
 6633 16B8
 6634 16B8 3E 1C                LD      A,$1C           ; prepare a '0'
 6635 16BA
 6636 16BA              ;; PF-ZRO-LP
 6637 16BA D7           L16BA:  RST     10H             ; PRINT-A
 6638 16BB 10 FD                DJNZ    L16BA           ; loop back to PF-ZRO-LP
 6639 16BD
 6640 16BD 18 09                JR      L16C8           ; forward to PF-FRAC-LP
 6641 16BF
 6642 16BF              ; ---
 6643 16BF
 6644 16BF              ; there is  a need to print a leading zero e.g. 0.1 but not with .01
 6645 16BF
 6646 16BF              ;; PF-ZERO-1
 6647 16BF 3E 1C        L16BF:  LD      A,$1C           ; prepare character '0'.
 6648 16C1 D7                   RST     10H             ; PRINT-A
 6649 16C2
 6650 16C2              ; this subroutine considers the decimal point and any trailing digits.
 6651 16C2              ; if the next character is a marked zero, $80, then nothing more to print.
 6652 16C2
 6653 16C2              ;; PF-DC-OUT
 6654 16C2 35           L16C2:  DEC     (HL)            ; decrement addressed character
 6655 16C3 34                   INC     (HL)            ; increment it again
 6656 16C4 E8                   RET     PE              ; return with overflow  (was 128) >>
 6657 16C5                                              ; as no fractional part
 6658 16C5
 6659 16C5              ; else there is a fractional part so print the decimal point.
 6660 16C5
 6661 16C5 3E 1B                LD      A,$1B           ; prepare character '.'
 6662 16C7 D7                   RST     10H             ; PRINT-A
 6663 16C8
 6664 16C8              ; now enter a loop to print trailing digits
 6665 16C8
 6666 16C8              ;; PF-FRAC-LP
 6667 16C8 35           L16C8:  DEC     (HL)            ; test for a marked zero.
 6668 16C9 34                   INC     (HL)            ;
 6669 16CA E8                   RET     PE              ; return when digits exhausted          >>
 6670 16CB
 6671 16CB CD D0 16             CALL    L16D0           ; routine PF-NIBBLE
 6672 16CE 18 F8                JR      L16C8           ; back for all fractional digits to PF-FRAC-LP.
 6673 16D0
 6674 16D0              ; ---
 6675 16D0
 6676 16D0              ; subroutine to print right-hand nibble
 6677 16D0
 6678 16D0              ;; PF-NIBBLE
 6679 16D0 7E           L16D0:  LD      A,(HL)          ; fetch addressed byte
 6680 16D1 E6 0F                AND     $0F             ; mask off lower 4 bits
 6681 16D3 CD EB 07             CALL    L07EB           ; routine OUT-CODE
 6682 16D6 2B                   DEC     HL              ; decrement pointer.
 6683 16D7 C9                   RET                     ; return.
 6684 16D8
 6685 16D8
 6686 16D8              ; -------------------------------
 6687 16D8              ; THE 'PREPARE TO ADD' SUBROUTINE
 6688 16D8              ; -------------------------------
 6689 16D8              ; This routine is called twice to prepare each floating point number for
 6690 16D8              ; addition, in situ, on the calculator stack.
 6691 16D8              ; The exponent is picked up from the first byte which is then cleared to act
 6692 16D8              ; as a sign byte and accept any overflow.
 6693 16D8              ; If the exponent is zero then the number is zero and an early return is made.
 6694 16D8              ; The now redundant sign bit of the mantissa is set and if the number is
 6695 16D8              ; negative then all five bytes of the number are twos-complemented to prepare
 6696 16D8              ; the number for addition.
 6697 16D8              ; On the second invocation the exponent of the first number is in B.
 6698 16D8
 6699 16D8
 6700 16D8              ;; PREP-ADD
 6701 16D8 7E           L16D8:  LD      A,(HL)          ; fetch exponent.
 6702 16D9 36 00                LD      (HL),$00        ; make this byte zero to take any overflow and
 6703 16DB                                              ; default to positive.
 6704 16DB A7                   AND     A               ; test stored exponent for zero.
 6705 16DC C8                   RET     Z               ; return with zero flag set if number is zero.
 6706 16DD
 6707 16DD 23                   INC     HL              ; point to first byte of mantissa.
 6708 16DE CB 7E                BIT     7,(HL)          ; test the sign bit.
 6709 16E0 CB FE                SET     7,(HL)          ; set it to its implied state.
 6710 16E2 2B                   DEC     HL              ; set pointer to first byte again.
 6711 16E3 C8                   RET     Z               ; return if bit indicated number is positive.>>
 6712 16E4
 6713 16E4              ; if negative then all five bytes are twos complemented starting at LSB.
 6714 16E4
 6715 16E4 C5                   PUSH    BC              ; save B register contents.
 6716 16E5 01 05 00             LD      BC,$0005        ; set BC to five.
 6717 16E8 09                   ADD     HL,BC           ; point to location after 5th byte.
 6718 16E9 41                   LD      B,C             ; set the B counter to five.
 6719 16EA 4F                   LD      C,A             ; store original exponent in C.
 6720 16EB 37                   SCF                     ; set carry flag so that one is added.
 6721 16EC
 6722 16EC              ; now enter a loop to twos-complement the number.
 6723 16EC              ; The first of the five bytes becomes $FF to denote a negative number.
 6724 16EC
 6725 16EC              ;; NEG-BYTE
 6726 16EC 2B           L16EC:  DEC     HL              ; point to first or more significant byte.
 6727 16ED 7E                   LD      A,(HL)          ; fetch to accumulator.
 6728 16EE 2F                   CPL                     ; complement.
 6729 16EF CE 00                ADC     A,$00           ; add in initial carry or any subsequent carry.
 6730 16F1 77                   LD      (HL),A          ; place number back.
 6731 16F2 10 F8                DJNZ    L16EC           ; loop back five times to NEG-BYTE
 6732 16F4
 6733 16F4 79                   LD      A,C             ; restore the exponent to accumulator.
 6734 16F5 C1                   POP     BC              ; restore B register contents.
 6735 16F6
 6736 16F6 C9                   RET                     ; return.
 6737 16F7
 6738 16F7              ; ----------------------------------
 6739 16F7              ; THE 'FETCH TWO NUMBERS' SUBROUTINE
 6740 16F7              ; ----------------------------------
 6741 16F7              ; This routine is used by addition, multiplication and division to fetch
 6742 16F7              ; the two five-byte numbers addressed by HL and DE from the calculator stack
 6743 16F7              ; into the Z80 registers.
 6744 16F7              ; The HL register may no longer point to the first of the two numbers.
 6745 16F7              ; Since the 32-bit addition operation is accomplished using two Z80 16-bit
 6746 16F7              ; instructions, it is important that the lower two bytes of each mantissa are
 6747 16F7              ; in one set of registers and the other bytes all in the alternate set.
 6748 16F7              ;
 6749 16F7              ; In: HL = highest number, DE= lowest number
 6750 16F7              ;
 6751 16F7              ;         : alt':   :
 6752 16F7              ; Out:    :H,B-C:C,B: num1
 6753 16F7              ;         :L,D-E:D-E: num2
 6754 16F7
 6755 16F7              ;; FETCH-TWO
 6756 16F7 E5           L16F7:  PUSH    HL              ; save HL
 6757 16F8 F5                   PUSH    AF              ; save A - result sign when used from division.
 6758 16F9
 6759 16F9 4E                   LD      C,(HL)          ;
 6760 16FA 23                   INC     HL              ;
 6761 16FB 46                   LD      B,(HL)          ;
 6762 16FC 77                   LD      (HL),A          ; insert sign when used from multiplication.
 6763 16FD 23                   INC     HL              ;
 6764 16FE 79                   LD      A,C             ; m1
 6765 16FF 4E                   LD      C,(HL)          ;
 6766 1700 C5                   PUSH    BC              ; PUSH m2 m3
 6767 1701
 6768 1701 23                   INC     HL              ;
 6769 1702 4E                   LD      C,(HL)          ; m4
 6770 1703 23                   INC     HL              ;
 6771 1704 46                   LD      B,(HL)          ; m5  BC holds m5 m4
 6772 1705
 6773 1705 EB                   EX      DE,HL           ; make HL point to start of second number.
 6774 1706
 6775 1706 57                   LD      D,A             ; m1
 6776 1707 5E                   LD      E,(HL)          ;
 6777 1708 D5                   PUSH    DE              ; PUSH m1 n1
 6778 1709
 6779 1709 23                   INC     HL              ;
 6780 170A 56                   LD      D,(HL)          ;
 6781 170B 23                   INC     HL              ;
 6782 170C 5E                   LD      E,(HL)          ;
 6783 170D D5                   PUSH    DE              ; PUSH n2 n3
 6784 170E
 6785 170E D9                   EXX                     ; - - - - - - -
 6786 170F
 6787 170F D1                   POP     DE              ; POP n2 n3
 6788 1710 E1                   POP     HL              ; POP m1 n1
 6789 1711 C1                   POP     BC              ; POP m2 m3
 6790 1712
 6791 1712 D9                   EXX                     ; - - - - - - -
 6792 1713
 6793 1713 23                   INC     HL              ;
 6794 1714 56                   LD      D,(HL)          ;
 6795 1715 23                   INC     HL              ;
 6796 1716 5E                   LD      E,(HL)          ; DE holds n4 n5
 6797 1717
 6798 1717 F1                   POP     AF              ; restore saved
 6799 1718 E1                   POP     HL              ; registers.
 6800 1719 C9                   RET                     ; return.
 6801 171A
 6802 171A              ; -----------------------------
 6803 171A              ; THE 'SHIFT ADDEND' SUBROUTINE
 6804 171A              ; -----------------------------
 6805 171A              ; The accumulator A contains the difference between the two exponents.
 6806 171A              ; This is the lowest of the two numbers to be added
 6807 171A
 6808 171A              ;; SHIFT-FP
 6809 171A A7           L171A:  AND     A               ; test difference between exponents.
 6810 171B C8                   RET     Z               ; return if zero. both normal.
 6811 171C
 6812 171C FE 21                CP      $21             ; compare with 33 bits.
 6813 171E 30 16                JR      NC,L1736        ; forward if greater than 32 to ADDEND-0
 6814 1720
 6815 1720 C5                   PUSH    BC              ; preserve BC - part
 6816 1721 47                   LD      B,A             ; shift counter to B.
 6817 1722
 6818 1722              ; Now perform B right shifts on the addend  L'D'E'D E
 6819 1722              ; to bring it into line with the augend     H'B'C'C B
 6820 1722
 6821 1722              ;; ONE-SHIFT
 6822 1722 D9           L1722:  EXX                     ; - - -
 6823 1723 CB 2D                SRA     L               ;    76543210->C    bit 7 unchanged.
 6824 1725 CB 1A                RR      D               ; C->76543210->C
 6825 1727 CB 1B                RR      E               ; C->76543210->C
 6826 1729 D9                   EXX                     ; - - -
 6827 172A CB 1A                RR      D               ; C->76543210->C
 6828 172C CB 1B                RR      E               ; C->76543210->C
 6829 172E 10 F2                DJNZ    L1722           ; loop back B times to ONE-SHIFT
 6830 1730
 6831 1730 C1                   POP     BC              ; restore BC
 6832 1731 D0                   RET     NC              ; return if last shift produced no carry.   >>
 6833 1732
 6834 1732              ; if carry flag was set then accuracy is being lost so round up the addend.
 6835 1732
 6836 1732 CD 41 17             CALL    L1741           ; routine ADD-BACK
 6837 1735 C0                   RET     NZ              ; return if not FF 00 00 00 00
 6838 1736
 6839 1736              ; this branch makes all five bytes of the addend zero and is made during
 6840 1736              ; addition when the exponents are too far apart for the addend bits to
 6841 1736              ; affect the result.
 6842 1736
 6843 1736              ;; ADDEND-0
 6844 1736 D9           L1736:  EXX                     ; select alternate set for more significant
 6845 1737                                              ; bytes.
 6846 1737 AF                   XOR     A               ; clear accumulator.
 6847 1738
 6848 1738
 6849 1738              ; this entry point (from multiplication) sets four of the bytes to zero or if
 6850 1738              ; continuing from above, during addition, then all five bytes are set to zero.
 6851 1738
 6852 1738              ;; ZEROS-4/5
 6853 1738 2E 00        L1738:  LD      L,$00           ; set byte 1 to zero.
 6854 173A 57                   LD      D,A             ; set byte 2 to A.
 6855 173B 5D                   LD      E,L             ; set byte 3 to zero.
 6856 173C D9                   EXX                     ; select main set
 6857 173D 11 00 00             LD      DE,$0000        ; set lower bytes 4 and 5 to zero.
 6858 1740 C9                   RET                     ; return.
 6859 1741
 6860 1741              ; -------------------------
 6861 1741              ; THE 'ADD-BACK' SUBROUTINE
 6862 1741              ; -------------------------
 6863 1741              ; Called from SHIFT-FP above during addition and after normalization from
 6864 1741              ; multiplication.
 6865 1741              ; This is really a 32-bit increment routine which sets the zero flag according
 6866 1741              ; to the 32-bit result.
 6867 1741              ; During addition, only negative numbers like FF FF FF FF FF,
 6868 1741              ; the twos-complement version of xx 80 00 00 01 say
 6869 1741              ; will result in a full ripple FF 00 00 00 00.
 6870 1741              ; FF FF FF FF FF when shifted right is unchanged by SHIFT-FP but sets the
 6871 1741              ; carry invoking this routine.
 6872 1741
 6873 1741              ;; ADD-BACK
 6874 1741 1C           L1741:  INC     E               ;
 6875 1742 C0                   RET     NZ              ;
 6876 1743
 6877 1743 14                   INC     D               ;
 6878 1744 C0                   RET     NZ              ;
 6879 1745
 6880 1745 D9                   EXX                     ;
 6881 1746 1C                   INC     E               ;
 6882 1747 20 01                JR      NZ,L174A        ; forward if no overflow to ALL-ADDED
 6883 1749
 6884 1749 14                   INC     D               ;
 6885 174A
 6886 174A              ;; ALL-ADDED
 6887 174A D9           L174A:  EXX                     ;
 6888 174B C9                   RET                     ; return with zero flag set for zero mantissa.
 6889 174C
 6890 174C
 6891 174C              ; ---------------------------
 6892 174C              ; THE 'SUBTRACTION' OPERATION
 6893 174C              ; ---------------------------
 6894 174C              ; just switch the sign of subtrahend and do an add.
 6895 174C
 6896 174C              ;; subtract
 6897 174C 1A           L174C:  LD      A,(DE)          ; fetch exponent byte of second number the
 6898 174D                                              ; subtrahend.
 6899 174D A7                   AND     A               ; test for zero
 6900 174E C8                   RET     Z               ; return if zero - first number is result.
 6901 174F
 6902 174F 13                   INC     DE              ; address the first mantissa byte.
 6903 1750 1A                   LD      A,(DE)          ; fetch to accumulator.
 6904 1751 EE 80                XOR     $80             ; toggle the sign bit.
 6905 1753 12                   LD      (DE),A          ; place back on calculator stack.
 6906 1754 1B                   DEC     DE              ; point to exponent byte.
 6907 1755                                              ; continue into addition routine.
 6908 1755
 6909 1755              ; ------------------------
 6910 1755              ; THE 'ADDITION' OPERATION
 6911 1755              ; ------------------------
 6912 1755              ; The addition operation pulls out all the stops and uses most of the Z80's
 6913 1755              ; registers to add two floating-point numbers.
 6914 1755              ; This is a binary operation and on entry, HL points to the first number
 6915 1755              ; and DE to the second.
 6916 1755
 6917 1755              ;; addition
 6918 1755 D9           L1755:  EXX                     ; - - -
 6919 1756 E5                   PUSH    HL              ; save the pointer to the next literal.
 6920 1757 D9                   EXX                     ; - - -
 6921 1758
 6922 1758 D5                   PUSH    DE              ; save pointer to second number
 6923 1759 E5                   PUSH    HL              ; save pointer to first number - will be the
 6924 175A                                              ; result pointer on calculator stack.
 6925 175A
 6926 175A CD D8 16             CALL    L16D8           ; routine PREP-ADD
 6927 175D 47                   LD      B,A             ; save first exponent byte in B.
 6928 175E EB                   EX      DE,HL           ; switch number pointers.
 6929 175F CD D8 16             CALL    L16D8           ; routine PREP-ADD
 6930 1762 4F                   LD      C,A             ; save second exponent byte in C.
 6931 1763 B8                   CP      B               ; compare the exponent bytes.
 6932 1764 30 03                JR      NC,L1769        ; forward if second higher to SHIFT-LEN
 6933 1766
 6934 1766 78                   LD      A,B             ; else higher exponent to A
 6935 1767 41                   LD      B,C             ; lower exponent to B
 6936 1768 EB                   EX      DE,HL           ; switch the number pointers.
 6937 1769
 6938 1769              ;; SHIFT-LEN
 6939 1769 F5           L1769:  PUSH    AF              ; save higher exponent
 6940 176A 90                   SUB     B               ; subtract lower exponent
 6941 176B
 6942 176B CD F7 16             CALL    L16F7           ; routine FETCH-TWO
 6943 176E CD 1A 17             CALL    L171A           ; routine SHIFT-FP
 6944 1771
 6945 1771 F1                   POP     AF              ; restore higher exponent.
 6946 1772 E1                   POP     HL              ; restore result pointer.
 6947 1773 77                   LD      (HL),A          ; insert exponent byte.
 6948 1774 E5                   PUSH    HL              ; save result pointer again.
 6949 1775
 6950 1775              ; now perform the 32-bit addition using two 16-bit Z80 add instructions.
 6951 1775
 6952 1775 68                   LD      L,B             ; transfer low bytes of mantissa individually
 6953 1776 61                   LD      H,C             ; to HL register
 6954 1777
 6955 1777 19                   ADD     HL,DE           ; the actual binary addition of lower bytes
 6956 1778
 6957 1778              ; now the two higher byte pairs that are in the alternate register sets.
 6958 1778
 6959 1778 D9                   EXX                     ; switch in set
 6960 1779 EB                   EX      DE,HL           ; transfer high mantissa bytes to HL register.
 6961 177A
 6962 177A ED 4A                ADC     HL,BC           ; the actual addition of higher bytes with
 6963 177C                                              ; any carry from first stage.
 6964 177C
 6965 177C EB                   EX      DE,HL           ; result in DE, sign bytes ($FF or $00) to HL
 6966 177D
 6967 177D              ; now consider the two sign bytes
 6968 177D
 6969 177D 7C                   LD      A,H             ; fetch sign byte of num1
 6970 177E
 6971 177E 8D                   ADC     A,L             ; add including any carry from mantissa
 6972 177F                                              ; addition. 00 or 01 or FE or FF
 6973 177F
 6974 177F 6F                   LD      L,A             ; result in L.
 6975 1780
 6976 1780              ; possible outcomes of signs and overflow from mantissa are
 6977 1780              ;
 6978 1780              ;  H +  L + carry =  L    RRA  XOR L  RRA
 6979 1780              ; ------------------------------------------------------------
 6980 1780              ; 00 + 00         = 00    00   00
 6981 1780              ; 00 + 00 + carry = 01    00   01     carry
 6982 1780              ; FF + FF         = FE C  FF   01     carry
 6983 1780              ; FF + FF + carry = FF C  FF   00
 6984 1780              ; FF + 00         = FF    FF   00
 6985 1780              ; FF + 00 + carry = 00 C  80   80
 6986 1780
 6987 1780 1F                   RRA                     ; C->76543210->C
 6988 1781 AD                   XOR     L               ; set bit 0 if shifting required.
 6989 1782
 6990 1782 D9                   EXX                     ; switch back to main set
 6991 1783 EB                   EX      DE,HL           ; full mantissa result now in D'E'D E registers.
 6992 1784 E1                   POP     HL              ; restore pointer to result exponent on
 6993 1785                                              ; the calculator stack.
 6994 1785
 6995 1785 1F                   RRA                     ; has overflow occurred ?
 6996 1786 30 08                JR      NC,L1790        ; skip forward if not to TEST-NEG
 6997 1788
 6998 1788              ; if the addition of two positive mantissas produced overflow or if the
 6999 1788              ; addition of two negative mantissas did not then the result exponent has to
 7000 1788              ; be incremented and the mantissa shifted one place to the right.
 7001 1788
 7002 1788 3E 01                LD      A,$01           ; one shift required.
 7003 178A CD 1A 17             CALL    L171A           ; routine SHIFT-FP performs a single shift
 7004 178D                                              ; rounding any lost bit
 7005 178D 34                   INC     (HL)            ; increment the exponent.
 7006 178E 28 23                JR      Z,L17B3         ; forward to ADD-REP-6 if the exponent
 7007 1790                                              ; wraps round from FF to zero as number is too
 7008 1790                                              ; big for the system.
 7009 1790
 7010 1790              ; at this stage the exponent on the calculator stack is correct.
 7011 1790
 7012 1790              ;; TEST-NEG
 7013 1790 D9           L1790:  EXX                     ; switch in the alternate set.
 7014 1791 7D                   LD      A,L             ; load result sign to accumulator.
 7015 1792 E6 80                AND     $80             ; isolate bit 7 from sign byte setting zero
 7016 1794                                              ; flag if positive.
 7017 1794 D9                   EXX                     ; back to main set.
 7018 1795
 7019 1795 23                   INC     HL              ; point to first byte of mantissa
 7020 1796 77                   LD      (HL),A          ; insert $00 positive or $80 negative at
 7021 1797                                              ; position on calculator stack.
 7022 1797
 7023 1797 2B                   DEC     HL              ; point to exponent again.
 7024 1798 28 1F                JR      Z,L17B9         ; forward if positive to GO-NC-MLT
 7025 179A
 7026 179A              ; a negative number has to be twos-complemented before being placed on stack.
 7027 179A
 7028 179A 7B                   LD      A,E             ; fetch lowest (rightmost) mantissa byte.
 7029 179B ED 44                NEG                     ; Negate
 7030 179D 3F                   CCF                     ; Complement Carry Flag
 7031 179E 5F                   LD      E,A             ; place back in register
 7032 179F
 7033 179F 7A                   LD      A,D             ; ditto
 7034 17A0 2F                   CPL                     ;
 7035 17A1 CE 00                ADC     A,$00           ;
 7036 17A3 57                   LD      D,A             ;
 7037 17A4
 7038 17A4 D9                   EXX                     ; switch to higher (leftmost) 16 bits.
 7039 17A5
 7040 17A5 7B                   LD      A,E             ; ditto
 7041 17A6 2F                   CPL                     ;
 7042 17A7 CE 00                ADC     A,$00           ;
 7043 17A9 5F                   LD      E,A             ;
 7044 17AA
 7045 17AA 7A                   LD      A,D             ; ditto
 7046 17AB 2F                   CPL                     ;
 7047 17AC CE 00                ADC     A,$00           ;
 7048 17AE 30 07                JR      NC,L17B7        ; forward without overflow to END-COMPL
 7049 17B0
 7050 17B0              ; else entire mantissa is now zero.  00 00 00 00
 7051 17B0
 7052 17B0 1F                   RRA                     ; set mantissa to 80 00 00 00
 7053 17B1 D9                   EXX                     ; switch.
 7054 17B2 34                   INC     (HL)            ; increment the exponent.
 7055 17B3
 7056 17B3              ;; ADD-REP-6
 7057 17B3 CA 80 18     L17B3:  JP      Z,L1880         ; jump forward if exponent now zero to REPORT-6
 7058 17B6                                              ; 'Number too big'
 7059 17B6
 7060 17B6 D9                   EXX                     ; switch back to alternate set.
 7061 17B7
 7062 17B7              ;; END-COMPL
 7063 17B7 57           L17B7:  LD      D,A             ; put first byte of mantissa back in DE.
 7064 17B8 D9                   EXX                     ; switch to main set.
 7065 17B9
 7066 17B9              ;; GO-NC-MLT
 7067 17B9 AF           L17B9:  XOR     A               ; clear carry flag and
 7068 17BA                                              ; clear accumulator so no extra bits carried
 7069 17BA                                              ; forward as occurs in multiplication.
 7070 17BA
 7071 17BA 18 6C                JR      L1828           ; forward to common code at TEST-NORM
 7072 17BC                                              ; but should go straight to NORMALIZE.
 7073 17BC
 7074 17BC
 7075 17BC              ; ----------------------------------------------
 7076 17BC              ; THE 'PREPARE TO MULTIPLY OR DIVIDE' SUBROUTINE
 7077 17BC              ; ----------------------------------------------
 7078 17BC              ; this routine is called twice from multiplication and twice from division
 7079 17BC              ; to prepare each of the two numbers for the operation.
 7080 17BC              ; Initially the accumulator holds zero and after the second invocation bit 7
 7081 17BC              ; of the accumulator will be the sign bit of the result.
 7082 17BC
 7083 17BC              ;; PREP-M/D
 7084 17BC 37           L17BC:  SCF                     ; set carry flag to signal number is zero.
 7085 17BD 35                   DEC     (HL)            ; test exponent
 7086 17BE 34                   INC     (HL)            ; for zero.
 7087 17BF C8                   RET     Z               ; return if zero with carry flag set.
 7088 17C0
 7089 17C0 23                   INC     HL              ; address first mantissa byte.
 7090 17C1 AE                   XOR     (HL)            ; exclusive or the running sign bit.
 7091 17C2 CB FE                SET     7,(HL)          ; set the implied bit.
 7092 17C4 2B                   DEC     HL              ; point to exponent byte.
 7093 17C5 C9                   RET                     ; return.
 7094 17C6
 7095 17C6              ; ------------------------------
 7096 17C6              ; THE 'MULTIPLICATION' OPERATION
 7097 17C6              ; ------------------------------
 7098 17C6              ;
 7099 17C6              ;
 7100 17C6
 7101 17C6              ;; multiply
 7102 17C6 AF           L17C6:  XOR     A               ; reset bit 7 of running sign flag.
 7103 17C7 CD BC 17             CALL    L17BC           ; routine PREP-M/D
 7104 17CA D8                   RET     C               ; return if number is zero.
 7105 17CB                                              ; zero * anything = zero.
 7106 17CB
 7107 17CB D9                   EXX                     ; - - -
 7108 17CC E5                   PUSH    HL              ; save pointer to 'next literal'
 7109 17CD D9                   EXX                     ; - - -
 7110 17CE
 7111 17CE D5                   PUSH    DE              ; save pointer to second number
 7112 17CF
 7113 17CF EB                   EX      DE,HL           ; make HL address second number.
 7114 17D0
 7115 17D0 CD BC 17             CALL    L17BC           ; routine PREP-M/D
 7116 17D3
 7117 17D3 EB                   EX      DE,HL           ; HL first number, DE - second number
 7118 17D4 38 5A                JR      C,L1830         ; forward with carry to ZERO-RSLT
 7119 17D6                                              ; anything * zero = zero.
 7120 17D6
 7121 17D6 E5                   PUSH    HL              ; save pointer to first number.
 7122 17D7
 7123 17D7 CD F7 16             CALL    L16F7           ; routine FETCH-TWO fetches two mantissas from
 7124 17DA                                              ; calc stack to B'C'C,B  D'E'D E
 7125 17DA                                              ; (HL will be overwritten but the result sign
 7126 17DA                                              ; in A is inserted on the calculator stack)
 7127 17DA
 7128 17DA 78                   LD      A,B             ; transfer low mantissa byte of first number
 7129 17DB A7                   AND     A               ; clear carry.
 7130 17DC ED 62                SBC     HL,HL           ; a short form of LD HL,$0000 to take lower
 7131 17DE                                              ; two bytes of result. (2 program bytes)
 7132 17DE D9                   EXX                     ; switch in alternate set
 7133 17DF E5                   PUSH    HL              ; preserve HL
 7134 17E0 ED 62                SBC     HL,HL           ; set HL to zero also to take higher two bytes
 7135 17E2                                              ; of the result and clear carry.
 7136 17E2 D9                   EXX                     ; switch back.
 7137 17E3
 7138 17E3 06 21                LD      B,$21           ; register B can now be used to count thirty
 7139 17E5                                              ; three shifts.
 7140 17E5 18 11                JR      L17F8           ; forward to loop entry point STRT-MLT
 7141 17E7
 7142 17E7              ; ---
 7143 17E7
 7144 17E7              ; The multiplication loop is entered at  STRT-LOOP.
 7145 17E7
 7146 17E7              ;; MLT-LOOP
 7147 17E7 30 05        L17E7:  JR      NC,L17EE        ; forward if no carry to NO-ADD
 7148 17E9
 7149 17E9                                              ; else add in the multiplicand.
 7150 17E9
 7151 17E9 19                   ADD     HL,DE           ; add the two low bytes to result
 7152 17EA D9                   EXX                     ; switch to more significant bytes.
 7153 17EB ED 5A                ADC     HL,DE           ; add high bytes of multiplicand and any carry.
 7154 17ED D9                   EXX                     ; switch to main set.
 7155 17EE
 7156 17EE              ; in either case shift result right into B'C'C A
 7157 17EE
 7158 17EE              ;; NO-ADD
 7159 17EE D9           L17EE:  EXX                     ; switch to alternate set
 7160 17EF CB 1C                RR      H               ; C > 76543210 > C
 7161 17F1 CB 1D                RR      L               ; C > 76543210 > C
 7162 17F3 D9                   EXX                     ;
 7163 17F4 CB 1C                RR      H               ; C > 76543210 > C
 7164 17F6 CB 1D                RR      L               ; C > 76543210 > C
 7165 17F8
 7166 17F8              ;; STRT-MLT
 7167 17F8 D9           L17F8:  EXX                     ; switch in alternate set.
 7168 17F9 CB 18                RR      B               ; C > 76543210 > C
 7169 17FB CB 19                RR      C               ; C > 76543210 > C
 7170 17FD D9                   EXX                     ; now main set
 7171 17FE CB 19                RR      C               ; C > 76543210 > C
 7172 1800 1F                   RRA                     ; C > 76543210 > C
 7173 1801 10 E4                DJNZ    L17E7           ; loop back 33 times to MLT-LOOP
 7174 1803
 7175 1803              ;
 7176 1803
 7177 1803 EB                   EX      DE,HL           ;
 7178 1804 D9                   EXX                     ;
 7179 1805 EB                   EX      DE,HL           ;
 7180 1806 D9                   EXX                     ;
 7181 1807 C1                   POP     BC              ;
 7182 1808 E1                   POP     HL              ;
 7183 1809 78                   LD      A,B             ;
 7184 180A 81                   ADD     A,C             ;
 7185 180B 20 01                JR      NZ,L180E        ; forward to MAKE-EXPT
 7186 180D
 7187 180D A7                   AND     A               ;
 7188 180E
 7189 180E              ;; MAKE-EXPT
 7190 180E 3D           L180E:  DEC     A               ;
 7191 180F 3F                   CCF                     ; Complement Carry Flag
 7192 1810
 7193 1810              ;; DIVN-EXPT
 7194 1810 17           L1810:  RLA                     ;
 7195 1811 3F                   CCF                     ; Complement Carry Flag
 7196 1812 1F                   RRA                     ;
 7197 1813 F2 19 18             JP      P,L1819         ; forward to OFLW1-CLR
 7198 1816
 7199 1816 30 68                JR      NC,L1880        ; forward to REPORT-6
 7200 1818
 7201 1818 A7                   AND     A               ;
 7202 1819
 7203 1819              ;; OFLW1-CLR
 7204 1819 3C           L1819:  INC     A               ;
 7205 181A 20 08                JR      NZ,L1824        ; forward to OFLW2-CLR
 7206 181C
 7207 181C 38 06                JR      C,L1824         ; forward to OFLW2-CLR
 7208 181E
 7209 181E D9                   EXX                     ;
 7210 181F CB 7A                BIT     7,D             ;
 7211 1821 D9                   EXX                     ;
 7212 1822 20 5C                JR      NZ,L1880        ; forward to REPORT-6
 7213 1824
 7214 1824              ;; OFLW2-CLR
 7215 1824 77           L1824:  LD      (HL),A          ;
 7216 1825 D9                   EXX                     ;
 7217 1826 78                   LD      A,B             ;
 7218 1827 D9                   EXX                     ;
 7219 1828
 7220 1828              ; addition joins here with carry flag clear.
 7221 1828
 7222 1828              ;; TEST-NORM
 7223 1828 30 15        L1828:  JR      NC,L183F        ; forward to NORMALIZE
 7224 182A
 7225 182A 7E                   LD      A,(HL)          ;
 7226 182B A7                   AND     A               ;
 7227 182C
 7228 182C              ;; NEAR-ZERO
 7229 182C 3E 80        L182C:  LD      A,$80           ; prepare to rescue the most significant bit
 7230 182E                                              ; of the mantissa if it is set.
 7231 182E 28 01                JR      Z,L1831         ; skip forward to SKIP-ZERO
 7232 1830
 7233 1830              ;; ZERO-RSLT
 7234 1830 AF           L1830:  XOR     A               ; make mask byte zero signaling set five
 7235 1831                                              ; bytes to zero.
 7236 1831
 7237 1831              ;; SKIP-ZERO
 7238 1831 D9           L1831:  EXX                     ; switch in alternate set
 7239 1832 A2                   AND     D               ; isolate most significant bit (if A is $80).
 7240 1833
 7241 1833 CD 38 17             CALL    L1738           ; routine ZEROS-4/5 sets mantissa without
 7242 1836                                              ; affecting any flags.
 7243 1836
 7244 1836 07                   RLCA                    ; test if MSB set. bit 7 goes to bit 0.
 7245 1837                                              ; either $00 -> $00 or $80 -> $01
 7246 1837 77                   LD      (HL),A          ; make exponent $01 (lowest) or $00 zero
 7247 1838 38 2E                JR      C,L1868         ; forward if first case to OFLOW-CLR
 7248 183A
 7249 183A 23                   INC     HL              ; address first mantissa byte on the
 7250 183B                                              ; calculator stack.
 7251 183B 77                   LD      (HL),A          ; insert a zero for the sign bit.
 7252 183C 2B                   DEC     HL              ; point to zero exponent
 7253 183D 18 29                JR      L1868           ; forward to OFLOW-CLR
 7254 183F
 7255 183F              ; ---
 7256 183F
 7257 183F              ; this branch is common to addition and multiplication with the mantissa
 7258 183F              ; result still in registers D'E'D E .
 7259 183F
 7260 183F              ;; NORMALIZE
 7261 183F 06 20        L183F:  LD      B,$20           ; a maximum of thirty-two left shifts will be
 7262 1841                                              ; needed.
 7263 1841
 7264 1841              ;; SHIFT-ONE
 7265 1841 D9           L1841:  EXX                     ; address higher 16 bits.
 7266 1842 CB 7A                BIT     7,D             ; test the leftmost bit
 7267 1844 D9                   EXX                     ; address lower 16 bits.
 7268 1845
 7269 1845 20 12                JR      NZ,L1859        ; forward if leftmost bit was set to NORML-NOW
 7270 1847
 7271 1847 07                   RLCA                    ; this holds zero from addition, 33rd bit
 7272 1848                                              ; from multiplication.
 7273 1848
 7274 1848 CB 13                RL      E               ; C < 76543210 < C
 7275 184A CB 12                RL      D               ; C < 76543210 < C
 7276 184C
 7277 184C D9                   EXX                     ; address higher 16 bits.
 7278 184D
 7279 184D CB 13                RL      E               ; C < 76543210 < C
 7280 184F CB 12                RL      D               ; C < 76543210 < C
 7281 1851
 7282 1851 D9                   EXX                     ; switch to main set.
 7283 1852
 7284 1852 35                   DEC     (HL)            ; decrement the exponent byte on the calculator
 7285 1853                                              ; stack.
 7286 1853
 7287 1853 28 D7                JR      Z,L182C         ; back if exponent becomes zero to NEAR-ZERO
 7288 1855                                              ; it's just possible that the last rotation
 7289 1855                                              ; set bit 7 of D. We shall see.
 7290 1855
 7291 1855 10 EA                DJNZ    L1841           ; loop back to SHIFT-ONE
 7292 1857
 7293 1857              ; if thirty-two left shifts were performed without setting the most significant
 7294 1857              ; bit then the result is zero.
 7295 1857
 7296 1857 18 D7                JR      L1830           ; back to ZERO-RSLT
 7297 1859
 7298 1859              ; ---
 7299 1859
 7300 1859              ;; NORML-NOW
 7301 1859 17           L1859:  RLA                     ; for the addition path, A is always zero.
 7302 185A                                              ; for the mult path, ...
 7303 185A
 7304 185A 30 0C                JR      NC,L1868        ; forward to OFLOW-CLR
 7305 185C
 7306 185C              ; this branch is taken only with multiplication.
 7307 185C
 7308 185C CD 41 17             CALL    L1741           ; routine ADD-BACK
 7309 185F
 7310 185F 20 07                JR      NZ,L1868        ; forward to OFLOW-CLR
 7311 1861
 7312 1861 D9                   EXX                     ;
 7313 1862 16 80                LD      D,$80           ;
 7314 1864 D9                   EXX                     ;
 7315 1865 34                   INC     (HL)            ;
 7316 1866 28 18                JR      Z,L1880         ; forward to REPORT-6
 7317 1868
 7318 1868              ; now transfer the mantissa from the register sets to the calculator stack
 7319 1868              ; incorporating the sign bit already there.
 7320 1868
 7321 1868              ;; OFLOW-CLR
 7322 1868 E5           L1868:  PUSH    HL              ; save pointer to exponent on stack.
 7323 1869 23                   INC     HL              ; address first byte of mantissa which was
 7324 186A                                              ; previously loaded with sign bit $00 or $80.
 7325 186A
 7326 186A D9                   EXX                     ; - - -
 7327 186B D5                   PUSH    DE              ; push the most significant two bytes.
 7328 186C D9                   EXX                     ; - - -
 7329 186D
 7330 186D C1                   POP     BC              ; pop - true mantissa is now BCDE.
 7331 186E
 7332 186E              ; now pick up the sign bit.
 7333 186E
 7334 186E 78                   LD      A,B             ; first mantissa byte to A
 7335 186F 17                   RLA                     ; rotate out bit 7 which is set
 7336 1870 CB 16                RL      (HL)            ; rotate sign bit on stack into carry.
 7337 1872 1F                   RRA                     ; rotate sign bit into bit 7 of mantissa.
 7338 1873
 7339 1873              ; and transfer mantissa from main registers to calculator stack.
 7340 1873
 7341 1873 77                   LD      (HL),A          ;
 7342 1874 23                   INC     HL              ;
 7343 1875 71                   LD      (HL),C          ;
 7344 1876 23                   INC     HL              ;
 7345 1877 72                   LD      (HL),D          ;
 7346 1878 23                   INC     HL              ;
 7347 1879 73                   LD      (HL),E          ;
 7348 187A
 7349 187A E1                   POP     HL              ; restore pointer to num1 now result.
 7350 187B D1                   POP     DE              ; restore pointer to num2 now STKEND.
 7351 187C
 7352 187C D9                   EXX                     ; - - -
 7353 187D E1                   POP     HL              ; restore pointer to next calculator literal.
 7354 187E D9                   EXX                     ; - - -
 7355 187F
 7356 187F C9                   RET                     ; return.
 7357 1880
 7358 1880              ; ---
 7359 1880
 7360 1880              ;; REPORT-6
 7361 1880 CF           L1880:  RST     08H             ; ERROR-1
 7362 1881 05                   DEFB    $05             ; Error Report: Arithmetic overflow.
 7363 1882
 7364 1882              ; ------------------------
 7365 1882              ; THE 'DIVISION' OPERATION
 7366 1882              ; ------------------------
 7367 1882              ;   "Of all the arithmetic subroutines, division is the most complicated and
 7368 1882              ;   the least understood.  It is particularly interesting to note that the
 7369 1882              ;   Sinclair programmer himself has made a mistake in his programming ( or has
 7370 1882              ;   copied over someone else's mistake!) for
 7371 1882              ;   PRINT PEEK 6352 [ $18D0 ] ('unimproved' ROM, 6351 [ $18CF ] )
 7372 1882              ;   should give 218 not 225."
 7373 1882              ;   - Dr. Ian Logan, Syntax magazine Jul/Aug 1982.
 7374 1882              ;   [  i.e. the jump should be made to div-34th ]
 7375 1882
 7376 1882              ;   First check for division by zero.
 7377 1882
 7378 1882              ;; division
 7379 1882 EB           L1882:  EX      DE,HL           ; consider the second number first.
 7380 1883 AF                   XOR     A               ; set the running sign flag.
 7381 1884 CD BC 17             CALL    L17BC           ; routine PREP-M/D
 7382 1887 38 F7                JR      C,L1880         ; back if zero to REPORT-6
 7383 1889                                              ; 'Arithmetic overflow'
 7384 1889
 7385 1889 EB                   EX      DE,HL           ; now prepare first number and check for zero.
 7386 188A CD BC 17             CALL    L17BC           ; routine PREP-M/D
 7387 188D D8                   RET     C               ; return if zero, 0/anything is zero.
 7388 188E
 7389 188E D9                   EXX                     ; - - -
 7390 188F E5                   PUSH    HL              ; save pointer to the next calculator literal.
 7391 1890 D9                   EXX                     ; - - -
 7392 1891
 7393 1891 D5                   PUSH    DE              ; save pointer to divisor - will be STKEND.
 7394 1892 E5                   PUSH    HL              ; save pointer to dividend - will be result.
 7395 1893
 7396 1893 CD F7 16             CALL    L16F7           ; routine FETCH-TWO fetches the two numbers
 7397 1896                                              ; into the registers H'B'C'C B
 7398 1896                                              ;                    L'D'E'D E
 7399 1896 D9                   EXX                     ; - - -
 7400 1897 E5                   PUSH    HL              ; save the two exponents.
 7401 1898
 7402 1898 60                   LD      H,B             ; transfer the dividend to H'L'H L
 7403 1899 69                   LD      L,C             ;
 7404 189A D9                   EXX                     ;
 7405 189B 61                   LD      H,C             ;
 7406 189C 68                   LD      L,B             ;
 7407 189D
 7408 189D AF                   XOR     A               ; clear carry bit and accumulator.
 7409 189E 06 DF                LD      B,$DF           ; count upwards from -33 decimal
 7410 18A0 18 10                JR      L18B2           ; forward to mid-loop entry point DIV-START
 7411 18A2
 7412 18A2              ; ---
 7413 18A2
 7414 18A2              ;; DIV-LOOP
 7415 18A2 17           L18A2:  RLA                     ; multiply partial quotient by two
 7416 18A3 CB 11                RL      C               ; setting result bit from carry.
 7417 18A5 D9                   EXX                     ;
 7418 18A6 CB 11                RL      C               ;
 7419 18A8 CB 10                RL      B               ;
 7420 18AA D9                   EXX                     ;
 7421 18AB
 7422 18AB              ;; div-34th
 7423 18AB 29           L18AB:  ADD     HL,HL           ;
 7424 18AC D9                   EXX                     ;
 7425 18AD ED 6A                ADC     HL,HL           ;
 7426 18AF D9                   EXX                     ;
 7427 18B0 38 10                JR      C,L18C2         ; forward to SUBN-ONLY
 7428 18B2
 7429 18B2              ;; DIV-START
 7430 18B2 ED 52        L18B2:  SBC     HL,DE           ; subtract divisor part.
 7431 18B4 D9                   EXX                     ;
 7432 18B5 ED 52                SBC     HL,DE           ;
 7433 18B7 D9                   EXX                     ;
 7434 18B8 30 0F                JR      NC,L18C9        ; forward if subtraction goes to NO-RSTORE
 7435 18BA
 7436 18BA 19                   ADD     HL,DE           ; else restore
 7437 18BB D9                   EXX                     ;
 7438 18BC ED 5A                ADC     HL,DE           ;
 7439 18BE D9                   EXX                     ;
 7440 18BF A7                   AND     A               ; clear carry
 7441 18C0 18 08                JR      L18CA           ; forward to COUNT-ONE
 7442 18C2
 7443 18C2              ; ---
 7444 18C2
 7445 18C2              ;; SUBN-ONLY
 7446 18C2 A7           L18C2:  AND     A               ;
 7447 18C3 ED 52                SBC     HL,DE           ;
 7448 18C5 D9                   EXX                     ;
 7449 18C6 ED 52                SBC     HL,DE           ;
 7450 18C8 D9                   EXX                     ;
 7451 18C9
 7452 18C9              ;; NO-RSTORE
 7453 18C9 37           L18C9:  SCF                     ; set carry flag
 7454 18CA
 7455 18CA              ;; COUNT-ONE
 7456 18CA 04           L18CA:  INC     B               ; increment the counter
 7457 18CB FA A2 18             JP      M,L18A2         ; back while still minus to DIV-LOOP
 7458 18CE
 7459 18CE F5                   PUSH    AF              ;
 7460 18CF 28 E1                JR      Z,L18B2         ; back to DIV-START
 7461 18D1
 7462 18D1              ; "This jump is made to the wrong place. No 34th bit will ever be obtained
 7463 18D1              ; without first shifting the dividend. Hence important results like 1/10 and
 7464 18D1              ; 1/1000 are not rounded up as they should be. Rounding up never occurs when
 7465 18D1              ; it depends on the 34th bit. The jump should be made to div-34th above."
 7466 18D1              ; - Dr. Frank O'Hara, "The Complete Spectrum ROM Disassembly", 1983,
 7467 18D1              ; published by Melbourne House.
 7468 18D1              ; (Note. on the ZX81 this would be JR Z,L18AB)
 7469 18D1              ;
 7470 18D1              ; However if you make this change, then while (1/2=.5) will now evaluate as
 7471 18D1              ; true, (.25=1/4), which did evaluate as true, no longer does.
 7472 18D1
 7473 18D1 5F                   LD      E,A             ;
 7474 18D2 51                   LD      D,C             ;
 7475 18D3 D9                   EXX                     ;
 7476 18D4 59                   LD      E,C             ;
 7477 18D5 50                   LD      D,B             ;
 7478 18D6
 7479 18D6 F1                   POP     AF              ;
 7480 18D7 CB 18                RR      B               ;
 7481 18D9 F1                   POP     AF              ;
 7482 18DA CB 18                RR      B               ;
 7483 18DC
 7484 18DC D9                   EXX                     ;
 7485 18DD C1                   POP     BC              ;
 7486 18DE E1                   POP     HL              ;
 7487 18DF 78                   LD      A,B             ;
 7488 18E0 91                   SUB     C               ;
 7489 18E1 C3 10 18             JP      L1810           ; jump back to DIVN-EXPT
 7490 18E4
 7491 18E4              ; ------------------------------------------------
 7492 18E4              ; THE 'INTEGER TRUNCATION TOWARDS ZERO' SUBROUTINE
 7493 18E4              ; ------------------------------------------------
 7494 18E4              ;
 7495 18E4
 7496 18E4              ;; truncate
 7497 18E4 7E           L18E4:  LD      A,(HL)          ; fetch exponent
 7498 18E5 FE 81                CP      $81             ; compare to +1
 7499 18E7 30 06                JR      NC,L18EF        ; forward, if 1 or more, to T-GR-ZERO
 7500 18E9
 7501 18E9              ; else the number is smaller than plus or minus 1 and can be made zero.
 7502 18E9
 7503 18E9 36 00                LD      (HL),$00        ; make exponent zero.
 7504 18EB 3E 20                LD      A,$20           ; prepare to set 32 bits of mantissa to zero.
 7505 18ED 18 05                JR      L18F4           ; forward to NIL-BYTES
 7506 18EF
 7507 18EF              ; ---
 7508 18EF
 7509 18EF              ;; T-GR-ZERO
 7510 18EF D6 A0        L18EF:  SUB     $A0             ; subtract +32 from exponent
 7511 18F1 F0                   RET     P               ; return if result is positive as all 32 bits
 7512 18F2                                              ; of the mantissa relate to the integer part.
 7513 18F2                                              ; The floating point is somewhere to the right
 7514 18F2                                              ; of the mantissa
 7515 18F2
 7516 18F2 ED 44                NEG                     ; else negate to form number of rightmost bits
 7517 18F4                                              ; to be blanked.
 7518 18F4
 7519 18F4              ; for instance, disregarding the sign bit, the number 3.5 is held as
 7520 18F4              ; exponent $82 mantissa .11100000 00000000 00000000 00000000
 7521 18F4              ; we need to set $82 - $A0 = $E2 NEG = $1E (thirty) bits to zero to form the
 7522 18F4              ; integer.
 7523 18F4              ; The sign of the number is never considered as the first bit of the mantissa
 7524 18F4              ; must be part of the integer.
 7525 18F4
 7526 18F4              ;; NIL-BYTES
 7527 18F4 D5           L18F4:  PUSH    DE              ; save pointer to STKEND
 7528 18F5 EB                   EX      DE,HL           ; HL points at STKEND
 7529 18F6 2B                   DEC     HL              ; now at last byte of mantissa.
 7530 18F7 47                   LD      B,A             ; Transfer bit count to B register.
 7531 18F8 CB 38                SRL     B               ; divide by
 7532 18FA CB 38                SRL     B               ; eight
 7533 18FC CB 38                SRL     B               ;
 7534 18FE 28 05                JR      Z,L1905         ; forward if zero to BITS-ZERO
 7535 1900
 7536 1900              ; else the original count was eight or more and whole bytes can be blanked.
 7537 1900
 7538 1900              ;; BYTE-ZERO
 7539 1900 36 00        L1900:  LD      (HL),$00        ; set eight bits to zero.
 7540 1902 2B                   DEC     HL              ; point to more significant byte of mantissa.
 7541 1903 10 FB                DJNZ    L1900           ; loop back to BYTE-ZERO
 7542 1905
 7543 1905              ; now consider any residual bits.
 7544 1905
 7545 1905              ;; BITS-ZERO
 7546 1905 E6 07        L1905:  AND     $07             ; isolate the remaining bits
 7547 1907 28 09                JR      Z,L1912         ; forward if none to IX-END
 7548 1909
 7549 1909 47                   LD      B,A             ; transfer bit count to B counter.
 7550 190A 3E FF                LD      A,$FF           ; form a mask 11111111
 7551 190C
 7552 190C              ;; LESS-MASK
 7553 190C CB 27        L190C:  SLA     A               ; 1 <- 76543210 <- o     slide mask leftwards.
 7554 190E 10 FC                DJNZ    L190C           ; loop back for bit count to LESS-MASK
 7555 1910
 7556 1910 A6                   AND     (HL)            ; lose the unwanted rightmost bits
 7557 1911 77                   LD      (HL),A          ; and place in mantissa byte.
 7558 1912
 7559 1912              ;; IX-END
 7560 1912 EB           L1912:  EX      DE,HL           ; restore result pointer from DE.
 7561 1913 D1                   POP     DE              ; restore STKEND from stack.
 7562 1914 C9                   RET                     ; return.
 7563 1915
 7564 1915
 7565 1915              ;********************************
 7566 1915              ;**  FLOATING-POINT CALCULATOR **
 7567 1915              ;********************************
 7568 1915
 7569 1915              ; As a general rule the calculator avoids using the IY register.
 7570 1915              ; Exceptions are val and str$.
 7571 1915              ; So an assembly language programmer who has disabled interrupts to use IY
 7572 1915              ; for other purposes can still use the calculator for mathematical
 7573 1915              ; purposes.
 7574 1915
 7575 1915
 7576 1915              ; ------------------------
 7577 1915              ; THE 'TABLE OF CONSTANTS'
 7578 1915              ; ------------------------
 7579 1915              ; The ZX81 has only floating-point number representation.
 7580 1915              ; Both the ZX80 and the ZX Spectrum have integer numbers in some form.
 7581 1915
 7582 1915              ;; stk-zero                                                 00 00 00 00 00
 7583 1915 00           L1915:  DEFB    $00             ;;Bytes: 1
 7584 1916 B0                   DEFB    $B0             ;;Exponent $00
 7585 1917 00                   DEFB    $00             ;;(+00,+00,+00)
 7586 1918
 7587 1918              ;; stk-one                                                  81 00 00 00 00
 7588 1918 31           L1918:  DEFB    $31             ;;Exponent $81, Bytes: 1
 7589 1919 00                   DEFB    $00             ;;(+00,+00,+00)
 7590 191A
 7591 191A
 7592 191A              ;; stk-half                                                 80 00 00 00 00
 7593 191A 30           L191A:  DEFB    $30             ;;Exponent: $80, Bytes: 1
 7594 191B 00                   DEFB    $00             ;;(+00,+00,+00)
 7595 191C
 7596 191C
 7597 191C              ;; stk-pi/2                                                 81 49 0F DA A2
 7598 191C F1           L191C:  DEFB    $F1             ;;Exponent: $81, Bytes: 4
 7599 191D 49 0F DA A2          DEFB    $49,$0F,$DA,$A2 ;;
 7600 1921
 7601 1921              ;; stk-ten                                                  84 20 00 00 00
 7602 1921 34           L1921:  DEFB    $34             ;;Exponent: $84, Bytes: 1
 7603 1922 20                   DEFB    $20             ;;(+00,+00,+00)
 7604 1923
 7605 1923
 7606 1923              ; ------------------------
 7607 1923              ; THE 'TABLE OF ADDRESSES'
 7608 1923              ; ------------------------
 7609 1923              ;
 7610 1923              ; starts with binary operations which have two operands and one result.
 7611 1923              ; three pseudo binary operations first.
 7612 1923
 7613 1923              ;; tbl-addrs
 7614 1923 2F 1C        L1923:  DEFW    L1C2F           ; $00 Address: $1C2F - jump-true
 7615 1925 72 1A                DEFW    L1A72           ; $01 Address: $1A72 - exchange
 7616 1927 E3 19                DEFW    L19E3           ; $02 Address: $19E3 - delete
 7617 1929
 7618 1929              ; true binary operations.
 7619 1929
 7620 1929 4C 17                DEFW    L174C           ; $03 Address: $174C - subtract
 7621 192B C6 17                DEFW    L17C6           ; $04 Address: $176C - multiply
 7622 192D 82 18                DEFW    L1882           ; $05 Address: $1882 - division
 7623 192F E2 1D                DEFW    L1DE2           ; $06 Address: $1DE2 - to-power
 7624 1931 ED 1A                DEFW    L1AED           ; $07 Address: $1AED - or
 7625 1933
 7626 1933 F3 1A                DEFW    L1AF3           ; $08 Address: $1B03 - no-&-no
 7627 1935 03 1B                DEFW    L1B03           ; $09 Address: $1B03 - no-l-eql
 7628 1937 03 1B                DEFW    L1B03           ; $0A Address: $1B03 - no-gr-eql
 7629 1939 03 1B                DEFW    L1B03           ; $0B Address: $1B03 - nos-neql
 7630 193B 03 1B                DEFW    L1B03           ; $0C Address: $1B03 - no-grtr
 7631 193D 03 1B                DEFW    L1B03           ; $0D Address: $1B03 - no-less
 7632 193F 03 1B                DEFW    L1B03           ; $0E Address: $1B03 - nos-eql
 7633 1941 55 17                DEFW    L1755           ; $0F Address: $1755 - addition
 7634 1943
 7635 1943 F8 1A                DEFW    L1AF8           ; $10 Address: $1AF8 - str-&-no
 7636 1945 03 1B                DEFW    L1B03           ; $11 Address: $1B03 - str-l-eql
 7637 1947 03 1B                DEFW    L1B03           ; $12 Address: $1B03 - str-gr-eql
 7638 1949 03 1B                DEFW    L1B03           ; $13 Address: $1B03 - strs-neql
 7639 194B 03 1B                DEFW    L1B03           ; $14 Address: $1B03 - str-grtr
 7640 194D 03 1B                DEFW    L1B03           ; $15 Address: $1B03 - str-less
 7641 194F 03 1B                DEFW    L1B03           ; $16 Address: $1B03 - strs-eql
 7642 1951 62 1B                DEFW    L1B62           ; $17 Address: $1B62 - strs-add
 7643 1953
 7644 1953              ; unary follow
 7645 1953
 7646 1953 A0 1A                DEFW    L1AA0           ; $18 Address: $1AA0 - neg
 7647 1955
 7648 1955 06 1C                DEFW    L1C06           ; $19 Address: $1C06 - code
 7649 1957 A4 1B                DEFW    L1BA4           ; $1A Address: $1BA4 - val
 7650 1959 11 1C                DEFW    L1C11           ; $1B Address: $1C11 - len
 7651 195B 49 1D                DEFW    L1D49           ; $1C Address: $1D49 - sin
 7652 195D 3E 1D                DEFW    L1D3E           ; $1D Address: $1D3E - cos
 7653 195F 6E 1D                DEFW    L1D6E           ; $1E Address: $1D6E - tan
 7654 1961 C4 1D                DEFW    L1DC4           ; $1F Address: $1DC4 - asn
 7655 1963 D4 1D                DEFW    L1DD4           ; $20 Address: $1DD4 - acs
 7656 1965 76 1D                DEFW    L1D76           ; $21 Address: $1D76 - atn
 7657 1967 A9 1C                DEFW    L1CA9           ; $22 Address: $1CA9 - ln
 7658 1969 5B 1C                DEFW    L1C5B           ; $23 Address: $1C5B - exp
 7659 196B 46 1C                DEFW    L1C46           ; $24 Address: $1C46 - int
 7660 196D DB 1D                DEFW    L1DDB           ; $25 Address: $1DDB - sqr
 7661 196F AF 1A                DEFW    L1AAF           ; $26 Address: $1AAF - sgn
 7662 1971 AA 1A                DEFW    L1AAA           ; $27 Address: $1AAA - abs
 7663 1973 BE 1A                DEFW    L1ABE           ; $28 Address: $1A1B - peek
 7664 1975 C5 1A                DEFW    L1AC5           ; $29 Address: $1AC5 - usr-no
 7665 1977 D5 1B                DEFW    L1BD5           ; $2A Address: $1BD5 - str$
 7666 1979 8F 1B                DEFW    L1B8F           ; $2B Address: $1B8F - chrs
 7667 197B D5 1A                DEFW    L1AD5           ; $2C Address: $1AD5 - not
 7668 197D
 7669 197D              ; end of true unary
 7670 197D
 7671 197D F6 19                DEFW    L19F6           ; $2D Address: $19F6 - duplicate
 7672 197F 37 1C                DEFW    L1C37           ; $2E Address: $1C37 - n-mod-m
 7673 1981
 7674 1981 23 1C                DEFW    L1C23           ; $2F Address: $1C23 - jump
 7675 1983 FC 19                DEFW    L19FC           ; $30 Address: $19FC - stk-data
 7676 1985
 7677 1985 17 1C                DEFW    L1C17           ; $31 Address: $1C17 - dec-jr-nz
 7678 1987 DB 1A                DEFW    L1ADB           ; $32 Address: $1ADB - less-0
 7679 1989 CE 1A                DEFW    L1ACE           ; $33 Address: $1ACE - greater-0
 7680 198B 2B 00                DEFW    L002B           ; $34 Address: $002B - end-calc
 7681 198D 18 1D                DEFW    L1D18           ; $35 Address: $1D18 - get-argt
 7682 198F E4 18                DEFW    L18E4           ; $36 Address: $18E4 - truncate
 7683 1991 E4 19                DEFW    L19E4           ; $37 Address: $19E4 - fp-calc-2
 7684 1993 5A 15                DEFW    L155A           ; $38 Address: $155A - e-to-fp
 7685 1995
 7686 1995              ; the following are just the next available slots for the 128 compound literals
 7687 1995              ; which are in range $80 - $FF.
 7688 1995
 7689 1995 7F 1A                DEFW    L1A7F           ; $39 Address: $1A7F - series-xx    $80 - $9F.
 7690 1997 51 1A                DEFW    L1A51           ; $3A Address: $1A51 - stk-const-xx $A0 - $BF.
 7691 1999 63 1A                DEFW    L1A63           ; $3B Address: $1A63 - st-mem-xx    $C0 - $DF.
 7692 199B 45 1A                DEFW    L1A45           ; $3C Address: $1A45 - get-mem-xx   $E0 - $FF.
 7693 199D
 7694 199D              ; Aside: 3D - 7F are therefore unused calculator literals.
 7695 199D              ;        39 - 7B would be available for expansion.
 7696 199D
 7697 199D              ; -------------------------------
 7698 199D              ; THE 'FLOATING POINT CALCULATOR'
 7699 199D              ; -------------------------------
 7700 199D              ;
 7701 199D              ;
 7702 199D
 7703 199D              ;; CALCULATE
 7704 199D CD 85 1B     L199D:  CALL    L1B85           ; routine STK-PNTRS is called to set up the
 7705 19A0                                              ; calculator stack pointers for a default
 7706 19A0                                              ; unary operation. HL = last value on stack.
 7707 19A0                                              ; DE = STKEND first location after stack.
 7708 19A0
 7709 19A0              ; the calculate routine is called at this point by the series generator...
 7710 19A0
 7711 19A0              ;; GEN-ENT-1
 7712 19A0 78           L19A0:  LD      A,B             ; fetch the Z80 B register to A
 7713 19A1 32 1E 40             LD      ($401E),A       ; and store value in system variable BREG.
 7714 19A4                                              ; this will be the counter for dec-jr-nz
 7715 19A4                                              ; or if used from fp-calc2 the calculator
 7716 19A4                                              ; instruction.
 7717 19A4
 7718 19A4              ; ... and again later at this point
 7719 19A4
 7720 19A4              ;; GEN-ENT-2
 7721 19A4 D9           L19A4:  EXX                     ; switch sets
 7722 19A5 E3                   EX      (SP),HL         ; and store the address of next instruction,
 7723 19A6                                              ; the return address, in H'L'.
 7724 19A6                                              ; If this is a recursive call then the H'L'
 7725 19A6                                              ; of the previous invocation goes on stack.
 7726 19A6                                              ; c.f. end-calc.
 7727 19A6 D9                   EXX                     ; switch back to main set.
 7728 19A7
 7729 19A7              ; this is the re-entry looping point when handling a string of literals.
 7730 19A7
 7731 19A7              ;; RE-ENTRY
 7732 19A7 ED 53 1C 40  L19A7:  LD      ($401C),DE      ; save end of stack in system variable STKEND
 7733 19AB D9                   EXX                     ; switch to alt
 7734 19AC 7E                   LD      A,(HL)          ; get next literal
 7735 19AD 23                   INC     HL              ; increase pointer'
 7736 19AE
 7737 19AE              ; single operation jumps back to here
 7738 19AE
 7739 19AE              ;; SCAN-ENT
 7740 19AE E5           L19AE:  PUSH    HL              ; save pointer on stack   *
 7741 19AF A7                   AND     A               ; now test the literal
 7742 19B0 F2 C2 19             JP      P,L19C2         ; forward to FIRST-3D if in range $00 - $3D
 7743 19B3                                              ; anything with bit 7 set will be one of
 7744 19B3                                              ; 128 compound literals.
 7745 19B3
 7746 19B3              ; compound literals have the following format.
 7747 19B3              ; bit 7 set indicates compound.
 7748 19B3              ; bits 6-5 the subgroup 0-3.
 7749 19B3              ; bits 4-0 the embedded parameter $00 - $1F.
 7750 19B3              ; The subgroup 0-3 needs to be manipulated to form the next available four
 7751 19B3              ; address places after the simple literals in the address table.
 7752 19B3
 7753 19B3 57                   LD      D,A             ; save literal in D
 7754 19B4 E6 60                AND     $60             ; and with 01100000 to isolate subgroup
 7755 19B6 0F                   RRCA                    ; rotate bits
 7756 19B7 0F                   RRCA                    ; 4 places to right
 7757 19B8 0F                   RRCA                    ; not five as we need offset * 2
 7758 19B9 0F                   RRCA                    ; 00000xx0
 7759 19BA C6 72                ADD     A,$72           ; add ($39 * 2) to give correct offset.
 7760 19BC                                              ; alter above if you add more literals.
 7761 19BC 6F                   LD      L,A             ; store in L for later indexing.
 7762 19BD 7A                   LD      A,D             ; bring back compound literal
 7763 19BE E6 1F                AND     $1F             ; use mask to isolate parameter bits
 7764 19C0 18 0E                JR      L19D0           ; forward to ENT-TABLE
 7765 19C2
 7766 19C2              ; ---
 7767 19C2
 7768 19C2              ; the branch was here with simple literals.
 7769 19C2
 7770 19C2              ;; FIRST-3D
 7771 19C2 FE 18        L19C2:  CP      $18             ; compare with first unary operations.
 7772 19C4 30 08                JR      NC,L19CE        ; to DOUBLE-A with unary operations
 7773 19C6
 7774 19C6              ; it is binary so adjust pointers.
 7775 19C6
 7776 19C6 D9                   EXX                     ;
 7777 19C7 01 FB FF             LD      BC,$FFFB        ; the value -5
 7778 19CA 54                   LD      D,H             ; transfer HL, the last value, to DE.
 7779 19CB 5D                   LD      E,L             ;
 7780 19CC 09                   ADD     HL,BC           ; subtract 5 making HL point to second
 7781 19CD                                              ; value.
 7782 19CD D9                   EXX                     ;
 7783 19CE
 7784 19CE              ;; DOUBLE-A
 7785 19CE 07           L19CE:  RLCA                    ; double the literal
 7786 19CF 6F                   LD      L,A             ; and store in L for indexing
 7787 19D0
 7788 19D0              ;; ENT-TABLE
 7789 19D0 11 23 19     L19D0:  LD      DE,L1923        ; Address: tbl-addrs
 7790 19D3 26 00                LD      H,$00           ; prepare to index
 7791 19D5 19                   ADD     HL,DE           ; add to get address of routine
 7792 19D6 5E                   LD      E,(HL)          ; low byte to E
 7793 19D7 23                   INC     HL              ;
 7794 19D8 56                   LD      D,(HL)          ; high byte to D
 7795 19D9
 7796 19D9 21 A7 19             LD      HL,L19A7        ; Address: RE-ENTRY
 7797 19DC E3                   EX      (SP),HL         ; goes on machine stack
 7798 19DD                                              ; address of next literal goes to HL. *
 7799 19DD
 7800 19DD
 7801 19DD D5                   PUSH    DE              ; now the address of routine is stacked.
 7802 19DE D9                   EXX                     ; back to main set
 7803 19DF                                              ; avoid using IY register.
 7804 19DF ED 4B 1D 40          LD      BC,($401D)      ; STKEND_hi
 7805 19E3                                              ; nothing much goes to C but BREG to B
 7806 19E3                                              ; and continue into next ret instruction
 7807 19E3                                              ; which has a dual identity
 7808 19E3
 7809 19E3
 7810 19E3              ; -----------------------
 7811 19E3              ; THE 'DELETE' SUBROUTINE
 7812 19E3              ; -----------------------
 7813 19E3              ; offset $02: 'delete'
 7814 19E3              ; A simple return but when used as a calculator literal this
 7815 19E3              ; deletes the last value from the calculator stack.
 7816 19E3              ; On entry, as always with binary operations,
 7817 19E3              ; HL=first number, DE=second number
 7818 19E3              ; On exit, HL=result, DE=stkend.
 7819 19E3              ; So nothing to do
 7820 19E3
 7821 19E3              ;; delete
 7822 19E3 C9           L19E3:  RET                     ; return - indirect jump if from above.
 7823 19E4
 7824 19E4              ; ---------------------------------
 7825 19E4              ; THE 'SINGLE OPERATION' SUBROUTINE
 7826 19E4              ; ---------------------------------
 7827 19E4              ; offset $37: 'fp-calc-2'
 7828 19E4              ; this single operation is used, in the first instance, to evaluate most
 7829 19E4              ; of the mathematical and string functions found in BASIC expressions.
 7830 19E4
 7831 19E4              ;; fp-calc-2
 7832 19E4 F1           L19E4:  POP     AF              ; drop return address.
 7833 19E5 3A 1E 40             LD      A,($401E)       ; load accumulator from system variable BREG
 7834 19E8                                              ; value will be literal eg. 'tan'
 7835 19E8 D9                   EXX                     ; switch to alt
 7836 19E9 18 C3                JR      L19AE           ; back to SCAN-ENT
 7837 19EB                                              ; next literal will be end-calc in scanning
 7838 19EB
 7839 19EB              ; ------------------------------
 7840 19EB              ; THE 'TEST 5 SPACES' SUBROUTINE
 7841 19EB              ; ------------------------------
 7842 19EB              ; This routine is called from MOVE-FP, STK-CONST and STK-STORE to
 7843 19EB              ; test that there is enough space between the calculator stack and the
 7844 19EB              ; machine stack for another five-byte value. It returns with BC holding
 7845 19EB              ; the value 5 ready for any subsequent LDIR.
 7846 19EB
 7847 19EB              ;; TEST-5-SP
 7848 19EB D5           L19EB:  PUSH    DE              ; save
 7849 19EC E5                   PUSH    HL              ; registers
 7850 19ED 01 05 00             LD      BC,$0005        ; an overhead of five bytes
 7851 19F0 CD C5 0E             CALL    L0EC5           ; routine TEST-ROOM tests free RAM raising
 7852 19F3                                              ; an error if not.
 7853 19F3 E1                   POP     HL              ; else restore
 7854 19F4 D1                   POP     DE              ; registers.
 7855 19F5 C9                   RET                     ; return with BC set at 5.
 7856 19F6
 7857 19F6
 7858 19F6              ; ---------------------------------------------
 7859 19F6              ; THE 'MOVE A FLOATING POINT NUMBER' SUBROUTINE
 7860 19F6              ; ---------------------------------------------
 7861 19F6              ; offset $2D: 'duplicate'
 7862 19F6              ; This simple routine is a 5-byte LDIR instruction
 7863 19F6              ; that incorporates a memory check.
 7864 19F6              ; When used as a calculator literal it duplicates the last value on the
 7865 19F6              ; calculator stack.
 7866 19F6              ; Unary so on entry HL points to last value, DE to stkend
 7867 19F6
 7868 19F6              ;; duplicate
 7869 19F6              ;; MOVE-FP
 7870 19F6 CD EB 19     L19F6:  CALL    L19EB           ; routine TEST-5-SP test free memory
 7871 19F9                                              ; and sets BC to 5.
 7872 19F9 ED B0                LDIR                    ; copy the five bytes.
 7873 19FB C9                   RET                     ; return with DE addressing new STKEND
 7874 19FC                                              ; and HL addressing new last value.
 7875 19FC
 7876 19FC              ; -------------------------------
 7877 19FC              ; THE 'STACK LITERALS' SUBROUTINE
 7878 19FC              ; -------------------------------
 7879 19FC              ; offset $30: 'stk-data'
 7880 19FC              ; When a calculator subroutine needs to put a value on the calculator
 7881 19FC              ; stack that is not a regular constant this routine is called with a
 7882 19FC              ; variable number of following data bytes that convey to the routine
 7883 19FC              ; the floating point form as succinctly as is possible.
 7884 19FC
 7885 19FC              ;; stk-data
 7886 19FC 62           L19FC:  LD      H,D             ; transfer STKEND
 7887 19FD 6B                   LD      L,E             ; to HL for result.
 7888 19FE
 7889 19FE              ;; STK-CONST
 7890 19FE CD EB 19     L19FE:  CALL    L19EB           ; routine TEST-5-SP tests that room exists
 7891 1A01                                              ; and sets BC to $05.
 7892 1A01
 7893 1A01 D9                   EXX                     ; switch to alternate set
 7894 1A02 E5                   PUSH    HL              ; save the pointer to next literal on stack
 7895 1A03 D9                   EXX                     ; switch back to main set
 7896 1A04
 7897 1A04 E3                   EX      (SP),HL         ; pointer to HL, destination to stack.
 7898 1A05
 7899 1A05 C5                   PUSH    BC              ; save BC - value 5 from test room ??.
 7900 1A06
 7901 1A06 7E                   LD      A,(HL)          ; fetch the byte following 'stk-data'
 7902 1A07 E6 C0                AND     $C0             ; isolate bits 7 and 6
 7903 1A09 07                   RLCA                    ; rotate
 7904 1A0A 07                   RLCA                    ; to bits 1 and 0  range $00 - $03.
 7905 1A0B 4F                   LD      C,A             ; transfer to C
 7906 1A0C 0C                   INC     C               ; and increment to give number of bytes
 7907 1A0D                                              ; to read. $01 - $04
 7908 1A0D 7E                   LD      A,(HL)          ; reload the first byte
 7909 1A0E E6 3F                AND     $3F             ; mask off to give possible exponent.
 7910 1A10 20 02                JR      NZ,L1A14        ; forward to FORM-EXP if it was possible to
 7911 1A12                                              ; include the exponent.
 7912 1A12
 7913 1A12              ; else byte is just a byte count and exponent comes next.
 7914 1A12
 7915 1A12 23                   INC     HL              ; address next byte and
 7916 1A13 7E                   LD      A,(HL)          ; pick up the exponent ( - $50).
 7917 1A14
 7918 1A14              ;; FORM-EXP
 7919 1A14 C6 50        L1A14:  ADD     A,$50           ; now add $50 to form actual exponent
 7920 1A16 12                   LD      (DE),A          ; and load into first destination byte.
 7921 1A17 3E 05                LD      A,$05           ; load accumulator with $05 and
 7922 1A19 91                   SUB     C               ; subtract C to give count of trailing
 7923 1A1A                                              ; zeros plus one.
 7924 1A1A 23                   INC     HL              ; increment source
 7925 1A1B 13                   INC     DE              ; increment destination
 7926 1A1C 06 00                LD      B,$00           ; prepare to copy
 7927 1A1E ED B0                LDIR                    ; copy C bytes
 7928 1A20
 7929 1A20 C1                   POP     BC              ; restore 5 counter to BC ??.
 7930 1A21
 7931 1A21 E3                   EX      (SP),HL         ; put HL on stack as next literal pointer
 7932 1A22                                              ; and the stack value - result pointer -
 7933 1A22                                              ; to HL.
 7934 1A22
 7935 1A22 D9                   EXX                     ; switch to alternate set.
 7936 1A23 E1                   POP     HL              ; restore next literal pointer from stack
 7937 1A24                                              ; to H'L'.
 7938 1A24 D9                   EXX                     ; switch back to main set.
 7939 1A25
 7940 1A25 47                   LD      B,A             ; zero count to B
 7941 1A26 AF                   XOR     A               ; clear accumulator
 7942 1A27
 7943 1A27              ;; STK-ZEROS
 7944 1A27 05           L1A27:  DEC     B               ; decrement B counter
 7945 1A28 C8                   RET     Z               ; return if zero.          >>
 7946 1A29                                              ; DE points to new STKEND
 7947 1A29                                              ; HL to new number.
 7948 1A29
 7949 1A29 12                   LD      (DE),A          ; else load zero to destination
 7950 1A2A 13                   INC     DE              ; increase destination
 7951 1A2B 18 FA                JR      L1A27           ; loop back to STK-ZEROS until done.
 7952 1A2D
 7953 1A2D              ; -------------------------------
 7954 1A2D              ; THE 'SKIP CONSTANTS' SUBROUTINE
 7955 1A2D              ; -------------------------------
 7956 1A2D              ; This routine traverses variable-length entries in the table of constants,
 7957 1A2D              ; stacking intermediate, unwanted constants onto a dummy calculator stack,
 7958 1A2D              ; in the first five bytes of the ZX81 ROM.
 7959 1A2D
 7960 1A2D              ;; SKIP-CONS
 7961 1A2D A7           L1A2D:  AND     A               ; test if initially zero.
 7962 1A2E
 7963 1A2E              ;; SKIP-NEXT
 7964 1A2E C8           L1A2E:  RET     Z               ; return if zero.          >>
 7965 1A2F
 7966 1A2F F5                   PUSH     AF             ; save count.
 7967 1A30 D5                   PUSH    DE              ; and normal STKEND
 7968 1A31
 7969 1A31 11 00 00             LD      DE,$0000        ; dummy value for STKEND at start of ROM
 7970 1A34                                              ; Note. not a fault but this has to be
 7971 1A34                                              ; moved elsewhere when running in RAM.
 7972 1A34                                              ;
 7973 1A34 CD FE 19             CALL    L19FE           ; routine STK-CONST works through variable
 7974 1A37                                              ; length records.
 7975 1A37
 7976 1A37 D1                   POP     DE              ; restore real STKEND
 7977 1A38 F1                   POP     AF              ; restore count
 7978 1A39 3D                   DEC     A               ; decrease
 7979 1A3A 18 F2                JR      L1A2E           ; loop back to SKIP-NEXT
 7980 1A3C
 7981 1A3C              ; --------------------------------
 7982 1A3C              ; THE 'MEMORY LOCATION' SUBROUTINE
 7983 1A3C              ; --------------------------------
 7984 1A3C              ; This routine, when supplied with a base address in HL and an index in A,
 7985 1A3C              ; will calculate the address of the A'th entry, where each entry occupies
 7986 1A3C              ; five bytes. It is used for addressing floating-point numbers in the
 7987 1A3C              ; calculator's memory area.
 7988 1A3C
 7989 1A3C              ;; LOC-MEM
 7990 1A3C 4F           L1A3C:  LD      C,A             ; store the original number $00-$1F.
 7991 1A3D 07                   RLCA                    ; double.
 7992 1A3E 07                   RLCA                    ; quadruple.
 7993 1A3F 81                   ADD     A,C             ; now add original value to multiply by five.
 7994 1A40
 7995 1A40 4F                   LD      C,A             ; place the result in C.
 7996 1A41 06 00                LD      B,$00           ; set B to 0.
 7997 1A43 09                   ADD     HL,BC           ; add to form address of start of number in HL.
 7998 1A44
 7999 1A44 C9                   RET                     ; return.
 8000 1A45
 8001 1A45              ; -------------------------------------
 8002 1A45              ; THE 'GET FROM MEMORY AREA' SUBROUTINE
 8003 1A45              ; -------------------------------------
 8004 1A45              ; offsets $E0 to $FF: 'get-mem-0', 'get-mem-1' etc.
 8005 1A45              ; A holds $00-$1F offset.
 8006 1A45              ; The calculator stack increases by 5 bytes.
 8007 1A45
 8008 1A45              ;; get-mem-xx
 8009 1A45 D5           L1A45:  PUSH    DE              ; save STKEND
 8010 1A46 2A 1F 40             LD      HL,($401F)      ; MEM is base address of the memory cells.
 8011 1A49 CD 3C 1A             CALL    L1A3C           ; routine LOC-MEM so that HL = first byte
 8012 1A4C CD F6 19             CALL    L19F6           ; routine MOVE-FP moves 5 bytes with memory
 8013 1A4F                                              ; check.
 8014 1A4F                                              ; DE now points to new STKEND.
 8015 1A4F E1                   POP     HL              ; the original STKEND is now RESULT pointer.
 8016 1A50 C9                   RET                     ; return.
 8017 1A51
 8018 1A51              ; ---------------------------------
 8019 1A51              ; THE 'STACK A CONSTANT' SUBROUTINE
 8020 1A51              ; ---------------------------------
 8021 1A51              ; offset $A0: 'stk-zero'
 8022 1A51              ; offset $A1: 'stk-one'
 8023 1A51              ; offset $A2: 'stk-half'
 8024 1A51              ; offset $A3: 'stk-pi/2'
 8025 1A51              ; offset $A4: 'stk-ten'
 8026 1A51              ; This routine allows a one-byte instruction to stack up to 32 constants
 8027 1A51              ; held in short form in a table of constants. In fact only 5 constants are
 8028 1A51              ; required. On entry the A register holds the literal ANDed with $1F.
 8029 1A51              ; It isn't very efficient and it would have been better to hold the
 8030 1A51              ; numbers in full, five byte form and stack them in a similar manner
 8031 1A51              ; to that which would be used later for semi-tone table values.
 8032 1A51
 8033 1A51              ;; stk-const-xx
 8034 1A51 62           L1A51:  LD      H,D             ; save STKEND - required for result
 8035 1A52 6B                   LD      L,E             ;
 8036 1A53 D9                   EXX                     ; swap
 8037 1A54 E5                   PUSH    HL              ; save pointer to next literal
 8038 1A55 21 15 19             LD      HL,L1915        ; Address: stk-zero - start of table of
 8039 1A58                                              ; constants
 8040 1A58 D9                   EXX                     ;
 8041 1A59 CD 2D 1A             CALL    L1A2D           ; routine SKIP-CONS
 8042 1A5C CD FE 19             CALL    L19FE           ; routine STK-CONST
 8043 1A5F D9                   EXX                     ;
 8044 1A60 E1                   POP     HL              ; restore pointer to next literal.
 8045 1A61 D9                   EXX                     ;
 8046 1A62 C9                   RET                     ; return.
 8047 1A63
 8048 1A63              ; ---------------------------------------
 8049 1A63              ; THE 'STORE IN A MEMORY AREA' SUBROUTINE
 8050 1A63              ; ---------------------------------------
 8051 1A63              ; Offsets $C0 to $DF: 'st-mem-0', 'st-mem-1' etc.
 8052 1A63              ; Although 32 memory storage locations can be addressed, only six
 8053 1A63              ; $C0 to $C5 are required by the ROM and only the thirty bytes (6*5)
 8054 1A63              ; required for these are allocated. ZX81 programmers who wish to
 8055 1A63              ; use the floating point routines from assembly language may wish to
 8056 1A63              ; alter the system variable MEM to point to 160 bytes of RAM to have
 8057 1A63              ; use the full range available.
 8058 1A63              ; A holds derived offset $00-$1F.
 8059 1A63              ; Unary so on entry HL points to last value, DE to STKEND.
 8060 1A63
 8061 1A63              ;; st-mem-xx
 8062 1A63 E5           L1A63:  PUSH    HL              ; save the result pointer.
 8063 1A64 EB                   EX      DE,HL           ; transfer to DE.
 8064 1A65 2A 1F 40             LD      HL,($401F)      ; fetch MEM the base of memory area.
 8065 1A68 CD 3C 1A             CALL    L1A3C           ; routine LOC-MEM sets HL to the destination.
 8066 1A6B EB                   EX      DE,HL           ; swap - HL is start, DE is destination.
 8067 1A6C CD F6 19             CALL    L19F6           ; routine MOVE-FP.
 8068 1A6F                                              ; note. a short ld bc,5; ldir
 8069 1A6F                                              ; the embedded memory check is not required
 8070 1A6F                                              ; so these instructions would be faster!
 8071 1A6F EB                   EX      DE,HL           ; DE = STKEND
 8072 1A70 E1                   POP     HL              ; restore original result pointer
 8073 1A71 C9                   RET                     ; return.
 8074 1A72
 8075 1A72              ; -------------------------
 8076 1A72              ; THE 'EXCHANGE' SUBROUTINE
 8077 1A72              ; -------------------------
 8078 1A72              ; offset $01: 'exchange'
 8079 1A72              ; This routine exchanges the last two values on the calculator stack
 8080 1A72              ; On entry, as always with binary operations,
 8081 1A72              ; HL=first number, DE=second number
 8082 1A72              ; On exit, HL=result, DE=stkend.
 8083 1A72
 8084 1A72              ;; exchange
 8085 1A72 06 05        L1A72:  LD      B,$05           ; there are five bytes to be swapped
 8086 1A74
 8087 1A74              ; start of loop.
 8088 1A74
 8089 1A74              ;; SWAP-BYTE
 8090 1A74 1A           L1A74:  LD      A,(DE)          ; each byte of second
 8091 1A75 4E                   LD      C,(HL)          ; each byte of first
 8092 1A76 EB                   EX      DE,HL           ; swap pointers
 8093 1A77 12                   LD      (DE),A          ; store each byte of first
 8094 1A78 71                   LD      (HL),C          ; store each byte of second
 8095 1A79 23                   INC     HL              ; advance both
 8096 1A7A 13                   INC     DE              ; pointers.
 8097 1A7B 10 F7                DJNZ    L1A74           ; loop back to SWAP-BYTE until all 5 done.
 8098 1A7D
 8099 1A7D EB                   EX      DE,HL           ; even up the exchanges
 8100 1A7E                                              ; so that DE addresses STKEND.
 8101 1A7E C9                   RET                     ; return.
 8102 1A7F
 8103 1A7F              ; ---------------------------------
 8104 1A7F              ; THE 'SERIES GENERATOR' SUBROUTINE
 8105 1A7F              ; ---------------------------------
 8106 1A7F              ; offset $86: 'series-06'
 8107 1A7F              ; offset $88: 'series-08'
 8108 1A7F              ; offset $8C: 'series-0C'
 8109 1A7F              ; The ZX81 uses Chebyshev polynomials to generate approximations for
 8110 1A7F              ; SIN, ATN, LN and EXP. These are named after the Russian mathematician
 8111 1A7F              ; Pafnuty Chebyshev, born in 1821, who did much pioneering work on numerical
 8112 1A7F              ; series. As far as calculators are concerned, Chebyshev polynomials have an
 8113 1A7F              ; advantage over other series, for example the Taylor series, as they can
 8114 1A7F              ; reach an approximation in just six iterations for SIN, eight for EXP and
 8115 1A7F              ; twelve for LN and ATN. The mechanics of the routine are interesting but
 8116 1A7F              ; for full treatment of how these are generated with demonstrations in
 8117 1A7F              ; Sinclair BASIC see "The Complete Spectrum ROM Disassembly" by Dr Ian Logan
 8118 1A7F              ; and Dr Frank O'Hara, published 1983 by Melbourne House.
 8119 1A7F
 8120 1A7F              ;; series-xx
 8121 1A7F 47           L1A7F:  LD      B,A             ; parameter $00 - $1F to B counter
 8122 1A80 CD A0 19             CALL    L19A0           ; routine GEN-ENT-1 is called.
 8123 1A83                                              ; A recursive call to a special entry point
 8124 1A83                                              ; in the calculator that puts the B register
 8125 1A83                                              ; in the system variable BREG. The return
 8126 1A83                                              ; address is the next location and where
 8127 1A83                                              ; the calculator will expect its first
 8128 1A83                                              ; instruction - now pointed to by HL'.
 8129 1A83                                              ; The previous pointer to the series of
 8130 1A83                                              ; five-byte numbers goes on the machine stack.
 8131 1A83
 8132 1A83              ; The initialization phase.
 8133 1A83
 8134 1A83 2D                   DEFB    $2D             ;;duplicate       x,x
 8135 1A84 0F                   DEFB    $0F             ;;addition        x+x
 8136 1A85 C0                   DEFB    $C0             ;;st-mem-0        x+x
 8137 1A86 02                   DEFB    $02             ;;delete          .
 8138 1A87 A0                   DEFB    $A0             ;;stk-zero        0
 8139 1A88 C2                   DEFB    $C2             ;;st-mem-2        0
 8140 1A89
 8141 1A89              ; a loop is now entered to perform the algebraic calculation for each of
 8142 1A89              ; the numbers in the series
 8143 1A89
 8144 1A89              ;; G-LOOP
 8145 1A89 2D           L1A89:  DEFB    $2D             ;;duplicate       v,v.
 8146 1A8A E0                   DEFB    $E0             ;;get-mem-0       v,v,x+2
 8147 1A8B 04                   DEFB    $04             ;;multiply        v,v*x+2
 8148 1A8C E2                   DEFB    $E2             ;;get-mem-2       v,v*x+2,v
 8149 1A8D C1                   DEFB    $C1             ;;st-mem-1
 8150 1A8E 03                   DEFB    $03             ;;subtract
 8151 1A8F 34                   DEFB    $34             ;;end-calc
 8152 1A90
 8153 1A90              ; the previous pointer is fetched from the machine stack to H'L' where it
 8154 1A90              ; addresses one of the numbers of the series following the series literal.
 8155 1A90
 8156 1A90 CD FC 19             CALL    L19FC           ; routine STK-DATA is called directly to
 8157 1A93                                              ; push a value and advance H'L'.
 8158 1A93 CD A4 19             CALL    L19A4           ; routine GEN-ENT-2 recursively re-enters
 8159 1A96                                              ; the calculator without disturbing
 8160 1A96                                              ; system variable BREG
 8161 1A96                                              ; H'L' value goes on the machine stack and is
 8162 1A96                                              ; then loaded as usual with the next address.
 8163 1A96
 8164 1A96 0F                   DEFB    $0F             ;;addition
 8165 1A97 01                   DEFB    $01             ;;exchange
 8166 1A98 C2                   DEFB    $C2             ;;st-mem-2
 8167 1A99 02                   DEFB    $02             ;;delete
 8168 1A9A
 8169 1A9A 31                   DEFB    $31             ;;dec-jr-nz
 8170 1A9B EE                   DEFB    $EE             ;;back to L1A89, G-LOOP
 8171 1A9C
 8172 1A9C              ; when the counted loop is complete the final subtraction yields the result
 8173 1A9C              ; for example SIN X.
 8174 1A9C
 8175 1A9C E1                   DEFB    $E1             ;;get-mem-1
 8176 1A9D 03                   DEFB    $03             ;;subtract
 8177 1A9E 34                   DEFB    $34             ;;end-calc
 8178 1A9F
 8179 1A9F C9                   RET                     ; return with H'L' pointing to location
 8180 1AA0                                              ; after last number in series.
 8181 1AA0
 8182 1AA0              ; -----------------------
 8183 1AA0              ; Handle unary minus (18)
 8184 1AA0              ; -----------------------
 8185 1AA0              ; Unary so on entry HL points to last value, DE to STKEND.
 8186 1AA0
 8187 1AA0              ;; NEGATE
 8188 1AA0              ;; negate
 8189 1AA0 7E           L1AA0:  LD A,  (HL)             ; fetch exponent of last value on the
 8190 1AA1                                              ; calculator stack.
 8191 1AA1 A7                   AND     A               ; test it.
 8192 1AA2 C8                   RET     Z               ; return if zero.
 8193 1AA3
 8194 1AA3 23                   INC     HL              ; address the byte with the sign bit.
 8195 1AA4 7E                   LD      A,(HL)          ; fetch to accumulator.
 8196 1AA5 EE 80                XOR     $80             ; toggle the sign bit.
 8197 1AA7 77                   LD      (HL),A          ; put it back.
 8198 1AA8 2B                   DEC     HL              ; point to last value again.
 8199 1AA9 C9                   RET                     ; return.
 8200 1AAA
 8201 1AAA              ; -----------------------
 8202 1AAA              ; Absolute magnitude (27)
 8203 1AAA              ; -----------------------
 8204 1AAA              ; This calculator literal finds the absolute value of the last value,
 8205 1AAA              ; floating point, on calculator stack.
 8206 1AAA
 8207 1AAA              ;; abs
 8208 1AAA 23           L1AAA:  INC     HL              ; point to byte with sign bit.
 8209 1AAB CB BE                RES     7,(HL)          ; make the sign positive.
 8210 1AAD 2B                   DEC     HL              ; point to last value again.
 8211 1AAE C9                   RET                     ; return.
 8212 1AAF
 8213 1AAF              ; -----------
 8214 1AAF              ; Signum (26)
 8215 1AAF              ; -----------
 8216 1AAF              ; This routine replaces the last value on the calculator stack,
 8217 1AAF              ; which is in floating point form, with one if positive and with -minus one
 8218 1AAF              ; if negative. If it is zero then it is left as such.
 8219 1AAF
 8220 1AAF              ;; sgn
 8221 1AAF 23           L1AAF:  INC     HL              ; point to first byte of 4-byte mantissa.
 8222 1AB0 7E                   LD      A,(HL)          ; pick up the byte with the sign bit.
 8223 1AB1 2B                   DEC     HL              ; point to exponent.
 8224 1AB2 35                   DEC     (HL)            ; test the exponent for
 8225 1AB3 34                   INC     (HL)            ; the value zero.
 8226 1AB4
 8227 1AB4 37                   SCF                     ; set the carry flag.
 8228 1AB5 C4 E0 1A             CALL    NZ,L1AE0        ; routine FP-0/1  replaces last value with one
 8229 1AB8                                              ; if exponent indicates the value is non-zero.
 8230 1AB8                                              ; in either case mantissa is now four zeros.
 8231 1AB8
 8232 1AB8 23                   INC HL                  ; point to first byte of 4-byte mantissa.
 8233 1AB9 07                   RLCA                    ; rotate original sign bit to carry.
 8234 1ABA CB 1E                RR      (HL)            ; rotate the carry into sign.
 8235 1ABC 2B                   DEC HL                  ; point to last value.
 8236 1ABD C9                   RET                     ; return.
 8237 1ABE
 8238 1ABE
 8239 1ABE              ; -------------------------
 8240 1ABE              ; Handle PEEK function (28)
 8241 1ABE              ; -------------------------
 8242 1ABE              ; This function returns the contents of a memory address.
 8243 1ABE              ; The entire address space can be peeked including the ROM.
 8244 1ABE
 8245 1ABE              ;; peek
 8246 1ABE CD A7 0E     L1ABE:  CALL    L0EA7           ; routine FIND-INT puts address in BC.
 8247 1AC1 0A                   LD      A,(BC)          ; load contents into A register.
 8248 1AC2
 8249 1AC2              ;; IN-PK-STK
 8250 1AC2 C3 1D 15     L1AC2:  JP      L151D           ; exit via STACK-A to put value on the
 8251 1AC5                                              ; calculator stack.
 8252 1AC5
 8253 1AC5              ; ---------------
 8254 1AC5              ; USR number (29)
 8255 1AC5              ; ---------------
 8256 1AC5              ; The USR function followed by a number 0-65535 is the method by which
 8257 1AC5              ; the ZX81 invokes machine code programs. This function returns the
 8258 1AC5              ; contents of the BC register pair.
 8259 1AC5              ; Note. that STACK-BC re-initializes the IY register to $4000 if a user-written
 8260 1AC5              ; program has altered it.
 8261 1AC5
 8262 1AC5              ;; usr-no
 8263 1AC5 CD A7 0E     L1AC5:  CALL    L0EA7           ; routine FIND-INT to fetch the
 8264 1AC8                                              ; supplied address into BC.
 8265 1AC8
 8266 1AC8 21 20 15             LD      HL,L1520        ; address: STACK-BC is
 8267 1ACB E5                   PUSH    HL              ; pushed onto the machine stack.
 8268 1ACC C5                   PUSH    BC              ; then the address of the machine code
 8269 1ACD                                              ; routine.
 8270 1ACD
 8271 1ACD C9                   RET                     ; make an indirect jump to the routine
 8272 1ACE                                              ; and, hopefully, to STACK-BC also.
 8273 1ACE
 8274 1ACE
 8275 1ACE              ; -----------------------
 8276 1ACE              ; Greater than zero ($33)
 8277 1ACE              ; -----------------------
 8278 1ACE              ; Test if the last value on the calculator stack is greater than zero.
 8279 1ACE              ; This routine is also called directly from the end-tests of the comparison
 8280 1ACE              ; routine.
 8281 1ACE
 8282 1ACE              ;; GREATER-0
 8283 1ACE              ;; greater-0
 8284 1ACE 7E           L1ACE:  LD      A,(HL)          ; fetch exponent.
 8285 1ACF A7                   AND     A               ; test it for zero.
 8286 1AD0 C8                   RET     Z               ; return if so.
 8287 1AD1
 8288 1AD1
 8289 1AD1 3E FF                LD      A,$FF           ; prepare XOR mask for sign bit
 8290 1AD3 18 07                JR      L1ADC           ; forward to SIGN-TO-C
 8291 1AD5                                              ; to put sign in carry
 8292 1AD5                                              ; (carry will become set if sign is positive)
 8293 1AD5                                              ; and then overwrite location with 1 or 0
 8294 1AD5                                              ; as appropriate.
 8295 1AD5
 8296 1AD5              ; ------------------------
 8297 1AD5              ; Handle NOT operator ($2C)
 8298 1AD5              ; ------------------------
 8299 1AD5              ; This overwrites the last value with 1 if it was zero else with zero
 8300 1AD5              ; if it was any other value.
 8301 1AD5              ;
 8302 1AD5              ; e.g. NOT 0 returns 1, NOT 1 returns 0, NOT -3 returns 0.
 8303 1AD5              ;
 8304 1AD5              ; The subroutine is also called directly from the end-tests of the comparison
 8305 1AD5              ; operator.
 8306 1AD5
 8307 1AD5              ;; NOT
 8308 1AD5              ;; not
 8309 1AD5 7E           L1AD5:  LD      A,(HL)          ; get exponent byte.
 8310 1AD6 ED 44                NEG                     ; negate - sets carry if non-zero.
 8311 1AD8 3F                   CCF                     ; complement so carry set if zero, else reset.
 8312 1AD9 18 05                JR      L1AE0           ; forward to FP-0/1.
 8313 1ADB
 8314 1ADB              ; -------------------
 8315 1ADB              ; Less than zero (32)
 8316 1ADB              ; -------------------
 8317 1ADB              ; Destructively test if last value on calculator stack is less than zero.
 8318 1ADB              ; Bit 7 of second byte will be set if so.
 8319 1ADB
 8320 1ADB              ;; less-0
 8321 1ADB AF           L1ADB:  XOR     A               ; set xor mask to zero
 8322 1ADC                                              ; (carry will become set if sign is negative).
 8323 1ADC
 8324 1ADC              ; transfer sign of mantissa to Carry Flag.
 8325 1ADC
 8326 1ADC              ;; SIGN-TO-C
 8327 1ADC 23           L1ADC:  INC     HL              ; address 2nd byte.
 8328 1ADD AE                   XOR     (HL)            ; bit 7 of HL will be set if number is negative.
 8329 1ADE 2B                   DEC     HL              ; address 1st byte again.
 8330 1ADF 07                   RLCA                    ; rotate bit 7 of A to carry.
 8331 1AE0
 8332 1AE0              ; -----------
 8333 1AE0              ; Zero or one
 8334 1AE0              ; -----------
 8335 1AE0              ; This routine places an integer value zero or one at the addressed location
 8336 1AE0              ; of calculator stack or MEM area. The value one is written if carry is set on
 8337 1AE0              ; entry else zero.
 8338 1AE0
 8339 1AE0              ;; FP-0/1
 8340 1AE0 E5           L1AE0:  PUSH    HL              ; save pointer to the first byte
 8341 1AE1 06 05                LD      B,$05           ; five bytes to do.
 8342 1AE3
 8343 1AE3              ;; FP-loop
 8344 1AE3 36 00        L1AE3:  LD      (HL),$00        ; insert a zero.
 8345 1AE5 23                   INC     HL              ;
 8346 1AE6 10 FB                DJNZ    L1AE3           ; repeat.
 8347 1AE8
 8348 1AE8 E1                   POP     HL              ;
 8349 1AE9 D0                   RET     NC              ;
 8350 1AEA
 8351 1AEA 36 81                LD      (HL),$81        ; make value 1
 8352 1AEC C9                   RET                     ; return.
 8353 1AED
 8354 1AED
 8355 1AED              ; -----------------------
 8356 1AED              ; Handle OR operator (07)
 8357 1AED              ; -----------------------
 8358 1AED              ; The Boolean OR operator. eg. X OR Y
 8359 1AED              ; The result is zero if both values are zero else a non-zero value.
 8360 1AED              ;
 8361 1AED              ; e.g.    0 OR 0  returns 0.
 8362 1AED              ;        -3 OR 0  returns -3.
 8363 1AED              ;         0 OR -3 returns 1.
 8364 1AED              ;        -3 OR 2  returns 1.
 8365 1AED              ;
 8366 1AED              ; A binary operation.
 8367 1AED              ; On entry HL points to first operand (X) and DE to second operand (Y).
 8368 1AED
 8369 1AED              ;; or
 8370 1AED 1A           L1AED:  LD      A,(DE)          ; fetch exponent of second number
 8371 1AEE A7                   AND     A               ; test it.
 8372 1AEF C8                   RET     Z               ; return if zero.
 8373 1AF0
 8374 1AF0 37                   SCF                     ; set carry flag
 8375 1AF1 18 ED                JR      L1AE0           ; back to FP-0/1 to overwrite the first operand
 8376 1AF3                                              ; with the value 1.
 8377 1AF3
 8378 1AF3
 8379 1AF3              ; -----------------------------
 8380 1AF3              ; Handle number AND number (08)
 8381 1AF3              ; -----------------------------
 8382 1AF3              ; The Boolean AND operator.
 8383 1AF3              ;
 8384 1AF3              ; e.g.    -3 AND 2  returns -3.
 8385 1AF3              ;         -3 AND 0  returns 0.
 8386 1AF3              ;          0 and -2 returns 0.
 8387 1AF3              ;          0 and 0  returns 0.
 8388 1AF3              ;
 8389 1AF3              ; Compare with OR routine above.
 8390 1AF3
 8391 1AF3              ;; no-&-no
 8392 1AF3 1A           L1AF3:  LD      A,(DE)          ; fetch exponent of second number.
 8393 1AF4 A7                   AND     A               ; test it.
 8394 1AF5 C0                   RET     NZ              ; return if not zero.
 8395 1AF6
 8396 1AF6 18 E8                JR      L1AE0           ; back to FP-0/1 to overwrite the first operand
 8397 1AF8                                              ; with zero for return value.
 8398 1AF8
 8399 1AF8              ; -----------------------------
 8400 1AF8              ; Handle string AND number (10)
 8401 1AF8              ; -----------------------------
 8402 1AF8              ; e.g. "YOU WIN" AND SCORE>99 will return the string if condition is true
 8403 1AF8              ; or the null string if false.
 8404 1AF8
 8405 1AF8              ;; str-&-no
 8406 1AF8 1A           L1AF8:  LD      A,(DE)          ; fetch exponent of second number.
 8407 1AF9 A7                   AND     A               ; test it.
 8408 1AFA C0                   RET     NZ              ; return if number was not zero - the string
 8409 1AFB                                              ; is the result.
 8410 1AFB
 8411 1AFB              ; if the number was zero (false) then the null string must be returned by
 8412 1AFB              ; altering the length of the string on the calculator stack to zero.
 8413 1AFB
 8414 1AFB D5                   PUSH    DE              ; save pointer to the now obsolete number
 8415 1AFC                                              ; (which will become the new STKEND)
 8416 1AFC
 8417 1AFC 1B                   DEC     DE              ; point to the 5th byte of string descriptor.
 8418 1AFD AF                   XOR     A               ; clear the accumulator.
 8419 1AFE 12                   LD      (DE),A          ; place zero in high byte of length.
 8420 1AFF 1B                   DEC     DE              ; address low byte of length.
 8421 1B00 12                   LD      (DE),A          ; place zero there - now the null string.
 8422 1B01
 8423 1B01 D1                   POP     DE              ; restore pointer - new STKEND.
 8424 1B02 C9                   RET                     ; return.
 8425 1B03
 8426 1B03              ; -----------------------------------
 8427 1B03              ; Perform comparison ($09-$0E, $11-$16)
 8428 1B03              ; -----------------------------------
 8429 1B03              ; True binary operations.
 8430 1B03              ;
 8431 1B03              ; A single entry point is used to evaluate six numeric and six string
 8432 1B03              ; comparisons. On entry, the calculator literal is in the B register and
 8433 1B03              ; the two numeric values, or the two string parameters, are on the
 8434 1B03              ; calculator stack.
 8435 1B03              ; The individual bits of the literal are manipulated to group similar
 8436 1B03              ; operations although the SUB 8 instruction does nothing useful and merely
 8437 1B03              ; alters the string test bit.
 8438 1B03              ; Numbers are compared by subtracting one from the other, strings are
 8439 1B03              ; compared by comparing every character until a mismatch, or the end of one
 8440 1B03              ; or both, is reached.
 8441 1B03              ;
 8442 1B03              ; Numeric Comparisons.
 8443 1B03              ; --------------------
 8444 1B03              ; The 'x>y' example is the easiest as it employs straight-thru logic.
 8445 1B03              ; Number y is subtracted from x and the result tested for greater-0 yielding
 8446 1B03              ; a final value 1 (true) or 0 (false).
 8447 1B03              ; For 'x<y' the same logic is used but the two values are first swapped on the
 8448 1B03              ; calculator stack.
 8449 1B03              ; For 'x=y' NOT is applied to the subtraction result yielding true if the
 8450 1B03              ; difference was zero and false with anything else.
 8451 1B03              ; The first three numeric comparisons are just the opposite of the last three
 8452 1B03              ; so the same processing steps are used and then a final NOT is applied.
 8453 1B03              ;
 8454 1B03              ; literal    Test   No  sub 8       ExOrNot  1st RRCA  exch sub  ?   End-Tests
 8455 1B03              ; =========  ====   == ======== === ======== ========  ==== ===  =  === === ===
 8456 1B03              ; no-l-eql   x<=y   09 00000001 dec 00000000 00000000  ---- x-y  ?  --- >0? NOT
 8457 1B03              ; no-gr-eql  x>=y   0A 00000010 dec 00000001 10000000c swap y-x  ?  --- >0? NOT
 8458 1B03              ; nos-neql   x<>y   0B 00000011 dec 00000010 00000001  ---- x-y  ?  NOT --- NOT
 8459 1B03              ; no-grtr    x>y    0C 00000100  -  00000100 00000010  ---- x-y  ?  --- >0? ---
 8460 1B03              ; no-less    x<y    0D 00000101  -  00000101 10000010c swap y-x  ?  --- >0? ---
 8461 1B03              ; nos-eql    x=y    0E 00000110  -  00000110 00000011  ---- x-y  ?  NOT --- ---
 8462 1B03              ;
 8463 1B03              ;                                                           comp -> C/F
 8464 1B03              ;                                                           ====    ===
 8465 1B03              ; str-l-eql  x$<=y$ 11 00001001 dec 00001000 00000100  ---- x$y$ 0  !or >0? NOT
 8466 1B03              ; str-gr-eql x$>=y$ 12 00001010 dec 00001001 10000100c swap y$x$ 0  !or >0? NOT
 8467 1B03              ; strs-neql  x$<>y$ 13 00001011 dec 00001010 00000101  ---- x$y$ 0  !or >0? NOT
 8468 1B03              ; str-grtr   x$>y$  14 00001100  -  00001100 00000110  ---- x$y$ 0  !or >0? ---
 8469 1B03              ; str-less   x$<y$  15 00001101  -  00001101 10000110c swap y$x$ 0  !or >0? ---
 8470 1B03              ; strs-eql   x$=y$  16 00001110  -  00001110 00000111  ---- x$y$ 0  !or >0? ---
 8471 1B03              ;
 8472 1B03              ; String comparisons are a little different in that the eql/neql carry flag
 8473 1B03              ; from the 2nd RRCA is, as before, fed into the first of the end tests but
 8474 1B03              ; along the way it gets modified by the comparison process. The result on the
 8475 1B03              ; stack always starts off as zero and the carry fed in determines if NOT is
 8476 1B03              ; applied to it. So the only time the greater-0 test is applied is if the
 8477 1B03              ; stack holds zero which is not very efficient as the test will always yield
 8478 1B03              ; zero. The most likely explanation is that there were once separate end tests
 8479 1B03              ; for numbers and strings.
 8480 1B03
 8481 1B03              ;; no-l-eql,etc.
 8482 1B03 78           L1B03:  LD      A,B             ; transfer literal to accumulator.
 8483 1B04 D6 08                SUB     $08             ; subtract eight - which is not useful.
 8484 1B06
 8485 1B06 CB 57                BIT     2,A             ; isolate '>', '<', '='.
 8486 1B08
 8487 1B08 20 01                JR      NZ,L1B0B        ; skip to EX-OR-NOT with these.
 8488 1B0A
 8489 1B0A 3D                   DEC     A               ; else make $00-$02, $08-$0A to match bits 0-2.
 8490 1B0B
 8491 1B0B              ;; EX-OR-NOT
 8492 1B0B 0F           L1B0B:  RRCA                    ; the first RRCA sets carry for a swap.
 8493 1B0C 30 08                JR      NC,L1B16        ; forward to NU-OR-STR with other 8 cases
 8494 1B0E
 8495 1B0E              ; for the other 4 cases the two values on the calculator stack are exchanged.
 8496 1B0E
 8497 1B0E F5                   PUSH    AF              ; save A and carry.
 8498 1B0F E5                   PUSH    HL              ; save HL - pointer to first operand.
 8499 1B10                                              ; (DE points to second operand).
 8500 1B10
 8501 1B10 CD 72 1A             CALL    L1A72           ; routine exchange swaps the two values.
 8502 1B13                                              ; (HL = second operand, DE = STKEND)
 8503 1B13
 8504 1B13 D1                   POP     DE              ; DE = first operand
 8505 1B14 EB                   EX      DE,HL           ; as we were.
 8506 1B15 F1                   POP     AF              ; restore A and carry.
 8507 1B16
 8508 1B16              ; Note. it would be better if the 2nd RRCA preceded the string test.
 8509 1B16              ; It would save two duplicate bytes and if we also got rid of that sub 8
 8510 1B16              ; at the beginning we wouldn't have to alter which bit we test.
 8511 1B16
 8512 1B16              ;; NU-OR-STR
 8513 1B16 CB 57        L1B16:  BIT     2,A             ; test if a string comparison.
 8514 1B18 20 07                JR      NZ,L1B21        ; forward to STRINGS if so.
 8515 1B1A
 8516 1B1A              ; continue with numeric comparisons.
 8517 1B1A
 8518 1B1A 0F                   RRCA                    ; 2nd RRCA causes eql/neql to set carry.
 8519 1B1B F5                   PUSH    AF              ; save A and carry
 8520 1B1C
 8521 1B1C CD 4C 17             CALL    L174C           ; routine subtract leaves result on stack.
 8522 1B1F 18 33                JR      L1B54           ; forward to END-TESTS
 8523 1B21
 8524 1B21              ; ---
 8525 1B21
 8526 1B21              ;; STRINGS
 8527 1B21 0F           L1B21:  RRCA                    ; 2nd RRCA causes eql/neql to set carry.
 8528 1B22 F5                   PUSH    AF              ; save A and carry.
 8529 1B23
 8530 1B23 CD F8 13             CALL    L13F8           ; routine STK-FETCH gets 2nd string params
 8531 1B26 D5                   PUSH    DE              ; save start2 *.
 8532 1B27 C5                   PUSH    BC              ; and the length.
 8533 1B28
 8534 1B28 CD F8 13             CALL    L13F8           ; routine STK-FETCH gets 1st string
 8535 1B2B                                              ; parameters - start in DE, length in BC.
 8536 1B2B E1                   POP     HL              ; restore length of second to HL.
 8537 1B2C
 8538 1B2C              ; A loop is now entered to compare, by subtraction, each corresponding character
 8539 1B2C              ; of the strings. For each successful match, the pointers are incremented and
 8540 1B2C              ; the lengths decreased and the branch taken back to here. If both string
 8541 1B2C              ; remainders become null at the same time, then an exact match exists.
 8542 1B2C
 8543 1B2C              ;; BYTE-COMP
 8544 1B2C 7C           L1B2C:  LD      A,H             ; test if the second string
 8545 1B2D B5                   OR      L               ; is the null string and hold flags.
 8546 1B2E
 8547 1B2E E3                   EX      (SP),HL         ; put length2 on stack, bring start2 to HL *.
 8548 1B2F 78                   LD      A,B             ; hi byte of length1 to A
 8549 1B30
 8550 1B30 20 0B                JR      NZ,L1B3D        ; forward to SEC-PLUS if second not null.
 8551 1B32
 8552 1B32 B1                   OR      C               ; test length of first string.
 8553 1B33
 8554 1B33              ;; SECND-LOW
 8555 1B33 C1           L1B33:  POP     BC              ; pop the second length off stack.
 8556 1B34 28 04                JR      Z,L1B3A         ; forward to BOTH-NULL if first string is also
 8557 1B36                                              ; of zero length.
 8558 1B36
 8559 1B36              ; the true condition - first is longer than second (SECND-LESS)
 8560 1B36
 8561 1B36 F1                   POP     AF              ; restore carry (set if eql/neql)
 8562 1B37 3F                   CCF                     ; complement carry flag.
 8563 1B38                                              ; Note. equality becomes false.
 8564 1B38                                              ; Inequality is true. By swapping or applying
 8565 1B38                                              ; a terminal 'not', all comparisons have been
 8566 1B38                                              ; manipulated so that this is success path.
 8567 1B38 18 16                JR      L1B50           ; forward to leave via STR-TEST
 8568 1B3A
 8569 1B3A              ; ---
 8570 1B3A              ; the branch was here with a match
 8571 1B3A
 8572 1B3A              ;; BOTH-NULL
 8573 1B3A F1           L1B3A:  POP     AF              ; restore carry - set for eql/neql
 8574 1B3B 18 13                JR      L1B50           ; forward to STR-TEST
 8575 1B3D
 8576 1B3D              ; ---
 8577 1B3D              ; the branch was here when 2nd string not null and low byte of first is yet
 8578 1B3D              ; to be tested.
 8579 1B3D
 8580 1B3D
 8581 1B3D              ;; SEC-PLUS
 8582 1B3D B1           L1B3D:  OR      C               ; test the length of first string.
 8583 1B3E 28 0D                JR      Z,L1B4D         ; forward to FRST-LESS if length is zero.
 8584 1B40
 8585 1B40              ; both strings have at least one character left.
 8586 1B40
 8587 1B40 1A                   LD      A,(DE)          ; fetch character of first string.
 8588 1B41 96                   SUB     (HL)            ; subtract with that of 2nd string.
 8589 1B42 38 09                JR      C,L1B4D         ; forward to FRST-LESS if carry set
 8590 1B44
 8591 1B44 20 ED                JR      NZ,L1B33        ; back to SECND-LOW and then STR-TEST
 8592 1B46                                              ; if not exact match.
 8593 1B46
 8594 1B46 0B                   DEC     BC              ; decrease length of 1st string.
 8595 1B47 13                   INC     DE              ; increment 1st string pointer.
 8596 1B48
 8597 1B48 23                   INC     HL              ; increment 2nd string pointer.
 8598 1B49 E3                   EX      (SP),HL         ; swap with length on stack
 8599 1B4A 2B                   DEC     HL              ; decrement 2nd string length
 8600 1B4B 18 DF                JR      L1B2C           ; back to BYTE-COMP
 8601 1B4D
 8602 1B4D              ; ---
 8603 1B4D              ;   the false condition.
 8604 1B4D
 8605 1B4D              ;; FRST-LESS
 8606 1B4D C1           L1B4D:  POP     BC              ; discard length
 8607 1B4E F1                   POP     AF              ; pop A
 8608 1B4F A7                   AND     A               ; clear the carry for false result.
 8609 1B50
 8610 1B50              ; ---
 8611 1B50              ;   exact match and x$>y$ rejoin here
 8612 1B50
 8613 1B50              ;; STR-TEST
 8614 1B50 F5           L1B50:  PUSH    AF              ; save A and carry
 8615 1B51
 8616 1B51 EF                   RST     28H             ;; FP-CALC
 8617 1B52 A0                   DEFB    $A0             ;;stk-zero      an initial false value.
 8618 1B53 34                   DEFB    $34             ;;end-calc
 8619 1B54
 8620 1B54              ;   both numeric and string paths converge here.
 8621 1B54
 8622 1B54              ;; END-TESTS
 8623 1B54 F1           L1B54:  POP     AF              ; pop carry  - will be set if eql/neql
 8624 1B55 F5                   PUSH    AF              ; save it again.
 8625 1B56
 8626 1B56 DC D5 1A             CALL    C,L1AD5         ; routine NOT sets true(1) if equal(0)
 8627 1B59                                              ; or, for strings, applies true result.
 8628 1B59 CD CE 1A             CALL    L1ACE           ; greater-0  ??????????
 8629 1B5C
 8630 1B5C
 8631 1B5C F1                   POP     AF              ; pop A
 8632 1B5D 0F                   RRCA                    ; the third RRCA - test for '<=', '>=' or '<>'.
 8633 1B5E D4 D5 1A             CALL    NC,L1AD5        ; apply a terminal NOT if so.
 8634 1B61 C9                   RET                     ; return.
 8635 1B62
 8636 1B62              ; -------------------------
 8637 1B62              ; String concatenation ($17)
 8638 1B62              ; -------------------------
 8639 1B62              ;   This literal combines two strings into one e.g. LET A$ = B$ + C$
 8640 1B62              ;   The two parameters of the two strings to be combined are on the stack.
 8641 1B62
 8642 1B62              ;; strs-add
 8643 1B62 CD F8 13     L1B62:  CALL    L13F8           ; routine STK-FETCH fetches string parameters
 8644 1B65                                              ; and deletes calculator stack entry.
 8645 1B65 D5                   PUSH    DE              ; save start address.
 8646 1B66 C5                   PUSH    BC              ; and length.
 8647 1B67
 8648 1B67 CD F8 13             CALL    L13F8           ; routine STK-FETCH for first string
 8649 1B6A E1                   POP     HL              ; re-fetch first length
 8650 1B6B E5                   PUSH    HL              ; and save again
 8651 1B6C D5                   PUSH    DE              ; save start of second string
 8652 1B6D C5                   PUSH    BC              ; and its length.
 8653 1B6E
 8654 1B6E 09                   ADD     HL,BC           ; add the two lengths.
 8655 1B6F 44                   LD      B,H             ; transfer to BC
 8656 1B70 4D                   LD      C,L             ; and create
 8657 1B71 F7                   RST     30H             ; BC-SPACES in workspace.
 8658 1B72                                              ; DE points to start of space.
 8659 1B72
 8660 1B72 CD C3 12             CALL    L12C3           ; routine STK-STO-$ stores parameters
 8661 1B75                                              ; of new string updating STKEND.
 8662 1B75
 8663 1B75 C1                   POP     BC              ; length of first
 8664 1B76 E1                   POP     HL              ; address of start
 8665 1B77 78                   LD      A,B             ; test for
 8666 1B78 B1                   OR      C               ; zero length.
 8667 1B79 28 02                JR      Z,L1B7D         ; to OTHER-STR if null string
 8668 1B7B
 8669 1B7B ED B0                LDIR                    ; copy string to workspace.
 8670 1B7D
 8671 1B7D              ;; OTHER-STR
 8672 1B7D C1           L1B7D:  POP     BC              ; now second length
 8673 1B7E E1                   POP     HL              ; and start of string
 8674 1B7F 78                   LD      A,B             ; test this one
 8675 1B80 B1                   OR      C               ; for zero length
 8676 1B81 28 02                JR      Z,L1B85         ; skip forward to STK-PNTRS if so as complete.
 8677 1B83
 8678 1B83 ED B0                LDIR                    ; else copy the bytes.
 8679 1B85                                              ; and continue into next routine which
 8680 1B85                                              ; sets the calculator stack pointers.
 8681 1B85
 8682 1B85              ; --------------------
 8683 1B85              ; Check stack pointers
 8684 1B85              ; --------------------
 8685 1B85              ;   Register DE is set to STKEND and HL, the result pointer, is set to five
 8686 1B85              ;   locations below this.
 8687 1B85              ;   This routine is used when it is inconvenient to save these values at the
 8688 1B85              ;   time the calculator stack is manipulated due to other activity on the
 8689 1B85              ;   machine stack.
 8690 1B85              ;   This routine is also used to terminate the VAL routine for
 8691 1B85              ;   the same reason and to initialize the calculator stack at the start of
 8692 1B85              ;   the CALCULATE routine.
 8693 1B85
 8694 1B85              ;; STK-PNTRS
 8695 1B85 2A 1C 40     L1B85:  LD      HL,($401C)      ; fetch STKEND value from system variable.
 8696 1B88 11 FB FF             LD      DE,$FFFB        ; the value -5
 8697 1B8B E5                   PUSH    HL              ; push STKEND value.
 8698 1B8C
 8699 1B8C 19                   ADD     HL,DE           ; subtract 5 from HL.
 8700 1B8D
 8701 1B8D D1                   POP     DE              ; pop STKEND to DE.
 8702 1B8E C9                   RET                     ; return.
 8703 1B8F
 8704 1B8F              ; ----------------
 8705 1B8F              ; Handle CHR$ (2B)
 8706 1B8F              ; ----------------
 8707 1B8F              ;   This function returns a single character string that is a result of
 8708 1B8F              ;   converting a number in the range 0-255 to a string e.g. CHR$ 38 = "A".
 8709 1B8F              ;   Note. the ZX81 does not have an ASCII character set.
 8710 1B8F
 8711 1B8F              ;; chrs
 8712 1B8F CD CD 15     L1B8F:  CALL    L15CD           ; routine FP-TO-A puts the number in A.
 8713 1B92
 8714 1B92 38 0E                JR      C,L1BA2         ; forward to REPORT-Bd if overflow
 8715 1B94 20 0C                JR      NZ,L1BA2        ; forward to REPORT-Bd if negative
 8716 1B96
 8717 1B96 F5                   PUSH    AF              ; save the argument.
 8718 1B97
 8719 1B97 01 01 00             LD      BC,$0001        ; one space required.
 8720 1B9A F7                   RST     30H             ; BC-SPACES makes DE point to start
 8721 1B9B
 8722 1B9B F1                   POP     AF              ; restore the number.
 8723 1B9C
 8724 1B9C 12                   LD      (DE),A          ; and store in workspace
 8725 1B9D
 8726 1B9D CD C3 12             CALL    L12C3           ; routine STK-STO-$ stacks descriptor.
 8727 1BA0
 8728 1BA0 EB                   EX      DE,HL           ; make HL point to result and DE to STKEND.
 8729 1BA1 C9                   RET                     ; return.
 8730 1BA2
 8731 1BA2              ; ---
 8732 1BA2
 8733 1BA2              ;; REPORT-Bd
 8734 1BA2 CF           L1BA2:  RST     08H             ; ERROR-1
 8735 1BA3 0A                   DEFB    $0A             ; Error Report: Integer out of range
 8736 1BA4
 8737 1BA4              ; ----------------------------
 8738 1BA4              ; Handle VAL ($1A)
 8739 1BA4              ; ----------------------------
 8740 1BA4              ;   VAL treats the characters in a string as a numeric expression.
 8741 1BA4              ;       e.g. VAL "2.3" = 2.3, VAL "2+4" = 6, VAL ("2" + "4") = 24.
 8742 1BA4
 8743 1BA4              ;; val
 8744 1BA4 2A 16 40     L1BA4:  LD      HL,($4016)      ; fetch value of system variable CH_ADD
 8745 1BA7 E5                   PUSH    HL              ; and save on the machine stack.
 8746 1BA8
 8747 1BA8 CD F8 13             CALL    L13F8           ; routine STK-FETCH fetches the string operand
 8748 1BAB                                              ; from calculator stack.
 8749 1BAB
 8750 1BAB D5                   PUSH    DE              ; save the address of the start of the string.
 8751 1BAC 03                   INC     BC              ; increment the length for a carriage return.
 8752 1BAD
 8753 1BAD F7                   RST     30H             ; BC-SPACES creates the space in workspace.
 8754 1BAE E1                   POP     HL              ; restore start of string to HL.
 8755 1BAF ED 53 16 40          LD      ($4016),DE      ; load CH_ADD with start DE in workspace.
 8756 1BB3
 8757 1BB3 D5                   PUSH    DE              ; save the start in workspace
 8758 1BB4 ED B0                LDIR                    ; copy string from program or variables or
 8759 1BB6                                              ; workspace to the workspace area.
 8760 1BB6 EB                   EX      DE,HL           ; end of string + 1 to HL
 8761 1BB7 2B                   DEC     HL              ; decrement HL to point to end of new area.
 8762 1BB8 36 76                LD      (HL),$76        ; insert a carriage return at end.
 8763 1BBA                                              ; ZX81 has a non-ASCII character set
 8764 1BBA FD CB 01 BE          RES     7,(IY+$01)      ; update FLAGS  - signal checking syntax.
 8765 1BBE CD 92 0D             CALL    L0D92           ; routine CLASS-06 - SCANNING evaluates string
 8766 1BC1                                              ; expression and checks for integer result.
 8767 1BC1
 8768 1BC1 CD 22 0D             CALL    L0D22           ; routine CHECK-2 checks for carriage return.
 8769 1BC4
 8770 1BC4
 8771 1BC4 E1                   POP     HL              ; restore start of string in workspace.
 8772 1BC5
 8773 1BC5 22 16 40             LD      ($4016),HL      ; set CH_ADD to the start of the string again.
 8774 1BC8 FD CB 01 FE          SET     7,(IY+$01)      ; update FLAGS  - signal running program.
 8775 1BCC CD 55 0F             CALL    L0F55           ; routine SCANNING evaluates the string
 8776 1BCF                                              ; in full leaving result on calculator stack.
 8777 1BCF
 8778 1BCF E1                   POP     HL              ; restore saved character address in program.
 8779 1BD0 22 16 40             LD      ($4016),HL      ; and reset the system variable CH_ADD.
 8780 1BD3
 8781 1BD3 18 B0                JR      L1B85           ; back to exit via STK-PNTRS.
 8782 1BD5                                              ; resetting the calculator stack pointers
 8783 1BD5                                              ; HL and DE from STKEND as it wasn't possible
 8784 1BD5                                              ; to preserve them during this routine.
 8785 1BD5
 8786 1BD5              ; ----------------
 8787 1BD5              ; Handle STR$ (2A)
 8788 1BD5              ; ----------------
 8789 1BD5              ;   This function returns a string representation of a numeric argument.
 8790 1BD5              ;   The method used is to trick the PRINT-FP routine into thinking it
 8791 1BD5              ;   is writing to a collapsed display file when in fact it is writing to
 8792 1BD5              ;   string workspace.
 8793 1BD5              ;   If there is already a newline at the intended print position and the
 8794 1BD5              ;   column count has not been reduced to zero then the print routine
 8795 1BD5              ;   assumes that there is only 1K of RAM and the screen memory, like the rest
 8796 1BD5              ;   of dynamic memory, expands as necessary using calls to the ONE-SPACE
 8797 1BD5              ;   routine. The screen is character-mapped not bit-mapped.
 8798 1BD5
 8799 1BD5              ;; str$
 8800 1BD5 01 01 00     L1BD5:  LD      BC,$0001        ; create an initial byte in workspace
 8801 1BD8 F7                   RST     30H             ; using BC-SPACES restart.
 8802 1BD9
 8803 1BD9 36 76                LD      (HL),$76        ; place a carriage return there.
 8804 1BDB
 8805 1BDB 2A 39 40             LD      HL,($4039)      ; fetch value of S_POSN column/line
 8806 1BDE E5                   PUSH    HL              ; and preserve on stack.
 8807 1BDF
 8808 1BDF 2E FF                LD      L,$FF           ; make column value high to create a
 8809 1BE1                                              ; contrived buffer of length 254.
 8810 1BE1 22 39 40             LD      ($4039),HL      ; and store in system variable S_POSN.
 8811 1BE4
 8812 1BE4 2A 0E 40             LD      HL,($400E)      ; fetch value of DF_CC
 8813 1BE7 E5                   PUSH    HL              ; and preserve on stack also.
 8814 1BE8
 8815 1BE8 ED 53 0E 40          LD      ($400E),DE      ; now set DF_CC which normally addresses
 8816 1BEC                                              ; somewhere in the display file to the start
 8817 1BEC                                              ; of workspace.
 8818 1BEC D5                   PUSH    DE              ; save the start of new string.
 8819 1BED
 8820 1BED CD DB 15             CALL    L15DB           ; routine PRINT-FP.
 8821 1BF0
 8822 1BF0 D1                   POP     DE              ; retrieve start of string.
 8823 1BF1
 8824 1BF1 2A 0E 40             LD      HL,($400E)      ; fetch end of string from DF_CC.
 8825 1BF4 A7                   AND     A               ; prepare for true subtraction.
 8826 1BF5 ED 52                SBC     HL,DE           ; subtract to give length.
 8827 1BF7
 8828 1BF7 44                   LD      B,H             ; and transfer to the BC
 8829 1BF8 4D                   LD      C,L             ; register.
 8830 1BF9
 8831 1BF9 E1                   POP     HL              ; restore original
 8832 1BFA 22 0E 40             LD      ($400E),HL      ; DF_CC value
 8833 1BFD
 8834 1BFD E1                   POP     HL              ; restore original
 8835 1BFE 22 39 40             LD      ($4039),HL      ; S_POSN values.
 8836 1C01
 8837 1C01 CD C3 12             CALL    L12C3           ; routine STK-STO-$ stores the string
 8838 1C04                                              ; descriptor on the calculator stack.
 8839 1C04
 8840 1C04 EB                   EX      DE,HL           ; HL = last value, DE = STKEND.
 8841 1C05 C9                   RET                     ; return.
 8842 1C06
 8843 1C06
 8844 1C06              ; -------------------
 8845 1C06              ; THE 'CODE' FUNCTION
 8846 1C06              ; -------------------
 8847 1C06              ; (offset $19: 'code')
 8848 1C06              ;   Returns the code of a character or first character of a string
 8849 1C06              ;   e.g. CODE "AARDVARK" = 38  (not 65 as the ZX81 does not have an ASCII
 8850 1C06              ;   character set).
 8851 1C06
 8852 1C06
 8853 1C06              ;; code
 8854 1C06 CD F8 13     L1C06:  CALL    L13F8           ; routine STK-FETCH to fetch and delete the
 8855 1C09                                              ; string parameters.
 8856 1C09                                              ; DE points to the start, BC holds the length.
 8857 1C09 78                   LD      A,B             ; test length
 8858 1C0A B1                   OR      C               ; of the string.
 8859 1C0B 28 01                JR      Z,L1C0E         ; skip to STK-CODE with zero if the null string.
 8860 1C0D
 8861 1C0D 1A                   LD      A,(DE)          ; else fetch the first character.
 8862 1C0E
 8863 1C0E              ;; STK-CODE
 8864 1C0E C3 1D 15     L1C0E:  JP      L151D           ; jump back to STACK-A (with memory check)
 8865 1C11
 8866 1C11              ; --------------------
 8867 1C11              ; THE 'LEN' SUBROUTINE
 8868 1C11              ; --------------------
 8869 1C11              ; (offset $1b: 'len')
 8870 1C11              ;   Returns the length of a string.
 8871 1C11              ;   In Sinclair BASIC strings can be more than twenty thousand characters long
 8872 1C11              ;   so a sixteen-bit register is required to store the length
 8873 1C11
 8874 1C11              ;; len
 8875 1C11 CD F8 13     L1C11:  CALL    L13F8           ; routine STK-FETCH to fetch and delete the
 8876 1C14                                              ; string parameters from the calculator stack.
 8877 1C14                                              ; register BC now holds the length of string.
 8878 1C14
 8879 1C14 C3 20 15             JP      L1520           ; jump back to STACK-BC to save result on the
 8880 1C17                                              ; calculator stack (with memory check).
 8881 1C17
 8882 1C17              ; -------------------------------------
 8883 1C17              ; THE 'DECREASE THE COUNTER' SUBROUTINE
 8884 1C17              ; -------------------------------------
 8885 1C17              ; (offset $31: 'dec-jr-nz')
 8886 1C17              ;   The calculator has an instruction that decrements a single-byte
 8887 1C17              ;   pseudo-register and makes consequential relative jumps just like
 8888 1C17              ;   the Z80's DJNZ instruction.
 8889 1C17
 8890 1C17              ;; dec-jr-nz
 8891 1C17 D9           L1C17:  EXX                     ; switch in set that addresses code
 8892 1C18
 8893 1C18 E5                   PUSH    HL              ; save pointer to offset byte
 8894 1C19 21 1E 40             LD      HL,$401E        ; address BREG in system variables
 8895 1C1C 35                   DEC     (HL)            ; decrement it
 8896 1C1D E1                   POP     HL              ; restore pointer
 8897 1C1E
 8898 1C1E 20 04                JR      NZ,L1C24        ; to JUMP-2 if not zero
 8899 1C20
 8900 1C20 23                   INC     HL              ; step past the jump length.
 8901 1C21 D9                   EXX                     ; switch in the main set.
 8902 1C22 C9                   RET                     ; return.
 8903 1C23
 8904 1C23              ;   Note. as a general rule the calculator avoids using the IY register
 8905 1C23              ;   otherwise the cumbersome 4 instructions in the middle could be replaced by
 8906 1C23              ;   dec (iy+$xx) - using three instruction bytes instead of six.
 8907 1C23
 8908 1C23
 8909 1C23              ; ---------------------
 8910 1C23              ; THE 'JUMP' SUBROUTINE
 8911 1C23              ; ---------------------
 8912 1C23              ; (Offset $2F; 'jump')
 8913 1C23              ;   This enables the calculator to perform relative jumps just like
 8914 1C23              ;   the Z80 chip's JR instruction.
 8915 1C23              ;   This is one of the few routines to be polished for the ZX Spectrum.
 8916 1C23              ;   See, without looking at the ZX Spectrum ROM, if you can get rid of the
 8917 1C23              ;   relative jump.
 8918 1C23
 8919 1C23              ;; jump
 8920 1C23              ;; JUMP
 8921 1C23 D9           L1C23:  EXX                     ;switch in pointer set
 8922 1C24
 8923 1C24              ;; JUMP-2
 8924 1C24 5E           L1C24:  LD      E,(HL)          ; the jump byte 0-127 forward, 128-255 back.
 8925 1C25 AF                   XOR     A               ; clear accumulator.
 8926 1C26 CB 7B                BIT     7,E             ; test if negative jump
 8927 1C28 28 01                JR      Z,L1C2B         ; skip, if positive, to JUMP-3.
 8928 1C2A
 8929 1C2A 2F                   CPL                     ; else change to $FF.
 8930 1C2B
 8931 1C2B              ;; JUMP-3
 8932 1C2B 57           L1C2B:  LD      D,A             ; transfer to high byte.
 8933 1C2C 19                   ADD     HL,DE           ; advance calculator pointer forward or back.
 8934 1C2D
 8935 1C2D D9                   EXX                     ; switch out pointer set.
 8936 1C2E C9                   RET                     ; return.
 8937 1C2F
 8938 1C2F              ; -----------------------------
 8939 1C2F              ; THE 'JUMP ON TRUE' SUBROUTINE
 8940 1C2F              ; -----------------------------
 8941 1C2F              ; (Offset $00; 'jump-true')
 8942 1C2F              ;   This enables the calculator to perform conditional relative jumps
 8943 1C2F              ;   dependent on whether the last test gave a true result
 8944 1C2F              ;   On the ZX81, the exponent will be zero for zero or else $81 for one.
 8945 1C2F
 8946 1C2F              ;; jump-true
 8947 1C2F 1A           L1C2F:  LD      A,(DE)          ; collect exponent byte
 8948 1C30
 8949 1C30 A7                   AND     A               ; is result 0 or 1 ?
 8950 1C31 20 F0                JR      NZ,L1C23        ; back to JUMP if true (1).
 8951 1C33
 8952 1C33 D9                   EXX                     ; else switch in the pointer set.
 8953 1C34 23                   INC     HL              ; step past the jump length.
 8954 1C35 D9                   EXX                     ; switch in the main set.
 8955 1C36 C9                   RET                     ; return.
 8956 1C37
 8957 1C37
 8958 1C37              ; ------------------------
 8959 1C37              ; THE 'MODULUS' SUBROUTINE
 8960 1C37              ; ------------------------
 8961 1C37              ; ( Offset $2E: 'n-mod-m' )
 8962 1C37              ; ( i1, i2 -- i3, i4 )
 8963 1C37              ;   The subroutine calculate N mod M where M is the positive integer, the
 8964 1C37              ;   'last value' on the calculator stack and N is the integer beneath.
 8965 1C37              ;   The subroutine returns the integer quotient as the last value and the
 8966 1C37              ;   remainder as the value beneath.
 8967 1C37              ;   e.g.    17 MOD 3 = 5 remainder 2
 8968 1C37              ;   It is invoked during the calculation of a random number and also by
 8969 1C37              ;   the PRINT-FP routine.
 8970 1C37
 8971 1C37              ;; n-mod-m
 8972 1C37 EF           L1C37:  RST     28H             ;; FP-CALC          17, 3.
 8973 1C38 C0                   DEFB    $C0             ;;st-mem-0          17, 3.
 8974 1C39 02                   DEFB    $02             ;;delete            17.
 8975 1C3A 2D                   DEFB    $2D             ;;duplicate         17, 17.
 8976 1C3B E0                   DEFB    $E0             ;;get-mem-0         17, 17, 3.
 8977 1C3C 05                   DEFB    $05             ;;division          17, 17/3.
 8978 1C3D 24                   DEFB    $24             ;;int               17, 5.
 8979 1C3E E0                   DEFB    $E0             ;;get-mem-0         17, 5, 3.
 8980 1C3F 01                   DEFB    $01             ;;exchange          17, 3, 5.
 8981 1C40 C0                   DEFB    $C0             ;;st-mem-0          17, 3, 5.
 8982 1C41 04                   DEFB    $04             ;;multiply          17, 15.
 8983 1C42 03                   DEFB    $03             ;;subtract          2.
 8984 1C43 E0                   DEFB    $E0             ;;get-mem-0         2, 5.
 8985 1C44 34                   DEFB    $34             ;;end-calc          2, 5.
 8986 1C45
 8987 1C45 C9                   RET                     ; return.
 8988 1C46
 8989 1C46
 8990 1C46              ; ----------------------
 8991 1C46              ; THE 'INTEGER' FUNCTION
 8992 1C46              ; ----------------------
 8993 1C46              ; (offset $24: 'int')
 8994 1C46              ;   This function returns the integer of x, which is just the same as truncate
 8995 1C46              ;   for positive numbers. The truncate literal truncates negative numbers
 8996 1C46              ;   upwards so that -3.4 gives -3 whereas the BASIC INT function has to
 8997 1C46              ;   truncate negative numbers down so that INT -3.4 is 4.
 8998 1C46              ;   It is best to work through using, say, plus or minus 3.4 as examples.
 8999 1C46
 9000 1C46              ;; int
 9001 1C46 EF           L1C46:  RST     28H             ;; FP-CALC              x.    (= 3.4 or -3.4).
 9002 1C47 2D                   DEFB    $2D             ;;duplicate             x, x.
 9003 1C48 32                   DEFB    $32             ;;less-0                x, (1/0)
 9004 1C49 00                   DEFB    $00             ;;jump-true             x, (1/0)
 9005 1C4A 04                   DEFB    $04             ;;to L1C46, X-NEG
 9006 1C4B
 9007 1C4B 36                   DEFB    $36             ;;truncate              trunc 3.4 = 3.
 9008 1C4C 34                   DEFB    $34             ;;end-calc              3.
 9009 1C4D
 9010 1C4D C9                   RET                     ; return with + int x on stack.
 9011 1C4E
 9012 1C4E
 9013 1C4E              ;; X-NEG
 9014 1C4E 2D           L1C4E:  DEFB    $2D             ;;duplicate             -3.4, -3.4.
 9015 1C4F 36                   DEFB    $36             ;;truncate              -3.4, -3.
 9016 1C50 C0                   DEFB    $C0             ;;st-mem-0              -3.4, -3.
 9017 1C51 03                   DEFB    $03             ;;subtract              -.4
 9018 1C52 E0                   DEFB    $E0             ;;get-mem-0             -.4, -3.
 9019 1C53 01                   DEFB    $01             ;;exchange              -3, -.4.
 9020 1C54 2C                   DEFB    $2C             ;;not                   -3, (0).
 9021 1C55 00                   DEFB    $00             ;;jump-true             -3.
 9022 1C56 03                   DEFB    $03             ;;to L1C59, EXIT        -3.
 9023 1C57
 9024 1C57 A1                   DEFB    $A1             ;;stk-one               -3, 1.
 9025 1C58 03                   DEFB    $03             ;;subtract              -4.
 9026 1C59
 9027 1C59              ;; EXIT
 9028 1C59 34           L1C59:  DEFB    $34             ;;end-calc              -4.
 9029 1C5A
 9030 1C5A C9                   RET                     ; return.
 9031 1C5B
 9032 1C5B
 9033 1C5B              ; ----------------
 9034 1C5B              ; Exponential (23)
 9035 1C5B              ; ----------------
 9036 1C5B              ;
 9037 1C5B              ;
 9038 1C5B
 9039 1C5B              ;; EXP
 9040 1C5B              ;; exp
 9041 1C5B EF           L1C5B:  RST     28H             ;; FP-CALC
 9042 1C5C 30                   DEFB    $30             ;;stk-data
 9043 1C5D F1                   DEFB    $F1             ;;Exponent: $81, Bytes: 4
 9044 1C5E 38 AA 3B 29          DEFB    $38,$AA,$3B,$29 ;;
 9045 1C62 04                   DEFB    $04             ;;multiply
 9046 1C63 2D                   DEFB    $2D             ;;duplicate
 9047 1C64 24                   DEFB    $24             ;;int
 9048 1C65 C3                   DEFB    $C3             ;;st-mem-3
 9049 1C66 03                   DEFB    $03             ;;subtract
 9050 1C67 2D                   DEFB    $2D             ;;duplicate
 9051 1C68 0F                   DEFB    $0F             ;;addition
 9052 1C69 A1                   DEFB    $A1             ;;stk-one
 9053 1C6A 03                   DEFB    $03             ;;subtract
 9054 1C6B 88                   DEFB    $88             ;;series-08
 9055 1C6C 13                   DEFB    $13             ;;Exponent: $63, Bytes: 1
 9056 1C6D 36                   DEFB    $36             ;;(+00,+00,+00)
 9057 1C6E 58                   DEFB    $58             ;;Exponent: $68, Bytes: 2
 9058 1C6F 65 66                DEFB    $65,$66         ;;(+00,+00)
 9059 1C71 9D                   DEFB    $9D             ;;Exponent: $6D, Bytes: 3
 9060 1C72 78 65 40             DEFB    $78,$65,$40     ;;(+00)
 9061 1C75 A2                   DEFB    $A2             ;;Exponent: $72, Bytes: 3
 9062 1C76 60 32 C9             DEFB    $60,$32,$C9     ;;(+00)
 9063 1C79 E7                   DEFB    $E7             ;;Exponent: $77, Bytes: 4
 9064 1C7A 21 F7 AF 24          DEFB    $21,$F7,$AF,$24 ;;
 9065 1C7E EB                   DEFB    $EB             ;;Exponent: $7B, Bytes: 4
 9066 1C7F 2F B0 B0 14          DEFB    $2F,$B0,$B0,$14 ;;
 9067 1C83 EE                   DEFB    $EE             ;;Exponent: $7E, Bytes: 4
 9068 1C84 7E BB 94 58          DEFB    $7E,$BB,$94,$58 ;;
 9069 1C88 F1                   DEFB    $F1             ;;Exponent: $81, Bytes: 4
 9070 1C89 3A 7E F8 CF          DEFB    $3A,$7E,$F8,$CF ;;
 9071 1C8D E3                   DEFB    $E3             ;;get-mem-3
 9072 1C8E 34                   DEFB    $34             ;;end-calc
 9073 1C8F
 9074 1C8F CD CD 15             CALL    L15CD           ; routine FP-TO-A
 9075 1C92 20 07                JR      NZ,L1C9B        ; to N-NEGTV
 9076 1C94
 9077 1C94 38 03                JR      C,L1C99         ; to REPORT-6b
 9078 1C96
 9079 1C96 86                   ADD     A,(HL)          ;
 9080 1C97 30 09                JR      NC,L1CA2        ; to RESULT-OK
 9081 1C99
 9082 1C99
 9083 1C99              ;; REPORT-6b
 9084 1C99 CF           L1C99:  RST     08H             ; ERROR-1
 9085 1C9A 05                   DEFB    $05             ; Error Report: Number too big
 9086 1C9B
 9087 1C9B              ;; N-NEGTV
 9088 1C9B 38 07        L1C9B:  JR      C,L1CA4         ; to RSLT-ZERO
 9089 1C9D
 9090 1C9D 96                   SUB     (HL)            ;
 9091 1C9E 30 04                JR      NC,L1CA4        ; to RSLT-ZERO
 9092 1CA0
 9093 1CA0 ED 44                NEG                     ; Negate
 9094 1CA2
 9095 1CA2              ;; RESULT-OK
 9096 1CA2 77           L1CA2:  LD      (HL),A          ;
 9097 1CA3 C9                   RET                     ; return.
 9098 1CA4
 9099 1CA4
 9100 1CA4              ;; RSLT-ZERO
 9101 1CA4 EF           L1CA4:  RST     28H             ;; FP-CALC
 9102 1CA5 02                   DEFB    $02             ;;delete
 9103 1CA6 A0                   DEFB    $A0             ;;stk-zero
 9104 1CA7 34                   DEFB    $34             ;;end-calc
 9105 1CA8
 9106 1CA8 C9                   RET                     ; return.
 9107 1CA9
 9108 1CA9
 9109 1CA9              ; --------------------------------
 9110 1CA9              ; THE 'NATURAL LOGARITHM' FUNCTION
 9111 1CA9              ; --------------------------------
 9112 1CA9              ; (offset $22: 'ln')
 9113 1CA9              ;   Like the ZX81 itself, 'natural' logarithms came from Scotland.
 9114 1CA9              ;   They were devised in 1614 by well-traveled Scotsman John Napier who noted
 9115 1CA9              ;   "Nothing doth more molest and hinder calculators than the multiplications,
 9116 1CA9              ;    divisions, square and cubical extractions of great numbers".
 9117 1CA9              ;
 9118 1CA9              ;   Napier's logarithms enabled the above operations to be accomplished by
 9119 1CA9              ;   simple addition and subtraction simplifying the navigational and
 9120 1CA9              ;   astronomical calculations which beset his age.
 9121 1CA9              ;   Napier's logarithms were quickly overtaken by logarithms to the base 10
 9122 1CA9              ;   devised, in conjunction with Napier, by Henry Briggs a Cambridge-educated
 9123 1CA9              ;   professor of Geometry at Oxford University. These simplified the layout
 9124 1CA9              ;   of the tables enabling humans to easily scale calculations.
 9125 1CA9              ;
 9126 1CA9              ;   It is only recently with the introduction of pocket calculators and
 9127 1CA9              ;   computers like the ZX81 that natural logarithms are once more at the fore,
 9128 1CA9              ;   although some computers retain logarithms to the base ten.
 9129 1CA9              ;   'Natural' logarithms are powers to the base 'e', which like 'pi' is a
 9130 1CA9              ;   naturally occurring number in branches of mathematics.
 9131 1CA9              ;   Like 'pi' also, 'e' is an irrational number and starts 2.718281828...
 9132 1CA9              ;
 9133 1CA9              ;   The tabular use of logarithms was that to multiply two numbers one looked
 9134 1CA9              ;   up their two logarithms in the tables, added them together and then looked
 9135 1CA9              ;   for the result in a table of antilogarithms to give the desired product.
 9136 1CA9              ;
 9137 1CA9              ;   The EXP function is the BASIC equivalent of a calculator's 'antiln' function
 9138 1CA9              ;   and by picking any two numbers, 1.72 and 6.89 say,
 9139 1CA9              ;     10 PRINT EXP ( LN 1.72 + LN 6.89 )
 9140 1CA9              ;   will give just the same result as
 9141 1CA9              ;     20 PRINT 1.72 * 6.89.
 9142 1CA9              ;   Division is accomplished by subtracting the two logs.
 9143 1CA9              ;
 9144 1CA9              ;   Napier also mentioned "square and cubicle extractions".
 9145 1CA9              ;   To raise a number to the power 3, find its 'ln', multiply by 3 and find the
 9146 1CA9              ;   'antiln'.  e.g. PRINT EXP( LN 4 * 3 )  gives 64.
 9147 1CA9              ;   Similarly to find the n'th root divide the logarithm by 'n'.
 9148 1CA9              ;   The ZX81 ROM used PRINT EXP ( LN 9 / 2 ) to find the square root of the
 9149 1CA9              ;   number 9. The Napieran square root function is just a special case of
 9150 1CA9              ;   the 'to_power' function. A cube root or indeed any root/power would be just
 9151 1CA9              ;   as simple.
 9152 1CA9
 9153 1CA9              ;   First test that the argument to LN is a positive, non-zero number.
 9154 1CA9
 9155 1CA9              ;; ln
 9156 1CA9 EF           L1CA9:  RST     28H             ;; FP-CALC
 9157 1CAA 2D                   DEFB    $2D             ;;duplicate
 9158 1CAB 33                   DEFB    $33             ;;greater-0
 9159 1CAC 00                   DEFB    $00             ;;jump-true
 9160 1CAD 04                   DEFB    $04             ;;to L1CB1, VALID
 9161 1CAE
 9162 1CAE 34                   DEFB    $34             ;;end-calc
 9163 1CAF
 9164 1CAF
 9165 1CAF              ;; REPORT-Ab
 9166 1CAF CF           L1CAF:  RST     08H             ; ERROR-1
 9167 1CB0 09                   DEFB    $09             ; Error Report: Invalid argument
 9168 1CB1
 9169 1CB1              ;; VALID
 9170 1CB1 A0           L1CB1:  DEFB    $A0             ;;stk-zero              Note. not
 9171 1CB2 02                   DEFB    $02             ;;delete                necessary.
 9172 1CB3 34                   DEFB    $34             ;;end-calc
 9173 1CB4 7E                   LD      A,(HL)          ;
 9174 1CB5
 9175 1CB5 36 80                LD      (HL),$80        ;
 9176 1CB7 CD 1D 15             CALL    L151D           ; routine STACK-A
 9177 1CBA
 9178 1CBA EF                   RST     28H             ;; FP-CALC
 9179 1CBB 30                   DEFB    $30             ;;stk-data
 9180 1CBC 38                   DEFB    $38             ;;Exponent: $88, Bytes: 1
 9181 1CBD 00                   DEFB    $00             ;;(+00,+00,+00)
 9182 1CBE 03                   DEFB    $03             ;;subtract
 9183 1CBF 01                   DEFB    $01             ;;exchange
 9184 1CC0 2D                   DEFB    $2D             ;;duplicate
 9185 1CC1 30                   DEFB    $30             ;;stk-data
 9186 1CC2 F0                   DEFB    $F0             ;;Exponent: $80, Bytes: 4
 9187 1CC3 4C CC CC CD          DEFB    $4C,$CC,$CC,$CD ;;
 9188 1CC7 03                   DEFB    $03             ;;subtract
 9189 1CC8 33                   DEFB    $33             ;;greater-0
 9190 1CC9 00                   DEFB    $00             ;;jump-true
 9191 1CCA 08                   DEFB    $08             ;;to L1CD2, GRE.8
 9192 1CCB
 9193 1CCB 01                   DEFB    $01             ;;exchange
 9194 1CCC A1                   DEFB    $A1             ;;stk-one
 9195 1CCD 03                   DEFB    $03             ;;subtract
 9196 1CCE 01                   DEFB    $01             ;;exchange
 9197 1CCF 34                   DEFB    $34             ;;end-calc
 9198 1CD0
 9199 1CD0 34                   INC     (HL)            ;
 9200 1CD1
 9201 1CD1 EF                   RST     28H             ;; FP-CALC
 9202 1CD2
 9203 1CD2              ;; GRE.8
 9204 1CD2 01           L1CD2:  DEFB    $01             ;;exchange
 9205 1CD3 30                   DEFB    $30             ;;stk-data
 9206 1CD4 F0                   DEFB    $F0             ;;Exponent: $80, Bytes: 4
 9207 1CD5 31 72 17 F8          DEFB    $31,$72,$17,$F8 ;;
 9208 1CD9 04                   DEFB    $04             ;;multiply
 9209 1CDA 01                   DEFB    $01             ;;exchange
 9210 1CDB A2                   DEFB    $A2             ;;stk-half
 9211 1CDC 03                   DEFB    $03             ;;subtract
 9212 1CDD A2                   DEFB    $A2             ;;stk-half
 9213 1CDE 03                   DEFB    $03             ;;subtract
 9214 1CDF 2D                   DEFB    $2D             ;;duplicate
 9215 1CE0 30                   DEFB    $30             ;;stk-data
 9216 1CE1 32                   DEFB    $32             ;;Exponent: $82, Bytes: 1
 9217 1CE2 20                   DEFB    $20             ;;(+00,+00,+00)
 9218 1CE3 04                   DEFB    $04             ;;multiply
 9219 1CE4 A2                   DEFB    $A2             ;;stk-half
 9220 1CE5 03                   DEFB    $03             ;;subtract
 9221 1CE6 8C                   DEFB    $8C             ;;series-0C
 9222 1CE7 11                   DEFB    $11             ;;Exponent: $61, Bytes: 1
 9223 1CE8 AC                   DEFB    $AC             ;;(+00,+00,+00)
 9224 1CE9 14                   DEFB    $14             ;;Exponent: $64, Bytes: 1
 9225 1CEA 09                   DEFB    $09             ;;(+00,+00,+00)
 9226 1CEB 56                   DEFB    $56             ;;Exponent: $66, Bytes: 2
 9227 1CEC DA A5                DEFB    $DA,$A5         ;;(+00,+00)
 9228 1CEE 59                   DEFB    $59             ;;Exponent: $69, Bytes: 2
 9229 1CEF 30 C5                DEFB    $30,$C5         ;;(+00,+00)
 9230 1CF1 5C                   DEFB    $5C             ;;Exponent: $6C, Bytes: 2
 9231 1CF2 90 AA                DEFB    $90,$AA         ;;(+00,+00)
 9232 1CF4 9E                   DEFB    $9E             ;;Exponent: $6E, Bytes: 3
 9233 1CF5 70 6F 61             DEFB    $70,$6F,$61     ;;(+00)
 9234 1CF8 A1                   DEFB    $A1             ;;Exponent: $71, Bytes: 3
 9235 1CF9 CB DA 96             DEFB    $CB,$DA,$96     ;;(+00)
 9236 1CFC A4                   DEFB    $A4             ;;Exponent: $74, Bytes: 3
 9237 1CFD 31 9F B4             DEFB    $31,$9F,$B4     ;;(+00)
 9238 1D00 E7                   DEFB    $E7             ;;Exponent: $77, Bytes: 4
 9239 1D01 A0 FE 5C FC          DEFB    $A0,$FE,$5C,$FC ;;
 9240 1D05 EA                   DEFB    $EA             ;;Exponent: $7A, Bytes: 4
 9241 1D06 1B 43 CA 36          DEFB    $1B,$43,$CA,$36 ;;
 9242 1D0A ED                   DEFB    $ED             ;;Exponent: $7D, Bytes: 4
 9243 1D0B A7 9C 7E 5E          DEFB    $A7,$9C,$7E,$5E ;;
 9244 1D0F F0                   DEFB    $F0             ;;Exponent: $80, Bytes: 4
 9245 1D10 6E 23 80 93          DEFB    $6E,$23,$80,$93 ;;
 9246 1D14 04                   DEFB    $04             ;;multiply
 9247 1D15 0F                   DEFB    $0F             ;;addition
 9248 1D16 34                   DEFB    $34             ;;end-calc
 9249 1D17
 9250 1D17 C9                   RET                     ; return.
 9251 1D18
 9252 1D18              ; -----------------------------
 9253 1D18              ; THE 'TRIGONOMETRIC' FUNCTIONS
 9254 1D18              ; -----------------------------
 9255 1D18              ;   Trigonometry is rocket science. It is also used by carpenters and pyramid
 9256 1D18              ;   builders.
 9257 1D18              ;   Some uses can be quite abstract but the principles can be seen in simple
 9258 1D18              ;   right-angled triangles. Triangles have some special properties -
 9259 1D18              ;
 9260 1D18              ;   1) The sum of the three angles is always PI radians (180 degrees).
 9261 1D18              ;      Very helpful if you know two angles and wish to find the third.
 9262 1D18              ;   2) In any right-angled triangle the sum of the squares of the two shorter
 9263 1D18              ;      sides is equal to the square of the longest side opposite the right-angle.
 9264 1D18              ;      Very useful if you know the length of two sides and wish to know the
 9265 1D18              ;      length of the third side.
 9266 1D18              ;   3) Functions sine, cosine and tangent enable one to calculate the length
 9267 1D18              ;      of an unknown side when the length of one other side and an angle is
 9268 1D18              ;      known.
 9269 1D18              ;   4) Functions arcsin, arccosine and arctan enable one to calculate an unknown
 9270 1D18              ;      angle when the length of two of the sides is known.
 9271 1D18
 9272 1D18              ; --------------------------------
 9273 1D18              ; THE 'REDUCE ARGUMENT' SUBROUTINE
 9274 1D18              ; --------------------------------
 9275 1D18              ; (offset $35: 'get-argt')
 9276 1D18              ;
 9277 1D18              ;   This routine performs two functions on the angle, in radians, that forms
 9278 1D18              ;   the argument to the sine and cosine functions.
 9279 1D18              ;   First it ensures that the angle 'wraps round'. That if a ship turns through
 9280 1D18              ;   an angle of, say, 3*PI radians (540 degrees) then the net effect is to turn
 9281 1D18              ;   through an angle of PI radians (180 degrees).
 9282 1D18              ;   Secondly it converts the angle in radians to a fraction of a right angle,
 9283 1D18              ;   depending within which quadrant the angle lies, with the periodicity
 9284 1D18              ;   resembling that of the desired sine value.
 9285 1D18              ;   The result lies in the range -1 to +1.
 9286 1D18              ;
 9287 1D18              ;                       90 deg.
 9288 1D18              ;
 9289 1D18              ;                       (pi/2)
 9290 1D18              ;                II       +1        I
 9291 1D18              ;                         |
 9292 1D18              ;          sin+      |\   |   /|    sin+
 9293 1D18              ;          cos-      | \  |  / |    cos+
 9294 1D18              ;          tan-      |  \ | /  |    tan+
 9295 1D18              ;                    |   \|/)  |
 9296 1D18              ;   180 deg. (pi) 0 -|----+----|-- 0  (0)   0 degrees
 9297 1D18              ;                    |   /|\   |
 9298 1D18              ;          sin-      |  / | \  |    sin-
 9299 1D18              ;          cos-      | /  |  \ |    cos+
 9300 1D18              ;          tan+      |/   |   \|    tan-
 9301 1D18              ;                         |
 9302 1D18              ;                III      -1       IV
 9303 1D18              ;                       (3pi/2)
 9304 1D18              ;
 9305 1D18              ;                       270 deg.
 9306 1D18
 9307 1D18
 9308 1D18              ;; get-argt
 9309 1D18 EF           L1D18:  RST     28H             ;; FP-CALC         X.
 9310 1D19 30                   DEFB    $30             ;;stk-data
 9311 1D1A EE                   DEFB    $EE             ;;Exponent: $7E,
 9312 1D1B                                              ;;Bytes: 4
 9313 1D1B 22 F9 83 6E          DEFB    $22,$F9,$83,$6E ;;                 X, 1/(2*PI)
 9314 1D1F 04                   DEFB    $04             ;;multiply         X/(2*PI) = fraction
 9315 1D20
 9316 1D20 2D                   DEFB    $2D             ;;duplicate
 9317 1D21 A2                   DEFB    $A2             ;;stk-half
 9318 1D22 0F                   DEFB    $0F             ;;addition
 9319 1D23 24                   DEFB    $24             ;;int
 9320 1D24
 9321 1D24 03                   DEFB    $03             ;;subtract         now range -.5 to .5
 9322 1D25
 9323 1D25 2D                   DEFB    $2D             ;;duplicate
 9324 1D26 0F                   DEFB    $0F             ;;addition         now range -1 to 1.
 9325 1D27 2D                   DEFB    $2D             ;;duplicate
 9326 1D28 0F                   DEFB    $0F             ;;addition         now range -2 to 2.
 9327 1D29
 9328 1D29              ;   quadrant I (0 to +1) and quadrant IV (-1 to 0) are now correct.
 9329 1D29              ;   quadrant II ranges +1 to +2.
 9330 1D29              ;   quadrant III ranges -2 to -1.
 9331 1D29
 9332 1D29 2D                   DEFB    $2D             ;;duplicate        Y, Y.
 9333 1D2A 27                   DEFB    $27             ;;abs              Y, abs(Y).    range 1 to 2
 9334 1D2B A1                   DEFB    $A1             ;;stk-one          Y, abs(Y), 1.
 9335 1D2C 03                   DEFB    $03             ;;subtract         Y, abs(Y)-1.  range 0 to 1
 9336 1D2D 2D                   DEFB    $2D             ;;duplicate        Y, Z, Z.
 9337 1D2E 33                   DEFB    $33             ;;greater-0        Y, Z, (1/0).
 9338 1D2F
 9339 1D2F C0                   DEFB    $C0             ;;st-mem-0         store as possible sign
 9340 1D30                                              ;;                 for cosine function.
 9341 1D30
 9342 1D30 00                   DEFB    $00             ;;jump-true
 9343 1D31 04                   DEFB    $04             ;;to L1D35, ZPLUS  with quadrants II and III
 9344 1D32
 9345 1D32              ;   else the angle lies in quadrant I or IV and value Y is already correct.
 9346 1D32
 9347 1D32 02                   DEFB    $02             ;;delete          Y    delete test value.
 9348 1D33 34                   DEFB    $34             ;;end-calc        Y.
 9349 1D34
 9350 1D34 C9                   RET                     ; return.         with Q1 and Q4 >>>
 9351 1D35
 9352 1D35              ;   The branch was here with quadrants II (0 to 1) and III (1 to 0).
 9353 1D35              ;   Y will hold -2 to -1 if this is quadrant III.
 9354 1D35
 9355 1D35              ;; ZPLUS
 9356 1D35 A1           L1D35:  DEFB    $A1             ;;stk-one         Y, Z, 1
 9357 1D36 03                   DEFB    $03             ;;subtract        Y, Z-1.       Q3 = 0 to -1
 9358 1D37 01                   DEFB    $01             ;;exchange        Z-1, Y.
 9359 1D38 32                   DEFB    $32             ;;less-0          Z-1, (1/0).
 9360 1D39 00                   DEFB    $00             ;;jump-true       Z-1.
 9361 1D3A 02                   DEFB    $02             ;;to L1D3C, YNEG
 9362 1D3B                                              ;;if angle in quadrant III
 9363 1D3B
 9364 1D3B              ;   else angle is within quadrant II (-1 to 0)
 9365 1D3B
 9366 1D3B 18                   DEFB    $18             ;;negate          range +1 to 0
 9367 1D3C
 9368 1D3C
 9369 1D3C              ;; YNEG
 9370 1D3C 34           L1D3C:  DEFB    $34             ;;end-calc        quadrants II and III correct.
 9371 1D3D
 9372 1D3D C9                   RET                     ; return.
 9373 1D3E
 9374 1D3E
 9375 1D3E              ; ---------------------
 9376 1D3E              ; THE 'COSINE' FUNCTION
 9377 1D3E              ; ---------------------
 9378 1D3E              ; (offset $1D: 'cos')
 9379 1D3E              ;   Cosines are calculated as the sine of the opposite angle rectifying the
 9380 1D3E              ;   sign depending on the quadrant rules.
 9381 1D3E              ;
 9382 1D3E              ;
 9383 1D3E              ;             /|
 9384 1D3E              ;          h /y|
 9385 1D3E              ;           /  |o
 9386 1D3E              ;          /x  |
 9387 1D3E              ;         /----|
 9388 1D3E              ;           a
 9389 1D3E              ;
 9390 1D3E              ;   The cosine of angle x is the adjacent side (a) divided by the hypotenuse 1.
 9391 1D3E              ;   However if we examine angle y then a/h is the sine of that angle.
 9392 1D3E              ;   Since angle x plus angle y equals a right-angle, we can find angle y by
 9393 1D3E              ;   subtracting angle x from pi/2.
 9394 1D3E              ;   However it's just as easy to reduce the argument first and subtract the
 9395 1D3E              ;   reduced argument from the value 1 (a reduced right-angle).
 9396 1D3E              ;   It's even easier to subtract 1 from the angle and rectify the sign.
 9397 1D3E              ;   In fact, after reducing the argument, the absolute value of the argument
 9398 1D3E              ;   is used and rectified using the test result stored in mem-0 by 'get-argt'
 9399 1D3E              ;   for that purpose.
 9400 1D3E
 9401 1D3E              ;; cos
 9402 1D3E EF           L1D3E:  RST     28H             ;; FP-CALC              angle in radians.
 9403 1D3F 35                   DEFB    $35             ;;get-argt              X       reduce -1 to +1
 9404 1D40
 9405 1D40 27                   DEFB    $27             ;;abs                   ABS X   0 to 1
 9406 1D41 A1                   DEFB    $A1             ;;stk-one               ABS X, 1.
 9407 1D42 03                   DEFB    $03             ;;subtract              now opposite angle
 9408 1D43                                              ;;                      though negative sign.
 9409 1D43 E0                   DEFB    $E0             ;;get-mem-0             fetch sign indicator.
 9410 1D44 00                   DEFB    $00             ;;jump-true
 9411 1D45 06                   DEFB    $06             ;;fwd to L1D4B, C-ENT
 9412 1D46                                              ;;forward to common code if in QII or QIII
 9413 1D46
 9414 1D46
 9415 1D46 18                   DEFB    $18             ;;negate                else make positive.
 9416 1D47 2F                   DEFB    $2F             ;;jump
 9417 1D48 03                   DEFB    $03             ;;fwd to L1D4B, C-ENT
 9418 1D49                                              ;;with quadrants QI and QIV
 9419 1D49
 9420 1D49              ; -------------------
 9421 1D49              ; THE 'SINE' FUNCTION
 9422 1D49              ; -------------------
 9423 1D49              ; (offset $1C: 'sin')
 9424 1D49              ;   This is a fundamental transcendental function from which others such as cos
 9425 1D49              ;   and tan are directly, or indirectly, derived.
 9426 1D49              ;   It uses the series generator to produce Chebyshev polynomials.
 9427 1D49              ;
 9428 1D49              ;
 9429 1D49              ;             /|
 9430 1D49              ;          1 / |
 9431 1D49              ;           /  |x
 9432 1D49              ;          /a  |
 9433 1D49              ;         /----|
 9434 1D49              ;           y
 9435 1D49              ;
 9436 1D49              ;   The 'get-argt' function is designed to modify the angle and its sign
 9437 1D49              ;   in line with the desired sine value and afterwards it can launch straight
 9438 1D49              ;   into common code.
 9439 1D49
 9440 1D49              ;; sin
 9441 1D49 EF           L1D49:  RST     28H             ;; FP-CALC      angle in radians
 9442 1D4A 35                   DEFB    $35             ;;get-argt      reduce - sign now correct.
 9443 1D4B
 9444 1D4B              ;; C-ENT
 9445 1D4B 2D           L1D4B:  DEFB    $2D             ;;duplicate
 9446 1D4C 2D                   DEFB    $2D             ;;duplicate
 9447 1D4D 04                   DEFB    $04             ;;multiply
 9448 1D4E 2D                   DEFB    $2D             ;;duplicate
 9449 1D4F 0F                   DEFB    $0F             ;;addition
 9450 1D50 A1                   DEFB    $A1             ;;stk-one
 9451 1D51 03                   DEFB    $03             ;;subtract
 9452 1D52
 9453 1D52 86                   DEFB    $86             ;;series-06
 9454 1D53 14                   DEFB    $14             ;;Exponent: $64, Bytes: 1
 9455 1D54 E6                   DEFB    $E6             ;;(+00,+00,+00)
 9456 1D55 5C                   DEFB    $5C             ;;Exponent: $6C, Bytes: 2
 9457 1D56 1F 0B                DEFB    $1F,$0B         ;;(+00,+00)
 9458 1D58 A3                   DEFB    $A3             ;;Exponent: $73, Bytes: 3
 9459 1D59 8F 38 EE             DEFB    $8F,$38,$EE     ;;(+00)
 9460 1D5C E9                   DEFB    $E9             ;;Exponent: $79, Bytes: 4
 9461 1D5D 15 63 BB 23          DEFB    $15,$63,$BB,$23 ;;
 9462 1D61 EE                   DEFB    $EE             ;;Exponent: $7E, Bytes: 4
 9463 1D62 92 0D CD ED          DEFB    $92,$0D,$CD,$ED ;;
 9464 1D66 F1                   DEFB    $F1             ;;Exponent: $81, Bytes: 4
 9465 1D67 23 5D 1B EA          DEFB    $23,$5D,$1B,$EA ;;
 9466 1D6B
 9467 1D6B 04                   DEFB    $04             ;;multiply
 9468 1D6C 34                   DEFB    $34             ;;end-calc
 9469 1D6D
 9470 1D6D C9                   RET                     ; return.
 9471 1D6E
 9472 1D6E
 9473 1D6E              ; ----------------------
 9474 1D6E              ; THE 'TANGENT' FUNCTION
 9475 1D6E              ; ----------------------
 9476 1D6E              ; (offset $1E: 'tan')
 9477 1D6E              ;
 9478 1D6E              ;   Evaluates tangent x as    sin(x) / cos(x).
 9479 1D6E              ;
 9480 1D6E              ;
 9481 1D6E              ;             /|
 9482 1D6E              ;          h / |
 9483 1D6E              ;           /  |o
 9484 1D6E              ;          /x  |
 9485 1D6E              ;         /----|
 9486 1D6E              ;           a
 9487 1D6E              ;
 9488 1D6E              ;   The tangent of angle x is the ratio of the length of the opposite side
 9489 1D6E              ;   divided by the length of the adjacent side. As the opposite length can
 9490 1D6E              ;   be calculates using sin(x) and the adjacent length using cos(x) then
 9491 1D6E              ;   the tangent can be defined in terms of the previous two functions.
 9492 1D6E
 9493 1D6E              ;   Error 6 if the argument, in radians, is too close to one like pi/2
 9494 1D6E              ;   which has an infinite tangent. e.g. PRINT TAN (PI/2)  evaluates as 1/0.
 9495 1D6E              ;   Similarly PRINT TAN (3*PI/2), TAN (5*PI/2) etc.
 9496 1D6E
 9497 1D6E              ;; tan
 9498 1D6E EF           L1D6E:  RST     28H             ;; FP-CALC          x.
 9499 1D6F 2D                   DEFB    $2D             ;;duplicate         x, x.
 9500 1D70 1C                   DEFB    $1C             ;;sin               x, sin x.
 9501 1D71 01                   DEFB    $01             ;;exchange          sin x, x.
 9502 1D72 1D                   DEFB    $1D             ;;cos               sin x, cos x.
 9503 1D73 05                   DEFB    $05             ;;division          sin x/cos x (= tan x).
 9504 1D74 34                   DEFB    $34             ;;end-calc          tan x.
 9505 1D75
 9506 1D75 C9                   RET                     ; return.
 9507 1D76
 9508 1D76              ; ---------------------
 9509 1D76              ; THE 'ARCTAN' FUNCTION
 9510 1D76              ; ---------------------
 9511 1D76              ; (Offset $21: 'atn')
 9512 1D76              ;   The inverse tangent function with the result in radians.
 9513 1D76              ;   This is a fundamental transcendental function from which others such as
 9514 1D76              ;   asn and acs are directly, or indirectly, derived.
 9515 1D76              ;   It uses the series generator to produce Chebyshev polynomials.
 9516 1D76
 9517 1D76              ;; atn
 9518 1D76 7E           L1D76:  LD      A,(HL)          ; fetch exponent
 9519 1D77 FE 81                CP      $81             ; compare to that for 'one'
 9520 1D79 38 0E                JR      C,L1D89         ; forward, if less, to SMALL
 9521 1D7B
 9522 1D7B EF                   RST     28H             ;; FP-CALC      X.
 9523 1D7C A1                   DEFB    $A1             ;;stk-one
 9524 1D7D 18                   DEFB    $18             ;;negate
 9525 1D7E 01                   DEFB    $01             ;;exchange
 9526 1D7F 05                   DEFB    $05             ;;division
 9527 1D80 2D                   DEFB    $2D             ;;duplicate
 9528 1D81 32                   DEFB    $32             ;;less-0
 9529 1D82 A3                   DEFB    $A3             ;;stk-pi/2
 9530 1D83 01                   DEFB    $01             ;;exchange
 9531 1D84 00                   DEFB    $00             ;;jump-true
 9532 1D85 06                   DEFB    $06             ;;to L1D8B, CASES
 9533 1D86
 9534 1D86 18                   DEFB    $18             ;;negate
 9535 1D87 2F                   DEFB    $2F             ;;jump
 9536 1D88 03                   DEFB    $03             ;;to L1D8B, CASES
 9537 1D89
 9538 1D89              ; ---
 9539 1D89
 9540 1D89              ;; SMALL
 9541 1D89 EF           L1D89:  RST     28H             ;; FP-CALC
 9542 1D8A A0                   DEFB    $A0             ;;stk-zero
 9543 1D8B
 9544 1D8B              ;; CASES
 9545 1D8B 01           L1D8B:  DEFB    $01             ;;exchange
 9546 1D8C 2D                   DEFB    $2D             ;;duplicate
 9547 1D8D 2D                   DEFB    $2D             ;;duplicate
 9548 1D8E 04                   DEFB    $04             ;;multiply
 9549 1D8F 2D                   DEFB    $2D             ;;duplicate
 9550 1D90 0F                   DEFB    $0F             ;;addition
 9551 1D91 A1                   DEFB    $A1             ;;stk-one
 9552 1D92 03                   DEFB    $03             ;;subtract
 9553 1D93
 9554 1D93 8C                   DEFB    $8C             ;;series-0C
 9555 1D94 10                   DEFB    $10             ;;Exponent: $60, Bytes: 1
 9556 1D95 B2                   DEFB    $B2             ;;(+00,+00,+00)
 9557 1D96 13                   DEFB    $13             ;;Exponent: $63, Bytes: 1
 9558 1D97 0E                   DEFB    $0E             ;;(+00,+00,+00)
 9559 1D98 55                   DEFB    $55             ;;Exponent: $65, Bytes: 2
 9560 1D99 E4 8D                DEFB    $E4,$8D         ;;(+00,+00)
 9561 1D9B 58                   DEFB    $58             ;;Exponent: $68, Bytes: 2
 9562 1D9C 39 BC                DEFB    $39,$BC         ;;(+00,+00)
 9563 1D9E 5B                   DEFB    $5B             ;;Exponent: $6B, Bytes: 2
 9564 1D9F 98 FD                DEFB    $98,$FD         ;;(+00,+00)
 9565 1DA1 9E                   DEFB    $9E             ;;Exponent: $6E, Bytes: 3
 9566 1DA2 00 36 75             DEFB    $00,$36,$75     ;;(+00)
 9567 1DA5 A0                   DEFB    $A0             ;;Exponent: $70, Bytes: 3
 9568 1DA6 DB E8 B4             DEFB    $DB,$E8,$B4     ;;(+00)
 9569 1DA9 63                   DEFB    $63             ;;Exponent: $73, Bytes: 2
 9570 1DAA 42 C4                DEFB    $42,$C4         ;;(+00,+00)
 9571 1DAC E6                   DEFB    $E6             ;;Exponent: $76, Bytes: 4
 9572 1DAD B5 09 36 BE          DEFB    $B5,$09,$36,$BE ;;
 9573 1DB1 E9                   DEFB    $E9             ;;Exponent: $79, Bytes: 4
 9574 1DB2 36 73 1B 5D          DEFB    $36,$73,$1B,$5D ;;
 9575 1DB6 EC                   DEFB    $EC             ;;Exponent: $7C, Bytes: 4
 9576 1DB7 D8 DE 63 BE          DEFB    $D8,$DE,$63,$BE ;;
 9577 1DBB F0                   DEFB    $F0             ;;Exponent: $80, Bytes: 4
 9578 1DBC 61 A1 B3 0C          DEFB    $61,$A1,$B3,$0C ;;
 9579 1DC0
 9580 1DC0 04                   DEFB    $04             ;;multiply
 9581 1DC1 0F                   DEFB    $0F             ;;addition
 9582 1DC2 34                   DEFB    $34             ;;end-calc
 9583 1DC3
 9584 1DC3 C9                   RET                     ; return.
 9585 1DC4
 9586 1DC4
 9587 1DC4              ; ---------------------
 9588 1DC4              ; THE 'ARCSIN' FUNCTION
 9589 1DC4              ; ---------------------
 9590 1DC4              ; (Offset $1F: 'asn')
 9591 1DC4              ;   The inverse sine function with result in radians.
 9592 1DC4              ;   Derived from arctan function above.
 9593 1DC4              ;   Error A unless the argument is between -1 and +1 inclusive.
 9594 1DC4              ;   Uses an adaptation of the formula asn(x) = atn(x/sqr(1-x*x))
 9595 1DC4              ;
 9596 1DC4              ;
 9597 1DC4              ;                 /|
 9598 1DC4              ;                / |
 9599 1DC4              ;              1/  |x
 9600 1DC4              ;              /a  |
 9601 1DC4              ;             /----|
 9602 1DC4              ;               y
 9603 1DC4              ;
 9604 1DC4              ;   e.g. We know the opposite side (x) and hypotenuse (1)
 9605 1DC4              ;   and we wish to find angle a in radians.
 9606 1DC4              ;   We can derive length y by Pythagoras and then use ATN instead.
 9607 1DC4              ;   Since y*y + x*x = 1*1 (Pythagoras Theorem) then
 9608 1DC4              ;   y=sqr(1-x*x)                         - no need to multiply 1 by itself.
 9609 1DC4              ;   So, asn(a) = atn(x/y)
 9610 1DC4              ;   or more fully,
 9611 1DC4              ;   asn(a) = atn(x/sqr(1-x*x))
 9612 1DC4
 9613 1DC4              ;   Close but no cigar.
 9614 1DC4
 9615 1DC4              ;   While PRINT ATN (x/SQR (1-x*x)) gives the same results as PRINT ASN x,
 9616 1DC4              ;   it leads to division by zero when x is 1 or -1.
 9617 1DC4              ;   To overcome this, 1 is added to y giving half the required angle and the
 9618 1DC4              ;   result is then doubled.
 9619 1DC4              ;   That is, PRINT ATN (x/(SQR (1-x*x) +1)) *2
 9620 1DC4              ;
 9621 1DC4              ;
 9622 1DC4              ;               . /|
 9623 1DC4              ;            .  c/ |
 9624 1DC4              ;         .     /1 |x
 9625 1DC4              ;      . c   b /a  |
 9626 1DC4              ;    ---------/----|
 9627 1DC4              ;      1      y
 9628 1DC4              ;
 9629 1DC4              ;   By creating an isosceles triangle with two equal sides of 1, angles c and
 9630 1DC4              ;   c are also equal. If b+c+d = 180 degrees and b+a = 180 degrees then c=a/2.
 9631 1DC4              ;
 9632 1DC4              ;   A value higher than 1 gives the required error as attempting to find  the
 9633 1DC4              ;   square root of a negative number generates an error in Sinclair BASIC.
 9634 1DC4
 9635 1DC4              ;; asn
 9636 1DC4 EF           L1DC4:  RST     28H             ;; FP-CALC      x.
 9637 1DC5 2D                   DEFB    $2D             ;;duplicate     x, x.
 9638 1DC6 2D                   DEFB    $2D             ;;duplicate     x, x, x.
 9639 1DC7 04                   DEFB    $04             ;;multiply      x, x*x.
 9640 1DC8 A1                   DEFB    $A1             ;;stk-one       x, x*x, 1.
 9641 1DC9 03                   DEFB    $03             ;;subtract      x, x*x-1.
 9642 1DCA 18                   DEFB    $18             ;;negate        x, 1-x*x.
 9643 1DCB 25                   DEFB    $25             ;;sqr           x, sqr(1-x*x) = y.
 9644 1DCC A1                   DEFB    $A1             ;;stk-one       x, y, 1.
 9645 1DCD 0F                   DEFB    $0F             ;;addition      x, y+1.
 9646 1DCE 05                   DEFB    $05             ;;division      x/y+1.
 9647 1DCF 21                   DEFB    $21             ;;atn           a/2     (half the angle)
 9648 1DD0 2D                   DEFB    $2D             ;;duplicate     a/2, a/2.
 9649 1DD1 0F                   DEFB    $0F             ;;addition      a.
 9650 1DD2 34                   DEFB    $34             ;;end-calc      a.
 9651 1DD3
 9652 1DD3 C9                   RET                     ; return.
 9653 1DD4
 9654 1DD4
 9655 1DD4              ; ------------------------
 9656 1DD4              ; THE 'ARCCOS' FUNCTION
 9657 1DD4              ; ------------------------
 9658 1DD4              ; (Offset $20: 'acs')
 9659 1DD4              ;   The inverse cosine function with the result in radians.
 9660 1DD4              ;   Error A unless the argument is between -1 and +1.
 9661 1DD4              ;   Result in range 0 to pi.
 9662 1DD4              ;   Derived from asn above which is in turn derived from the preceding atn. It
 9663 1DD4              ;   could have been derived directly from atn using acs(x) = atn(sqr(1-x*x)/x).
 9664 1DD4              ;   However, as sine and cosine are horizontal translations of each other,
 9665 1DD4              ;   uses acs(x) = pi/2 - asn(x)
 9666 1DD4
 9667 1DD4              ;   e.g. the arccosine of a known x value will give the required angle b in
 9668 1DD4              ;   radians.
 9669 1DD4              ;   We know, from above, how to calculate the angle a using asn(x).
 9670 1DD4              ;   Since the three angles of any triangle add up to 180 degrees, or pi radians,
 9671 1DD4              ;   and the largest angle in this case is a right-angle (pi/2 radians), then
 9672 1DD4              ;   we can calculate angle b as pi/2 (both angles) minus asn(x) (angle a).
 9673 1DD4              ;
 9674 1DD4              ;
 9675 1DD4              ;            /|
 9676 1DD4              ;         1 /b|
 9677 1DD4              ;          /  |x
 9678 1DD4              ;         /a  |
 9679 1DD4              ;        /----|
 9680 1DD4              ;          y
 9681 1DD4
 9682 1DD4              ;; acs
 9683 1DD4 EF           L1DD4:  RST     28H             ;; FP-CALC      x.
 9684 1DD5 1F                   DEFB    $1F             ;;asn           asn(x).
 9685 1DD6 A3                   DEFB    $A3             ;;stk-pi/2      asn(x), pi/2.
 9686 1DD7 03                   DEFB    $03             ;;subtract      asn(x) - pi/2.
 9687 1DD8 18                   DEFB    $18             ;;negate        pi/2 - asn(x) = acs(x).
 9688 1DD9 34                   DEFB    $34             ;;end-calc      acs(x)
 9689 1DDA
 9690 1DDA C9                   RET                     ; return.
 9691 1DDB
 9692 1DDB
 9693 1DDB              ; --------------------------
 9694 1DDB              ; THE 'SQUARE ROOT' FUNCTION
 9695 1DDB              ; --------------------------
 9696 1DDB              ; (Offset $25: 'sqr')
 9697 1DDB              ;   Error A if argument is negative.
 9698 1DDB              ;   This routine is remarkable for its brevity - 7 bytes.
 9699 1DDB              ;   The ZX81 code was originally 9K and various techniques had to be
 9700 1DDB              ;   used to shoe-horn it into an 8K Rom chip.
 9701 1DDB
 9702 1DDB
 9703 1DDB              ;; sqr
 9704 1DDB EF           L1DDB:  RST     28H             ;; FP-CALC              x.
 9705 1DDC 2D                   DEFB    $2D             ;;duplicate             x, x.
 9706 1DDD 2C                   DEFB    $2C             ;;not                   x, 1/0
 9707 1DDE 00                   DEFB    $00             ;;jump-true             x, (1/0).
 9708 1DDF 1E                   DEFB    $1E             ;;to L1DFD, LAST        exit if argument zero
 9709 1DE0                                              ;;                      with zero result.
 9710 1DE0
 9711 1DE0              ;   else continue to calculate as x ** .5
 9712 1DE0
 9713 1DE0 A2                   DEFB    $A2             ;;stk-half              x, .5.
 9714 1DE1 34                   DEFB    $34             ;;end-calc              x, .5.
 9715 1DE2
 9716 1DE2
 9717 1DE2              ; ------------------------------
 9718 1DE2              ; THE 'EXPONENTIATION' OPERATION
 9719 1DE2              ; ------------------------------
 9720 1DE2              ; (Offset $06: 'to-power')
 9721 1DE2              ;   This raises the first number X to the power of the second number Y.
 9722 1DE2              ;   As with the ZX80,
 9723 1DE2              ;   0 ** 0 = 1
 9724 1DE2              ;   0 ** +n = 0
 9725 1DE2              ;   0 ** -n = arithmetic overflow.
 9726 1DE2
 9727 1DE2              ;; to-power
 9728 1DE2 EF           L1DE2:  RST     28H             ;; FP-CALC              X,Y.
 9729 1DE3 01                   DEFB    $01             ;;exchange              Y,X.
 9730 1DE4 2D                   DEFB    $2D             ;;duplicate             Y,X,X.
 9731 1DE5 2C                   DEFB    $2C             ;;not                   Y,X,(1/0).
 9732 1DE6 00                   DEFB    $00             ;;jump-true
 9733 1DE7 07                   DEFB    $07             ;;forward to L1DEE, XISO if X is zero.
 9734 1DE8
 9735 1DE8              ;   else X is non-zero. function 'ln' will catch a negative value of X.
 9736 1DE8
 9737 1DE8 22                   DEFB    $22             ;;ln                    Y, LN X.
 9738 1DE9 04                   DEFB    $04             ;;multiply              Y * LN X
 9739 1DEA 34                   DEFB    $34             ;;end-calc
 9740 1DEB
 9741 1DEB C3 5B 1C             JP      L1C5B           ; jump back to EXP routine.  ->
 9742 1DEE
 9743 1DEE              ; ---
 9744 1DEE
 9745 1DEE              ;   These routines form the three simple results when the number is zero.
 9746 1DEE              ;   begin by deleting the known zero to leave Y the power factor.
 9747 1DEE
 9748 1DEE              ;; XISO
 9749 1DEE 02           L1DEE:  DEFB    $02             ;;delete                Y.
 9750 1DEF 2D                   DEFB    $2D             ;;duplicate             Y, Y.
 9751 1DF0 2C                   DEFB    $2C             ;;not                   Y, (1/0).
 9752 1DF1 00                   DEFB    $00             ;;jump-true
 9753 1DF2 09                   DEFB    $09             ;;forward to L1DFB, ONE if Y is zero.
 9754 1DF3
 9755 1DF3              ;   the power factor is not zero. If negative then an error exists.
 9756 1DF3
 9757 1DF3 A0                   DEFB    $A0             ;;stk-zero              Y, 0.
 9758 1DF4 01                   DEFB    $01             ;;exchange              0, Y.
 9759 1DF5 33                   DEFB    $33             ;;greater-0             0, (1/0).
 9760 1DF6 00                   DEFB    $00             ;;jump-true             0
 9761 1DF7 06                   DEFB    $06             ;;to L1DFD, LAST        if Y was any positive
 9762 1DF8                                              ;;                      number.
 9763 1DF8
 9764 1DF8              ;   else force division by zero thereby raising an Arithmetic overflow error.
 9765 1DF8              ;   There are some one and two-byte alternatives but perhaps the most formal
 9766 1DF8              ;   might have been to use end-calc; rst 08; defb 05.
 9767 1DF8
 9768 1DF8 A1                   DEFB    $A1             ;;stk-one               0, 1.
 9769 1DF9 01                   DEFB    $01             ;;exchange              1, 0.
 9770 1DFA 05                   DEFB    $05             ;;division              1/0    >> error
 9771 1DFB
 9772 1DFB              ; ---
 9773 1DFB
 9774 1DFB              ;; ONE
 9775 1DFB 02           L1DFB:  DEFB    $02             ;;delete                .
 9776 1DFC A1                   DEFB    $A1             ;;stk-one               1.
 9777 1DFD
 9778 1DFD              ;; LAST
 9779 1DFD 34           L1DFD:  DEFB    $34             ;;end-calc              last value 1 or 0.
 9780 1DFE
 9781 1DFE C9                   RET                     ; return.
 9782 1DFF
 9783 1DFF              ; ---------------------
 9784 1DFF              ; THE 'SPARE LOCATIONS'
 9785 1DFF              ; ---------------------
 9786 1DFF
 9787 1DFF              ;; SPARE
 9788 1DFF FF           L1DFF:  DEFB    $FF             ; That's all folks.
 9789 1E00
 9790 1E00
 9791 1E00
 9792 1E00              ; ------------------------
 9793 1E00              ; THE 'ZX81 CHARACTER SET'
 9794 1E00              ; ------------------------
 9795 1E00
 9796 1E00              ;; char-set - begins with space character.
 9797 1E00
 9798 1E00              ; $00 - Character: ' '          CHR$(0)
 9799 1E00
 9800 1E00 00           L1E00:  DEFB    %00000000
 9801 1E01 00                   DEFB    %00000000
 9802 1E02 00                   DEFB    %00000000
 9803 1E03 00                   DEFB    %00000000
 9804 1E04 00                   DEFB    %00000000
 9805 1E05 00                   DEFB    %00000000
 9806 1E06 00                   DEFB    %00000000
 9807 1E07 00                   DEFB    %00000000
 9808 1E08
 9809 1E08              ; $01 - Character: mosaic       CHR$(1)
 9810 1E08
 9811 1E08 F0                   DEFB    %11110000
 9812 1E09 F0                   DEFB    %11110000
 9813 1E0A F0                   DEFB    %11110000
 9814 1E0B F0                   DEFB    %11110000
 9815 1E0C 00                   DEFB    %00000000
 9816 1E0D 00                   DEFB    %00000000
 9817 1E0E 00                   DEFB    %00000000
 9818 1E0F 00                   DEFB    %00000000
 9819 1E10
 9820 1E10
 9821 1E10              ; $02 - Character: mosaic       CHR$(2)
 9822 1E10
 9823 1E10 0F                   DEFB    %00001111
 9824 1E11 0F                   DEFB    %00001111
 9825 1E12 0F                   DEFB    %00001111
 9826 1E13 0F                   DEFB    %00001111
 9827 1E14 00                   DEFB    %00000000
 9828 1E15 00                   DEFB    %00000000
 9829 1E16 00                   DEFB    %00000000
 9830 1E17 00                   DEFB    %00000000
 9831 1E18
 9832 1E18
 9833 1E18              ; $03 - Character: mosaic       CHR$(3)
 9834 1E18
 9835 1E18 FF                   DEFB    %11111111
 9836 1E19 FF                   DEFB    %11111111
 9837 1E1A FF                   DEFB    %11111111
 9838 1E1B FF                   DEFB    %11111111
 9839 1E1C 00                   DEFB    %00000000
 9840 1E1D 00                   DEFB    %00000000
 9841 1E1E 00                   DEFB    %00000000
 9842 1E1F 00                   DEFB    %00000000
 9843 1E20
 9844 1E20              ; $04 - Character: mosaic       CHR$(4)
 9845 1E20
 9846 1E20 00                   DEFB    %00000000
 9847 1E21 00                   DEFB    %00000000
 9848 1E22 00                   DEFB    %00000000
 9849 1E23 00                   DEFB    %00000000
 9850 1E24 F0                   DEFB    %11110000
 9851 1E25 F0                   DEFB    %11110000
 9852 1E26 F0                   DEFB    %11110000
 9853 1E27 F0                   DEFB    %11110000
 9854 1E28
 9855 1E28              ; $05 - Character: mosaic       CHR$(1)
 9856 1E28
 9857 1E28 F0                   DEFB    %11110000
 9858 1E29 F0                   DEFB    %11110000
 9859 1E2A F0                   DEFB    %11110000
 9860 1E2B F0                   DEFB    %11110000
 9861 1E2C F0                   DEFB    %11110000
 9862 1E2D F0                   DEFB    %11110000
 9863 1E2E F0                   DEFB    %11110000
 9864 1E2F F0                   DEFB    %11110000
 9865 1E30
 9866 1E30              ; $06 - Character: mosaic       CHR$(1)
 9867 1E30
 9868 1E30 0F                   DEFB    %00001111
 9869 1E31 0F                   DEFB    %00001111
 9870 1E32 0F                   DEFB    %00001111
 9871 1E33 0F                   DEFB    %00001111
 9872 1E34 F0                   DEFB    %11110000
 9873 1E35 F0                   DEFB    %11110000
 9874 1E36 F0                   DEFB    %11110000
 9875 1E37 F0                   DEFB    %11110000
 9876 1E38
 9877 1E38              ; $07 - Character: mosaic       CHR$(1)
 9878 1E38
 9879 1E38 FF                   DEFB    %11111111
 9880 1E39 FF                   DEFB    %11111111
 9881 1E3A FF                   DEFB    %11111111
 9882 1E3B FF                   DEFB    %11111111
 9883 1E3C F0                   DEFB    %11110000
 9884 1E3D F0                   DEFB    %11110000
 9885 1E3E F0                   DEFB    %11110000
 9886 1E3F F0                   DEFB    %11110000
 9887 1E40
 9888 1E40              ; $08 - Character: mosaic       CHR$(1)
 9889 1E40
 9890 1E40 AA                   DEFB    %10101010
 9891 1E41 55                   DEFB    %01010101
 9892 1E42 AA                   DEFB    %10101010
 9893 1E43 55                   DEFB    %01010101
 9894 1E44 AA                   DEFB    %10101010
 9895 1E45 55                   DEFB    %01010101
 9896 1E46 AA                   DEFB    %10101010
 9897 1E47 55                   DEFB    %01010101
 9898 1E48
 9899 1E48              ; $09 - Character: mosaic       CHR$(1)
 9900 1E48
 9901 1E48 00                   DEFB    %00000000
 9902 1E49 00                   DEFB    %00000000
 9903 1E4A 00                   DEFB    %00000000
 9904 1E4B 00                   DEFB    %00000000
 9905 1E4C AA                   DEFB    %10101010
 9906 1E4D 55                   DEFB    %01010101
 9907 1E4E AA                   DEFB    %10101010
 9908 1E4F 55                   DEFB    %01010101
 9909 1E50
 9910 1E50              ; $0A - Character: mosaic       CHR$(10)
 9911 1E50
 9912 1E50 AA                   DEFB    %10101010
 9913 1E51 55                   DEFB    %01010101
 9914 1E52 AA                   DEFB    %10101010
 9915 1E53 55                   DEFB    %01010101
 9916 1E54 00                   DEFB    %00000000
 9917 1E55 00                   DEFB    %00000000
 9918 1E56 00                   DEFB    %00000000
 9919 1E57 00                   DEFB    %00000000
 9920 1E58
 9921 1E58              ; $0B - Character: '"'          CHR$(11)
 9922 1E58
 9923 1E58 00                   DEFB    %00000000
 9924 1E59 24                   DEFB    %00100100
 9925 1E5A 24                   DEFB    %00100100
 9926 1E5B 00                   DEFB    %00000000
 9927 1E5C 00                   DEFB    %00000000
 9928 1E5D 00                   DEFB    %00000000
 9929 1E5E 00                   DEFB    %00000000
 9930 1E5F 00                   DEFB    %00000000
 9931 1E60
 9932 1E60              ; $0B - Character: ukp          CHR$(12)
 9933 1E60
 9934 1E60 00                   DEFB    %00000000
 9935 1E61 1C                   DEFB    %00011100
 9936 1E62 22                   DEFB    %00100010
 9937 1E63 78                   DEFB    %01111000
 9938 1E64 20                   DEFB    %00100000
 9939 1E65 20                   DEFB    %00100000
 9940 1E66 7E                   DEFB    %01111110
 9941 1E67 00                   DEFB    %00000000
 9942 1E68
 9943 1E68              ; $0B - Character: '$'          CHR$(13)
 9944 1E68
 9945 1E68 00                   DEFB    %00000000
 9946 1E69 08                   DEFB    %00001000
 9947 1E6A 3E                   DEFB    %00111110
 9948 1E6B 28                   DEFB    %00101000
 9949 1E6C 3E                   DEFB    %00111110
 9950 1E6D 0A                   DEFB    %00001010
 9951 1E6E 3E                   DEFB    %00111110
 9952 1E6F 08                   DEFB    %00001000
 9953 1E70
 9954 1E70              ; $0B - Character: ':'          CHR$(14)
 9955 1E70
 9956 1E70 00                   DEFB    %00000000
 9957 1E71 00                   DEFB    %00000000
 9958 1E72 00                   DEFB    %00000000
 9959 1E73 10                   DEFB    %00010000
 9960 1E74 00                   DEFB    %00000000
 9961 1E75 00                   DEFB    %00000000
 9962 1E76 10                   DEFB    %00010000
 9963 1E77 00                   DEFB    %00000000
 9964 1E78
 9965 1E78              ; $0B - Character: '?'          CHR$(15)
 9966 1E78
 9967 1E78 00                   DEFB    %00000000
 9968 1E79 3C                   DEFB    %00111100
 9969 1E7A 42                   DEFB    %01000010
 9970 1E7B 04                   DEFB    %00000100
 9971 1E7C 08                   DEFB    %00001000
 9972 1E7D 00                   DEFB    %00000000
 9973 1E7E 08                   DEFB    %00001000
 9974 1E7F 00                   DEFB    %00000000
 9975 1E80
 9976 1E80              ; $10 - Character: '('          CHR$(16)
 9977 1E80
 9978 1E80 00                   DEFB    %00000000
 9979 1E81 04                   DEFB    %00000100
 9980 1E82 08                   DEFB    %00001000
 9981 1E83 08                   DEFB    %00001000
 9982 1E84 08                   DEFB    %00001000
 9983 1E85 08                   DEFB    %00001000
 9984 1E86 04                   DEFB    %00000100
 9985 1E87 00                   DEFB    %00000000
 9986 1E88
 9987 1E88              ; $11 - Character: ')'          CHR$(17)
 9988 1E88
 9989 1E88 00                   DEFB    %00000000
 9990 1E89 20                   DEFB    %00100000
 9991 1E8A 10                   DEFB    %00010000
 9992 1E8B 10                   DEFB    %00010000
 9993 1E8C 10                   DEFB    %00010000
 9994 1E8D 10                   DEFB    %00010000
 9995 1E8E 20                   DEFB    %00100000
 9996 1E8F 00                   DEFB    %00000000
 9997 1E90
 9998 1E90              ; $12 - Character: '>'          CHR$(18)
 9999 1E90
10000 1E90 00                   DEFB    %00000000
10001 1E91 00                   DEFB    %00000000
10002 1E92 10                   DEFB    %00010000
10003 1E93 08                   DEFB    %00001000
10004 1E94 04                   DEFB    %00000100
10005 1E95 08                   DEFB    %00001000
10006 1E96 10                   DEFB    %00010000
10007 1E97 00                   DEFB    %00000000
10008 1E98
10009 1E98              ; $13 - Character: '<'          CHR$(19)
10010 1E98
10011 1E98 00                   DEFB    %00000000
10012 1E99 00                   DEFB    %00000000
10013 1E9A 04                   DEFB    %00000100
10014 1E9B 08                   DEFB    %00001000
10015 1E9C 10                   DEFB    %00010000
10016 1E9D 08                   DEFB    %00001000
10017 1E9E 04                   DEFB    %00000100
10018 1E9F 00                   DEFB    %00000000
10019 1EA0
10020 1EA0              ; $14 - Character: '='          CHR$(20)
10021 1EA0
10022 1EA0 00                   DEFB    %00000000
10023 1EA1 00                   DEFB    %00000000
10024 1EA2 00                   DEFB    %00000000
10025 1EA3 3E                   DEFB    %00111110
10026 1EA4 00                   DEFB    %00000000
10027 1EA5 3E                   DEFB    %00111110
10028 1EA6 00                   DEFB    %00000000
10029 1EA7 00                   DEFB    %00000000
10030 1EA8
10031 1EA8              ; $15 - Character: '+'          CHR$(21)
10032 1EA8
10033 1EA8 00                   DEFB    %00000000
10034 1EA9 00                   DEFB    %00000000
10035 1EAA 08                   DEFB    %00001000
10036 1EAB 08                   DEFB    %00001000
10037 1EAC 3E                   DEFB    %00111110
10038 1EAD 08                   DEFB    %00001000
10039 1EAE 08                   DEFB    %00001000
10040 1EAF 00                   DEFB    %00000000
10041 1EB0
10042 1EB0              ; $16 - Character: '-'          CHR$(22)
10043 1EB0
10044 1EB0 00                   DEFB    %00000000
10045 1EB1 00                   DEFB    %00000000
10046 1EB2 00                   DEFB    %00000000
10047 1EB3 00                   DEFB    %00000000
10048 1EB4 3E                   DEFB    %00111110
10049 1EB5 00                   DEFB    %00000000
10050 1EB6 00                   DEFB    %00000000
10051 1EB7 00                   DEFB    %00000000
10052 1EB8
10053 1EB8              ; $17 - Character: '*'          CHR$(23)
10054 1EB8
10055 1EB8 00                   DEFB    %00000000
10056 1EB9 00                   DEFB    %00000000
10057 1EBA 14                   DEFB    %00010100
10058 1EBB 08                   DEFB    %00001000
10059 1EBC 3E                   DEFB    %00111110
10060 1EBD 08                   DEFB    %00001000
10061 1EBE 14                   DEFB    %00010100
10062 1EBF 00                   DEFB    %00000000
10063 1EC0
10064 1EC0              ; $18 - Character: '/'          CHR$(24)
10065 1EC0
10066 1EC0 00                   DEFB    %00000000
10067 1EC1 00                   DEFB    %00000000
10068 1EC2 02                   DEFB    %00000010
10069 1EC3 04                   DEFB    %00000100
10070 1EC4 08                   DEFB    %00001000
10071 1EC5 10                   DEFB    %00010000
10072 1EC6 20                   DEFB    %00100000
10073 1EC7 00                   DEFB    %00000000
10074 1EC8
10075 1EC8              ; $19 - Character: ';'          CHR$(25)
10076 1EC8
10077 1EC8 00                   DEFB    %00000000
10078 1EC9 00                   DEFB    %00000000
10079 1ECA 10                   DEFB    %00010000
10080 1ECB 00                   DEFB    %00000000
10081 1ECC 00                   DEFB    %00000000
10082 1ECD 10                   DEFB    %00010000
10083 1ECE 10                   DEFB    %00010000
10084 1ECF 20                   DEFB    %00100000
10085 1ED0
10086 1ED0              ; $1A - Character: ','          CHR$(26)
10087 1ED0
10088 1ED0 00                   DEFB    %00000000
10089 1ED1 00                   DEFB    %00000000
10090 1ED2 00                   DEFB    %00000000
10091 1ED3 00                   DEFB    %00000000
10092 1ED4 00                   DEFB    %00000000
10093 1ED5 08                   DEFB    %00001000
10094 1ED6 08                   DEFB    %00001000
10095 1ED7 10                   DEFB    %00010000
10096 1ED8
10097 1ED8              ; $1B - Character: '"'          CHR$(27)
10098 1ED8
10099 1ED8 00                   DEFB    %00000000
10100 1ED9 00                   DEFB    %00000000
10101 1EDA 00                   DEFB    %00000000
10102 1EDB 00                   DEFB    %00000000
10103 1EDC 00                   DEFB    %00000000
10104 1EDD 18                   DEFB    %00011000
10105 1EDE 18                   DEFB    %00011000
10106 1EDF 00                   DEFB    %00000000
10107 1EE0
10108 1EE0              ; $1C - Character: '0'          CHR$(28)
10109 1EE0
10110 1EE0 00                   DEFB    %00000000
10111 1EE1 3C                   DEFB    %00111100
10112 1EE2 46                   DEFB    %01000110
10113 1EE3 4A                   DEFB    %01001010
10114 1EE4 52                   DEFB    %01010010
10115 1EE5 62                   DEFB    %01100010
10116 1EE6 3C                   DEFB    %00111100
10117 1EE7 00                   DEFB    %00000000
10118 1EE8
10119 1EE8              ; $1D - Character: '1'          CHR$(29)
10120 1EE8
10121 1EE8 00                   DEFB    %00000000
10122 1EE9 18                   DEFB    %00011000
10123 1EEA 28                   DEFB    %00101000
10124 1EEB 08                   DEFB    %00001000
10125 1EEC 08                   DEFB    %00001000
10126 1EED 08                   DEFB    %00001000
10127 1EEE 3E                   DEFB    %00111110
10128 1EEF 00                   DEFB    %00000000
10129 1EF0
10130 1EF0              ; $1E - Character: '2'          CHR$(30)
10131 1EF0
10132 1EF0 00                   DEFB    %00000000
10133 1EF1 3C                   DEFB    %00111100
10134 1EF2 42                   DEFB    %01000010
10135 1EF3 02                   DEFB    %00000010
10136 1EF4 3C                   DEFB    %00111100
10137 1EF5 40                   DEFB    %01000000
10138 1EF6 7E                   DEFB    %01111110
10139 1EF7 00                   DEFB    %00000000
10140 1EF8
10141 1EF8              ; $1F - Character: '3'          CHR$(31)
10142 1EF8
10143 1EF8 00                   DEFB    %00000000
10144 1EF9 3C                   DEFB    %00111100
10145 1EFA 42                   DEFB    %01000010
10146 1EFB 0C                   DEFB    %00001100
10147 1EFC 02                   DEFB    %00000010
10148 1EFD 42                   DEFB    %01000010
10149 1EFE 3C                   DEFB    %00111100
10150 1EFF 00                   DEFB    %00000000
10151 1F00
10152 1F00              ; $20 - Character: '4'          CHR$(32)
10153 1F00
10154 1F00 00                   DEFB    %00000000
10155 1F01 08                   DEFB    %00001000
10156 1F02 18                   DEFB    %00011000
10157 1F03 28                   DEFB    %00101000
10158 1F04 48                   DEFB    %01001000
10159 1F05 7E                   DEFB    %01111110
10160 1F06 08                   DEFB    %00001000
10161 1F07 00                   DEFB    %00000000
10162 1F08
10163 1F08              ; $21 - Character: '5'          CHR$(33)
10164 1F08
10165 1F08 00                   DEFB    %00000000
10166 1F09 7E                   DEFB    %01111110
10167 1F0A 40                   DEFB    %01000000
10168 1F0B 7C                   DEFB    %01111100
10169 1F0C 02                   DEFB    %00000010
10170 1F0D 42                   DEFB    %01000010
10171 1F0E 3C                   DEFB    %00111100
10172 1F0F 00                   DEFB    %00000000
10173 1F10
10174 1F10              ; $22 - Character: '6'          CHR$(34)
10175 1F10
10176 1F10 00                   DEFB    %00000000
10177 1F11 3C                   DEFB    %00111100
10178 1F12 40                   DEFB    %01000000
10179 1F13 7C                   DEFB    %01111100
10180 1F14 42                   DEFB    %01000010
10181 1F15 42                   DEFB    %01000010
10182 1F16 3C                   DEFB    %00111100
10183 1F17 00                   DEFB    %00000000
10184 1F18
10185 1F18              ; $23 - Character: '7'          CHR$(35)
10186 1F18
10187 1F18 00                   DEFB    %00000000
10188 1F19 7E                   DEFB    %01111110
10189 1F1A 02                   DEFB    %00000010
10190 1F1B 04                   DEFB    %00000100
10191 1F1C 08                   DEFB    %00001000
10192 1F1D 10                   DEFB    %00010000
10193 1F1E 10                   DEFB    %00010000
10194 1F1F 00                   DEFB    %00000000
10195 1F20
10196 1F20              ; $24 - Character: '8'          CHR$(36)
10197 1F20
10198 1F20 00                   DEFB    %00000000
10199 1F21 3C                   DEFB    %00111100
10200 1F22 42                   DEFB    %01000010
10201 1F23 3C                   DEFB    %00111100
10202 1F24 42                   DEFB    %01000010
10203 1F25 42                   DEFB    %01000010
10204 1F26 3C                   DEFB    %00111100
10205 1F27 00                   DEFB    %00000000
10206 1F28
10207 1F28              ; $25 - Character: '9'          CHR$(37)
10208 1F28
10209 1F28 00                   DEFB    %00000000
10210 1F29 3C                   DEFB    %00111100
10211 1F2A 42                   DEFB    %01000010
10212 1F2B 42                   DEFB    %01000010
10213 1F2C 3E                   DEFB    %00111110
10214 1F2D 02                   DEFB    %00000010
10215 1F2E 3C                   DEFB    %00111100
10216 1F2F 00                   DEFB    %00000000
10217 1F30
10218 1F30              ; $26 - Character: 'A'          CHR$(38)
10219 1F30
10220 1F30 00                   DEFB    %00000000
10221 1F31 3C                   DEFB    %00111100
10222 1F32 42                   DEFB    %01000010
10223 1F33 42                   DEFB    %01000010
10224 1F34 7E                   DEFB    %01111110
10225 1F35 42                   DEFB    %01000010
10226 1F36 42                   DEFB    %01000010
10227 1F37 00                   DEFB    %00000000
10228 1F38
10229 1F38              ; $27 - Character: 'B'          CHR$(39)
10230 1F38
10231 1F38 00                   DEFB    %00000000
10232 1F39 7C                   DEFB    %01111100
10233 1F3A 42                   DEFB    %01000010
10234 1F3B 7C                   DEFB    %01111100
10235 1F3C 42                   DEFB    %01000010
10236 1F3D 42                   DEFB    %01000010
10237 1F3E 7C                   DEFB    %01111100
10238 1F3F 00                   DEFB    %00000000
10239 1F40
10240 1F40              ; $28 - Character: 'C'          CHR$(40)
10241 1F40
10242 1F40 00                   DEFB    %00000000
10243 1F41 3C                   DEFB    %00111100
10244 1F42 42                   DEFB    %01000010
10245 1F43 40                   DEFB    %01000000
10246 1F44 40                   DEFB    %01000000
10247 1F45 42                   DEFB    %01000010
10248 1F46 3C                   DEFB    %00111100
10249 1F47 00                   DEFB    %00000000
10250 1F48
10251 1F48              ; $29 - Character: 'D'          CHR$(41)
10252 1F48
10253 1F48 00                   DEFB    %00000000
10254 1F49 78                   DEFB    %01111000
10255 1F4A 44                   DEFB    %01000100
10256 1F4B 42                   DEFB    %01000010
10257 1F4C 42                   DEFB    %01000010
10258 1F4D 44                   DEFB    %01000100
10259 1F4E 78                   DEFB    %01111000
10260 1F4F 00                   DEFB    %00000000
10261 1F50
10262 1F50              ; $2A - Character: 'E'          CHR$(42)
10263 1F50
10264 1F50 00                   DEFB    %00000000
10265 1F51 7E                   DEFB    %01111110
10266 1F52 40                   DEFB    %01000000
10267 1F53 7C                   DEFB    %01111100
10268 1F54 40                   DEFB    %01000000
10269 1F55 40                   DEFB    %01000000
10270 1F56 7E                   DEFB    %01111110
10271 1F57 00                   DEFB    %00000000
10272 1F58
10273 1F58              ; $2B - Character: 'F'          CHR$(43)
10274 1F58
10275 1F58 00                   DEFB    %00000000
10276 1F59 7E                   DEFB    %01111110
10277 1F5A 40                   DEFB    %01000000
10278 1F5B 7C                   DEFB    %01111100
10279 1F5C 40                   DEFB    %01000000
10280 1F5D 40                   DEFB    %01000000
10281 1F5E 40                   DEFB    %01000000
10282 1F5F 00                   DEFB    %00000000
10283 1F60
10284 1F60              ; $2C - Character: 'G'          CHR$(44)
10285 1F60
10286 1F60 00                   DEFB    %00000000
10287 1F61 3C                   DEFB    %00111100
10288 1F62 42                   DEFB    %01000010
10289 1F63 40                   DEFB    %01000000
10290 1F64 4E                   DEFB    %01001110
10291 1F65 42                   DEFB    %01000010
10292 1F66 3C                   DEFB    %00111100
10293 1F67 00                   DEFB    %00000000
10294 1F68
10295 1F68              ; $2D - Character: 'H'          CHR$(45)
10296 1F68
10297 1F68 00                   DEFB    %00000000
10298 1F69 42                   DEFB    %01000010
10299 1F6A 42                   DEFB    %01000010
10300 1F6B 7E                   DEFB    %01111110
10301 1F6C 42                   DEFB    %01000010
10302 1F6D 42                   DEFB    %01000010
10303 1F6E 42                   DEFB    %01000010
10304 1F6F 00                   DEFB    %00000000
10305 1F70
10306 1F70              ; $2E - Character: 'I'          CHR$(46)
10307 1F70
10308 1F70 00                   DEFB    %00000000
10309 1F71 3E                   DEFB    %00111110
10310 1F72 08                   DEFB    %00001000
10311 1F73 08                   DEFB    %00001000
10312 1F74 08                   DEFB    %00001000
10313 1F75 08                   DEFB    %00001000
10314 1F76 3E                   DEFB    %00111110
10315 1F77 00                   DEFB    %00000000
10316 1F78
10317 1F78              ; $2F - Character: 'J'          CHR$(47)
10318 1F78
10319 1F78 00                   DEFB    %00000000
10320 1F79 02                   DEFB    %00000010
10321 1F7A 02                   DEFB    %00000010
10322 1F7B 02                   DEFB    %00000010
10323 1F7C 42                   DEFB    %01000010
10324 1F7D 42                   DEFB    %01000010
10325 1F7E 3C                   DEFB    %00111100
10326 1F7F 00                   DEFB    %00000000
10327 1F80
10328 1F80              ; $30 - Character: 'K'          CHR$(48)
10329 1F80
10330 1F80 00                   DEFB    %00000000
10331 1F81 44                   DEFB    %01000100
10332 1F82 48                   DEFB    %01001000
10333 1F83 70                   DEFB    %01110000
10334 1F84 48                   DEFB    %01001000
10335 1F85 44                   DEFB    %01000100
10336 1F86 42                   DEFB    %01000010
10337 1F87 00                   DEFB    %00000000
10338 1F88
10339 1F88              ; $31 - Character: 'L'          CHR$(49)
10340 1F88
10341 1F88 00                   DEFB    %00000000
10342 1F89 40                   DEFB    %01000000
10343 1F8A 40                   DEFB    %01000000
10344 1F8B 40                   DEFB    %01000000
10345 1F8C 40                   DEFB    %01000000
10346 1F8D 40                   DEFB    %01000000
10347 1F8E 7E                   DEFB    %01111110
10348 1F8F 00                   DEFB    %00000000
10349 1F90
10350 1F90              ; $32 - Character: 'M'          CHR$(50)
10351 1F90
10352 1F90 00                   DEFB    %00000000
10353 1F91 42                   DEFB    %01000010
10354 1F92 66                   DEFB    %01100110
10355 1F93 5A                   DEFB    %01011010
10356 1F94 42                   DEFB    %01000010
10357 1F95 42                   DEFB    %01000010
10358 1F96 42                   DEFB    %01000010
10359 1F97 00                   DEFB    %00000000
10360 1F98
10361 1F98              ; $33 - Character: 'N'          CHR$(51)
10362 1F98
10363 1F98 00                   DEFB    %00000000
10364 1F99 42                   DEFB    %01000010
10365 1F9A 62                   DEFB    %01100010
10366 1F9B 52                   DEFB    %01010010
10367 1F9C 4A                   DEFB    %01001010
10368 1F9D 46                   DEFB    %01000110
10369 1F9E 42                   DEFB    %01000010
10370 1F9F 00                   DEFB    %00000000
10371 1FA0
10372 1FA0              ; $34 - Character: 'O'          CHR$(52)
10373 1FA0
10374 1FA0 00                   DEFB    %00000000
10375 1FA1 3C                   DEFB    %00111100
10376 1FA2 42                   DEFB    %01000010
10377 1FA3 42                   DEFB    %01000010
10378 1FA4 42                   DEFB    %01000010
10379 1FA5 42                   DEFB    %01000010
10380 1FA6 3C                   DEFB    %00111100
10381 1FA7 00                   DEFB    %00000000
10382 1FA8
10383 1FA8              ; $35 - Character: 'P'          CHR$(53)
10384 1FA8
10385 1FA8 00                   DEFB    %00000000
10386 1FA9 7C                   DEFB    %01111100
10387 1FAA 42                   DEFB    %01000010
10388 1FAB 42                   DEFB    %01000010
10389 1FAC 7C                   DEFB    %01111100
10390 1FAD 40                   DEFB    %01000000
10391 1FAE 40                   DEFB    %01000000
10392 1FAF 00                   DEFB    %00000000
10393 1FB0
10394 1FB0              ; $36 - Character: 'Q'          CHR$(54)
10395 1FB0
10396 1FB0 00                   DEFB    %00000000
10397 1FB1 3C                   DEFB    %00111100
10398 1FB2 42                   DEFB    %01000010
10399 1FB3 42                   DEFB    %01000010
10400 1FB4 52                   DEFB    %01010010
10401 1FB5 4A                   DEFB    %01001010
10402 1FB6 3C                   DEFB    %00111100
10403 1FB7 00                   DEFB    %00000000
10404 1FB8
10405 1FB8              ; $37 - Character: 'R'          CHR$(55)
10406 1FB8
10407 1FB8 00                   DEFB    %00000000
10408 1FB9 7C                   DEFB    %01111100
10409 1FBA 42                   DEFB    %01000010
10410 1FBB 42                   DEFB    %01000010
10411 1FBC 7C                   DEFB    %01111100
10412 1FBD 44                   DEFB    %01000100
10413 1FBE 42                   DEFB    %01000010
10414 1FBF 00                   DEFB    %00000000
10415 1FC0
10416 1FC0              ; $38 - Character: 'S'          CHR$(56)
10417 1FC0
10418 1FC0 00                   DEFB    %00000000
10419 1FC1 3C                   DEFB    %00111100
10420 1FC2 40                   DEFB    %01000000
10421 1FC3 3C                   DEFB    %00111100
10422 1FC4 02                   DEFB    %00000010
10423 1FC5 42                   DEFB    %01000010
10424 1FC6 3C                   DEFB    %00111100
10425 1FC7 00                   DEFB    %00000000
10426 1FC8
10427 1FC8              ; $39 - Character: 'T'          CHR$(57)
10428 1FC8
10429 1FC8 00                   DEFB    %00000000
10430 1FC9 FE                   DEFB    %11111110
10431 1FCA 10                   DEFB    %00010000
10432 1FCB 10                   DEFB    %00010000
10433 1FCC 10                   DEFB    %00010000
10434 1FCD 10                   DEFB    %00010000
10435 1FCE 10                   DEFB    %00010000
10436 1FCF 00                   DEFB    %00000000
10437 1FD0
10438 1FD0              ; $3A - Character: 'U'          CHR$(58)
10439 1FD0
10440 1FD0 00                   DEFB    %00000000
10441 1FD1 42                   DEFB    %01000010
10442 1FD2 42                   DEFB    %01000010
10443 1FD3 42                   DEFB    %01000010
10444 1FD4 42                   DEFB    %01000010
10445 1FD5 42                   DEFB    %01000010
10446 1FD6 3C                   DEFB    %00111100
10447 1FD7 00                   DEFB    %00000000
10448 1FD8
10449 1FD8              ; $3B - Character: 'V'          CHR$(59)
10450 1FD8
10451 1FD8 00                   DEFB    %00000000
10452 1FD9 42                   DEFB    %01000010
10453 1FDA 42                   DEFB    %01000010
10454 1FDB 42                   DEFB    %01000010
10455 1FDC 42                   DEFB    %01000010
10456 1FDD 24                   DEFB    %00100100
10457 1FDE 18                   DEFB    %00011000
10458 1FDF 00                   DEFB    %00000000
10459 1FE0
10460 1FE0              ; $3C - Character: 'W'          CHR$(60)
10461 1FE0
10462 1FE0 00                   DEFB    %00000000
10463 1FE1 42                   DEFB    %01000010
10464 1FE2 42                   DEFB    %01000010
10465 1FE3 42                   DEFB    %01000010
10466 1FE4 42                   DEFB    %01000010
10467 1FE5 5A                   DEFB    %01011010
10468 1FE6 24                   DEFB    %00100100
10469 1FE7 00                   DEFB    %00000000
10470 1FE8
10471 1FE8              ; $3D - Character: 'X'          CHR$(61)
10472 1FE8
10473 1FE8 00                   DEFB    %00000000
10474 1FE9 42                   DEFB    %01000010
10475 1FEA 24                   DEFB    %00100100
10476 1FEB 18                   DEFB    %00011000
10477 1FEC 18                   DEFB    %00011000
10478 1FED 24                   DEFB    %00100100
10479 1FEE 42                   DEFB    %01000010
10480 1FEF 00                   DEFB    %00000000
10481 1FF0
10482 1FF0              ; $3E - Character: 'Y'          CHR$(62)
10483 1FF0
10484 1FF0 00                   DEFB    %00000000
10485 1FF1 82                   DEFB    %10000010
10486 1FF2 44                   DEFB    %01000100
10487 1FF3 28                   DEFB    %00101000
10488 1FF4 10                   DEFB    %00010000
10489 1FF5 10                   DEFB    %00010000
10490 1FF6 10                   DEFB    %00010000
10491 1FF7 00                   DEFB    %00000000
10492 1FF8
10493 1FF8              ; $3F - Character: 'Z'          CHR$(63)
10494 1FF8
10495 1FF8 00                   DEFB    %00000000
10496 1FF9 7E                   DEFB    %01111110
10497 1FFA 04                   DEFB    %00000100
10498 1FFB 08                   DEFB    %00001000
10499 1FFC 10                   DEFB    %00010000
10500 1FFD 20                   DEFB    %00100000
10501 1FFE 7E                   DEFB    %01111110
10502 1FFF 00                   DEFB    %00000000
10503 2000
10504 2000              AUTORUN_BOOT:
10505 2000              ; decompress ZX7 data to $4009
10506 2000 21 5E 20             ld      hl, compressed_p
10507 2003 11 09 40             ld      de, $4009       ; load data here...
10508 2006 CD 19 20             call    decompress
10509 2009
10510 2009              ; prepare sysvars
10511 2009 FD 36 00 FF          ld      (iy+$00),$ff    ; clear ERR_SP
10512 200D
10513 200D 3E 00                ld      a, $00
10514 200F 32 06 40             ld      ($4006), a      ; set 'K' MODE
10515 2012
10516 2012 FD 36 01 C0          ld      (IY+$01),$C0    ; RESET FLAG
10517 2016 C3 2B 0F             jp      $0F2B           ; Exit via SLOW (to $0676, LINERUN)
10518 2019              decompress:
10519 2019                      include "./ZX7_SourceCode/asm/dzx7_standard.asm"
# file opened: ./ZX7_SourceCode/asm/dzx7_standard.asm
    1+2019              ; -----------------------------------------------------------------------------
    2+2019              ; ZX7 decoder by Einar Saukas, Antonio Villena & Metalbrain
    3+2019              ; "Standard" version (69 bytes only)
    4+2019              ; -----------------------------------------------------------------------------
    5+2019              ; Parameters:
    6+2019              ;   HL: source address (compressed data)
    7+2019              ;   DE: destination address (decompressing)
    8+2019              ; -----------------------------------------------------------------------------
    9+2019
   10+2019              dzx7_standard:
   11+2019 3E 80                ld      a, $80
   12+201B              dzx7s_copy_byte_loop:
   13+201B ED A0                ldi                             ; copy literal byte
   14+201D              dzx7s_main_loop:
   15+201D CD 58 20             call    dzx7s_next_bit
   16+2020 30 F9                jr      nc, dzx7s_copy_byte_loop ; next bit indicates either literal or sequence
   17+2022
   18+2022              ; determine number of bits used for length (Elias gamma coding)
   19+2022 D5                   push    de
   20+2023 01 00 00             ld      bc, 0
   21+2026 50                   ld      d, b
   22+2027              dzx7s_len_size_loop:
   23+2027 14                   inc     d
   24+2028 CD 58 20             call    dzx7s_next_bit
   25+202B 30 FA                jr      nc, dzx7s_len_size_loop
   26+202D
   27+202D              ; determine length
   28+202D              dzx7s_len_value_loop:
   29+202D D4 58 20             call    nc, dzx7s_next_bit
   30+2030 CB 11                rl      c
   31+2032 CB 10                rl      b
   32+2034 38 1F                jr      c, dzx7s_exit           ; check end marker
   33+2036 15                   dec     d
   34+2037 20 F4                jr      nz, dzx7s_len_value_loop
   35+2039 03                   inc     bc                      ; adjust length
   36+203A
   37+203A              ; determine offset
   38+203A 5E                   ld      e, (hl)                 ; load offset flag (1 bit) + offset value (7 bits)
   39+203B 23                   inc     hl
   40+203C CB 33                defb    $cb, $33                ; opcode for undocumented instruction "SLL E" aka "SLS E"
   41+203E 30 0C                jr      nc, dzx7s_offset_end    ; if offset flag is set, load 4 extra bits
   42+2040 16 10                ld      d, $10                  ; bit marker to load 4 bits
   43+2042              dzx7s_rld_next_bit:
   44+2042 CD 58 20             call    dzx7s_next_bit
   45+2045 CB 12                rl      d                       ; insert next bit into D
   46+2047 30 F9                jr      nc, dzx7s_rld_next_bit  ; repeat 4 times, until bit marker is out
   47+2049 14                   inc     d                       ; add 128 to DE
   48+204A CB 3A                srl	d			; retrieve fourth bit from D
   49+204C              dzx7s_offset_end:
   50+204C CB 1B                rr      e                       ; insert fourth bit into E
   51+204E
   52+204E              ; copy previous sequence
   53+204E E3                   ex      (sp), hl                ; store source, restore destination
   54+204F E5                   push    hl                      ; store destination
   55+2050 ED 52                sbc     hl, de                  ; HL = destination - offset - 1
   56+2052 D1                   pop     de                      ; DE = destination
   57+2053 ED B0                ldir
   58+2055              dzx7s_exit:
   59+2055 E1                   pop     hl                      ; restore source address (compressed data)
   60+2056 30 C5                jr      nc, dzx7s_main_loop
   61+2058              dzx7s_next_bit:
   62+2058 87                   add     a, a                    ; check next bit
   63+2059 C0                   ret     nz                      ; no more bits left?
   64+205A 7E                   ld      a, (hl)                 ; load another group of 8 bits
   65+205B 23                   inc     hl
   66+205C 17                   rla
   67+205D C9                   ret
   68+205E
   69+205E              ; -----------------------------------------------------------------------------
   70+205E
# file closed: ./ZX7_SourceCode/asm/dzx7_standard.asm
10520 205E              compressed_p:
10521 205E                      incbin "flightsimulation.p.zx7"
10522 3AD5
10523 3AD5 00 00 00...          DEFS    0x4000 - $, 0   ; fill up with 0
10524 4000              .END                                ;TASM assembler instruction.
10525 4000
# file closed: autorun.asm
